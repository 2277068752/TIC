(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["TEduBoard"] = factory();
	else
		root["TEduBoard"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/TEduBoard.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@tencent/aegis-web-sdk/lib/aegis.min.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tencent/aegis-web-sdk/lib/aegis.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * ==============================================
 * @tencent/aegis-web-sdk@1.22.4 (c) 2019 ivweb.
 * Author pumpkincai.
 * Released under the MIT License.
 * Thanks for supporting Aegis!
 * ==============================================
 **/
!function(e,t){ true?module.exports=t():undefined}(this,function(){"use strict";var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function f(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var y=function(){return(y=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};var v,h,e,t,i=(n.prototype.indexOf=function(e,t){for(var n=0;n<e.length;n++)if(e[n].callback===t)return n;return-1},n.prototype.on=function(e,t,n){if(void 0===n&&(n=0),this){var o=this.__EventsList[e];if(o=o||(this.__EventsList[e]=[]),-1!==this.indexOf(o,t))return this;var r={name:e,type:n||0,callback:t};return o.push(r),this}},n.prototype.one=function(e,t){this.on(e,t,1)},n.prototype.remove=function(e,t){if(this){var n=this.__EventsList[e];if(!n)return null;if(!t){try{delete this.__EventsList[e]}catch(e){}return null}if(n.length){var o=this.indexOf(n,t);n.splice(o,1)}return this}},n);function n(){var s=this;this.emit=function(e,t){if(s){var n,o=s.__EventsList[e];if(o&&o.length){o=o.slice();for(var r=0;r<o.length;r++){n=o[r];try{var i=n.callback.apply(s,[t]);if(1===n.type&&s.remove(e,n.callback),!1===i)break}catch(e){throw e}}}return s}},this.__EventsList={}}function w(e){return(e=Array.isArray(e)?e:[e]).map(function(t,n){return Object.getOwnPropertyNames(t).map(function(e){return r(e)+"["+n+"]="+r(t[e])}).join("&")}).join("&")+(e.length?"&count="+e.length:"")}function r(e){try{return encodeURIComponent(decodeURIComponent(e))}catch(e){return""}}function s(e,t){return"number"==typeof e?e:"string"==typeof e?e:t?h.string:h.number}function m(e,t){return"string"==typeof e?e.split("?")[t?1:0]||"":e}function b(e){return/^https/.test(e)}function a(){return void 0!==window.performance&&"function"==typeof(e=window.Performance)&&/native code/.test(e.toString())&&"function"==typeof performance.clearResourceTimings&&"function"==typeof performance.getEntriesByType&&"function"==typeof performance.now;var e}(t=v=v||{}).INFO_ALL="-1",t.API_RESPONSE="1",t.INFO="2",t.ERROR="4",t.PROMISE_ERROR="8",t.AJAX_ERROR="16",t.SCRIPT_ERROR="32",t.IMAGE_ERROR="64",t.CSS_ERROR="128",t.CONSOLE_ERROR="256",t.MEDIA_ERROR="512",t.RET_ERROR="1024",t.REPORT="2048",(e=h=h||{})[e.number=-1]="number",e.string="";var u=["application/octet-stream","application/xhtml+xml","application/xml","application/pdf","application/pkcs12","application/javascript","application/ecmascript","application/vnd.mspowerpoint","application/ogg","text/html","text/css","text/javascript","image","audio","video"];function O(t){return u.some(function(e){return-1!==t.indexOf(e)})}function E(e,t){try{if("string"==typeof e&&(e=JSON.parse(e)),t&&t.layer&&"string"==typeof t.layer&&(e=t.layer.split(".").reduce(function(e,t){return(e||{})[t]},e)),t&&t.ret){var n=t.ret;c=[].concat(n)}var o=Object.getOwnPropertyNames(e).filter(function(e){return-1!==c.indexOf(e.toLowerCase())});return o.length?""+e[o[0]]:"unknown"}catch(e){return"unknown"}}function R(e){try{return(JSON.stringify(e,(o=[],r=[],function(e,t){if(t instanceof Error)return"Error.message【 "+t.message+" 】;  Error.stack【 "+t.stack+" 】";if("object"==typeof t&&null!==t){var n=o.indexOf(t);if(-1!==n)return"[Circular "+r[n]+"]";o.push(t),r.push(e||"root")}return t}),4)||"undefined").replace(/"/gim,"")}catch(e){return"error happen when aegis stringify: \n "+e.message+" \n "+e.stack}var o,r}var c=["ret","retcode","code"],p=(Object.defineProperty(g.prototype,"sourceURL",{get:function(){return this.data.responseURL},enumerable:!0,configurable:!0}),Object.defineProperty(g.prototype,"status",{get:function(){return Number(this.data.status)},enumerable:!0,configurable:!0}),Object.defineProperty(g.prototype,"headers",{get:function(){var e=this.data.getAllResponseHeaders().split("\n"),r={};return e.forEach(function(e){if(e){var t=e.split(": "),n=t[0],o=t[1].trim();r[n]=o}}),r},enumerable:!0,configurable:!0}),g),x=(Object.defineProperty(d.prototype,"sourceURL",{get:function(){return this.data.url},enumerable:!0,configurable:!0}),Object.defineProperty(d.prototype,"status",{get:function(){return Number(this.data.status)},enumerable:!0,configurable:!0}),Object.defineProperty(d.prototype,"headers",{get:function(){var n={};return this.data.headers.forEach(function(e,t){n[t]=e}),n},enumerable:!0,configurable:!0}),d),l=[];function d(e,t){this.type="fetch",this.data=e||{},this.data.response=t}function g(e){this.type="xhr",this.data=e}function _(t){l.forEach(function(e){e(t)})}var L=!1,C=!1,S=["img","css","script","link","audio","radio"],A=[];function I(t){A.forEach(function(e){e(t)})}var P=0;function T(){var e,t=performance.getEntriesByType("resource"),n=t.slice(P);P=t.length;for(var o=0,r=n.length;o<r;o++){var i=n[o];-1!==S.indexOf(i.initiatorType)&&I({url:m((e=i).name),method:"get",duration:Number(e.duration.toFixed(2)),status:200,type:"static",isHttps:b(e.name),urlQuery:m(e.name,!0),x5ContentType:s(e.x5ContentType,!0),x5HttpStatusCode:s(e.x5HttpStatusCode),x5ImgDecodeStatus:s(e.x5ImgDecodeStatus),x5ErrorCode:s(e.x5ErrorCode),x5LoadFromLocalCache:void 0===e.x5LoadFromLocalCache?h.number:0|e.x5LoadFromLocalCache,x5ContentLength:e.encodedBodySize||s(e.x5ContentLength),domainLookup:s(e.domainLookupEnd-e.domainLookupStart),connectTime:s(e.connectEnd-e.connectStart)})}}var j,N=[];function k(e,t){var n=[];for(var o in e)n.push(o+"="+e[o]);N.forEach(function(e){e({url:t.config.performanceUrl+"?"+n.join("&")})}),N.length=0}function D(e){if(!e||!e.getBoundingClientRect)return!1;var t=e.getBoundingClientRect(),n=window.innerHeight,o=window.innerWidth;return 0<=t.left&&t.left<o&&0<=t.top&&t.top<n}var q=!1,H=[];function M(t){H.forEach(function(e){e(t)})}var U=[];function F(t){U.forEach(function(e){e(t)})}var X=!1;function B(e){return window.btoa&&window.btoa(JSON.stringify({ids:{trace_id:{high:J(),low:J()},span_id:J(),parent_id:0,flag:2},baggages:{aegis_session_id:e._sessionID}}))}function J(){return parseInt(new Array(53).fill(1).map(function(){return.5<Math.random()?1:0}).join(""),2)}function G(e){var t=document.createElement("a");return t.href=e,location.origin===t.origin}var W,Q,K,Y,z,V,Z=navigator.userAgent;function $(n,o){var r;void 0===n&&(n=0);var i=[];return function(e,t){if(i.push(e),o&&i.length>=o)return t(i.splice(0,i.length)),void(r&&clearTimeout(r));r&&clearTimeout(r),r=setTimeout(function(){r=null,t(i.splice(0,i.length))},n)}}(V=W=W||{})[V.android=1]="android",V[V.ios=2]="ios",V[V.other=100]="other",(z=Q=Q||{})[z.oldX5=1]="oldX5",z[z.newX5=2]="newX5",z[z.other=3]="other",(Y=K=K||{})[Y.unknown=100]="unknown",Y[Y.wifi=1]="wifi",Y[Y.net2g=2]="net2g",Y[Y.net3g=3]="net3g",Y[Y.net4g=4]="net4g",Y[Y.net5g=5]="net5g",Y[Y.net6g=6]="net6g";function ee(e,t){return Array.isArray(e)?t(e.map(function(e){return{msg:"string"==typeof e.msg?e.msg:[].concat(e.msg).map(R).join(" "),level:e.level}})):t({msg:"string"==typeof e.msg?e.msg:R(e.msg),level:e.level})}function te(r){return function(t,n){var e,o;e=r.config.getNetworkType,o=function(e){r.extendBean("netType",e),n(t)},(e||function(e){var t;e((t=navigator.connection&&navigator.connection.type?navigator.connection.type:"unknown",0<=(t=String(t).toLowerCase()).indexOf("2g")?K.net2g:0<=t.indexOf("3g")?K.net3g:0<=t.indexOf("4g")?K.net4g:0<=t.indexOf("5g")?K.net5g:0<=t.indexOf("6g")?K.net6g:0<=t.indexOf("wifi")?K.wifi:K.unknown))})(function(e){K[e]||(e=K.unknown),o(e)})}}var ne=function(){};function oe(n){if(!n||!n.reduce||!n.length)throw new TypeError("createPipeline need at least one function param");return 1===n.length?function(e,t){n[0](e,t||ne)}:n.reduce(function(n,o){return function(e,t){return void 0===t&&(t=ne),n(e,function(e){return o&&o(e,t)})}})}var re=(ie.prototype.init=function(e,t){var n=this;this.setConfig(e),ie.installedPlugins.forEach(function(e){e.call(n,t)}),this.lifeCycle.emit("onInited")},ie.prototype.setConfig=function(e){return Object.assign(this.config,e),this.bean.id=this.config.id||"",this.bean.uin=this.config.uin||"",this.bean.version=this.config.version||"1.22.4",this.lifeCycle.emit("onConfigChange",e),this.config},ie.prototype.extendBean=function(e,t){this.bean[e]=t},ie.use=function(e){-1===ie.installedPlugins.indexOf(e)&&ie.installedPlugins.push(e)},ie.prototype.send=function(e,t,n){throw new Error('You need to override "send" method')},ie.prototype._sendSDKError=function(e){this.send({url:"https://aegis.qq.com/collect?id=1085&msg[0]="+encodeURIComponent(R(e))+"&level[0]=2&from="+this.config.id+"&count=1&version="+this.config.id+"(1.22.4)",addBean:!1,method:"get"})},ie.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._normalLogPipeline({msg:e,level:v.INFO})},ie.prototype.infoAll=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._normalLogPipeline({msg:e,level:v.INFO_ALL})},ie.prototype.report=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._normalLogPipeline({msg:e,level:v.REPORT})},ie.prototype.reportPv=function(e){e&&this.send({url:this.config.url+"/"+e,addBean:!1})},ie.prototype.reportTime=function(e,t){"string"==typeof e?"number"==typeof t?this._submitCustomTime(e,t):console.warn("reportTime: second param must be number"):console.warn("reportTime: first param must be a string")},ie.prototype.time=function(e){"string"==typeof e?this._timeMap[e]?console.warn("Timer "+e+" already exists"):this._timeMap[e]=Date.now():console.warn("time: first param must be a string")},ie.prototype.timeEnd=function(e){"string"==typeof e?this._timeMap[e]?(this._submitCustomTime(e,Date.now()-this._timeMap[e]),delete this._timeMap[e]):console.warn("Timer "+e+" does not exist"):console.warn("timeEnd: first param must be a string")},ie.prototype._submitCustomTime=function(e,t){this._customTimePipeline({name:e,duration:t})},ie.installedPlugins=[],ie.LOG_TYPE=v,ie);function ie(e){var n,r=this;this.config={version:0,delay:1500,repeat:5,random:1,url:"https://aegis.qq.com/collect",speedUrl:"https://aegis.qq.com/speed",customTimeUrl:"https://aegis.qq.com/speed/custom",whiteListUrl:"https://aegis.qq.com/aegis/whitelist",performanceUrl:"https://aegis.qq.com/speed/performance",listenOnerror:!0},this.lifeCycle=new i,this.bean={},this._normalLogPipeline=oe([$(this.config.delay,5),(n=this.lifeCycle.emit,function(e,t){return n("beforeWrite",e),t(e)}),function(e){var o=!1,r=!1;setTimeout(function(){e.send({url:e.config.whiteListUrl||""},function(e){try{0===(e=JSON.parse(e)||{}).retcode&&(o=e.result.is_in_white_list)}catch(e){}r=!0},function(){r=!0})},50);var i=[];return function(e,t){if(o)t(e.concat(i.splice(0)).map(function(e){return e.level===v.INFO_ALL&&(e.level=v.INFO),e}));else{var n=e.filter(function(e){if(e.level!==v.INFO&&e.level!==v.API_RESPONSE)return e.level===v.INFO_ALL&&(e.level=v.INFO),!0;r||(i.push(e),200<=i.length&&(i.length=200))});n.length&&t(n)}}}(this),ee,function(e,t){var n=JSON.parse(JSON.stringify(e));r.lifeCycle.emit("beforeReport",n);var o=r.config.beforeReport;if("function"==typeof o&&(e=e.filter(function(e){return!1!==o(e)})),e.length)return t(e)},function(e){r.send({url:r.config.url||"",data:w(e),method:"post",contentType:"application/x-www-form-urlencoded"},function(){var t=r.config.onReport;"function"==typeof t&&e.forEach(function(e){t(e)})})}]),this._timeMap={},this._customTimePipeline=oe([$(this.config.delay),function(e){r.send({url:r.config.customTimeUrl+"?payload="+encodeURIComponent(JSON.stringify({custom:e}))})}])}function se(t){if(t.payload){var n={};return Object.keys(t).forEach(function(e){"payload"!==e&&(n[e]=t[e])}),n}return t}function ae(e,a){var u=null,c=null,t=a.shadowLog.pluginUrl||e;function n(e){if(u&&c){var o=a.id,r=a.uin,i=ce.urls.aegisCollect;try{var t=(f(n,s=c),n.prototype.init=function(e){var t={dbConfig:{name:e.namespace},lookupUrl:i+"/shadowLogAuto?id="+o+"&uin="+r,uploadUrl:i+"/shadowLog",preservedDay:7,id:o,uin:r,sessionId:ce._sessionID},n=new u(t);return this.flog=n,s.prototype.init.call(this,e)},n.prototype.postMessage=function(e){var t=e.type,n=e.data;"write"===t&&this.flog.add(n)},n.prototype.report=function(){this.flog.uploadLogs()},new n(a.shadowLog));e.lifeCycle.emit("onShadowLogInit",t)}catch(e){console.log(e)}}function n(){return null!==s&&s.apply(this,arguments)||this}var s}ce.useAsyncPlugin(ce.urls.flog,{exportsConstructor:"Flog",onAegisInitAndPluginLoaded:function(e,t){u=t,n(e)}}),ce.useAsyncPlugin(t,{exportsConstructor:"ShadowLogAegisPlugin",onAegisInitAndPluginLoaded:function(e,t){c=t,n(e)}})}Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(e){if(null==e)throw new TypeError("Cannot convert first argument to object");for(var t=Object(e),n=1;n<arguments.length;n++){var o=arguments[n];if(null!=o){o=Object(o);for(var r=Object.keys(Object(o)),i=0,s=r.length;i<s;i++){var a=r[i],u=Object.getOwnPropertyDescriptor(o,a);void 0!==u&&u.enumerable&&(t[a]=o[a])}}}return t}});var ue,ce=(f(fe,ue=re),Object.defineProperty(fe.prototype,"_bean",{get:function(){var t=this;return Object.getOwnPropertyNames(this.bean).map(function(e){return e+"="+t.bean[e]}).join("&")+"&from="+encodeURIComponent(location.href)+"&referer="+document.referrer},enumerable:!0,configurable:!0}),fe.prototype._initOfflineLog=function(){!function(e,d){var p=[],g=null;function h(e){p=p.concat(e)}function m(e,t){void 0===e&&(e={}),void 0===t&&(t={}),g={conds:e,params:t}}ce.useAsyncPlugin(e,{exportsConstructor:"Flog",onAegisInit:function(e){e.lifeCycle.on("beforeWrite",h),e.lifeCycle.on("uploadLogs",m)},onAegisInitAndPluginLoaded:function(t,e){var n=d.dbConfig,o=void 0===n?{}:n,r=d.url,i=void 0===r?ce.urls.aegisCollect:r,s=d.offlineLogExp,a=void 0===s?3:s,u=d.id,c=d.uin;t.lifeCycle.remove("beforeWrite",h),t.lifeCycle.remove("uploadLogs",m);var f=Object.assign({lookupUrl:i+"/offlineAuto?id="+u+"&uin="+c,uploadUrl:i+"/offlineLog",preservedDay:a,id:u,uin:c},o,{sessionId:ce._sessionID});try{var l=new e(f);p.forEach(function(e){l.add(y(y({},e),{level:v.INFO_ALL?v.INFO:e.level}))}),t.lifeCycle.on("beforeWrite",function(e){void 0===e&&(e=[]),e.forEach(function(e){l.add(y(y({},e),{level:v.INFO_ALL?v.INFO:e.level}))})}),t.lifeCycle.on("uploadLogs",function(e,t){void 0===e&&(e={}),void 0===t&&(t={});var n=Object.assign({id:d.id,uin:d.uin},e);l.uploadLogs(n,t)}),t.lifeCycle.on("onConfigChange",function(e){l.setConfig(e)}),l.on("PERREVENT",function(e){t.send({data:w({msg:R(e),level:v.INFO}),contentType:"application/x-www-form-urlencoded",method:"post",addBean:!1,url:d.url+"?id=893&sessionId="+ce._sessionID+"&uin="+d.uin+"&from="+d.id+"&count=1&version=1.22.4"})}),g&&(t.lifeCycle.emit("uploadLogs",g.conds,g.params),g=null),t.flog=l}catch(t){console.log(t)}}})}(fe.urls.flog,this.config)},fe.prototype._initShadowLog=function(){ae(fe.urls.shadowLog,this.config)},fe.prototype.uploadLogs=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.lifeCycle.emit("uploadLogs",e,t)},fe.useAsyncPlugin=function(s,e){void 0===e&&(e={});var t=e.exportsConstructor,a=void 0===t?"aegis-plugin-"+this.asyncPluginIndex++:t,n=e.onAegisInit,u=void 0===n?function(){}:n,o=e.onAegisInitAndPluginLoaded,c=void 0===o?function(){}:o;if("string"!=typeof s)throw new TypeError("useAsyncPlugin first param must be string");if("function"!=typeof u||"function"!=typeof c)throw new TypeError("onAegisInit、onAegisInitAndPluginLoaded must be function");this.use(function(){var e,t,n,o,r,i=this;try{u(this),fe._asyncPlugin[s]?c(this,window[fe._asyncPlugin[s]]):(e=s,t=a,n=function(e){if(!e){fe._asyncPlugin[s]=a;var t=window[a];c(i,t)}},o=document.createElement("script"),r=document.head,"function"==typeof t&&(n=t,t=""),o.src=e,o.setAttribute("name",t),o.name=t,o.async=!0,o.onload=o.onreadystatechange=function(){o.readyState&&"loaded"!==o.readyState&&"complete"!==o.readyState||("function"==typeof n&&n(!1),setTimeout(function(){r.removeChild(o)}))},o.onerror=function(){"function"==typeof n&&n(!0),setTimeout(function(){r.removeChild(o)})},r.appendChild(o))}catch(i){console.log("error on below is caused by "+s+"："),console.error(i)}})},Object.defineProperty(fe,"urls",{get:function(){return{aegisCollect:"https://aegis.qq.com/collect",flog:"https://cdn-go.cn/vasdev/web_webpersistance_v2/latest/flog.core.min.js",shadowLog:""}},enumerable:!0,configurable:!0}),fe.__version__="1.22.4",fe._sessionID="session-"+Date.now(),fe.asyncPluginIndex=0,fe._asyncPlugin={},fe);function fe(e){var o,s=ue.call(this,e)||this;s.send=function(e,t,n){if(e&&"string"==typeof e.url&&""!==e.url&&s.bean.id){var o=e.url;!1!==e.addBean&&(o=o+(-1===o.indexOf("?")?"?":"&")+s._bean);var r=e.method||"get",i=new XMLHttpRequest;i.__sendByAegis=!0,i.addEventListener("readystatechange",function(){4===i.readyState&&(400<=i.status?n&&n(i.response):t&&t(i.response))}),"get"===r.toLocaleLowerCase()?(i.open("get",function(e,n){if("string"!=typeof e)return"";if("object"==typeof n&&n){var t=Object.getOwnPropertyNames(n).map(function(e){var t=n[e];return e+"="+("string"==typeof t?encodeURIComponent(t):encodeURIComponent(JSON.stringify(t)))}).join("&").replace(/eval/gi,"evaI");return e+(-1===e.indexOf("?")?"?":"&")+t}return e}(o,e.data)),i.send()):(i.open("post",o),e.contentType&&i.setRequestHeader("Content-Type",e.contentType),"string"==typeof e.data&&(e.data=e.data.replace(/eval/gi,"evaI")),i.send(e.data))}},s._speedLogPipeline=oe([(o={},function(e,t){if(Array.isArray(e)){var n=e.filter(function(e){var t=!o[e.url];return o[e.url]=!0,t});n.length&&t(n)}else o[e.url]||t(e),o[e.url]=!0}),$(s.config.delay),te(s),function(e,t){s.lifeCycle.emit("beforeReportSpeed",e);var n=s.config.beforeReportSpeed;if("function"==typeof n&&(e=e.filter(function(e){var t=!1!==n(e);return"fetch"===e.type&&void 0===e.ret&&e.payload&&(e.ret=E(e.payload.data.response,s.config.api)),t})),e.length)return t(e)},function(e){s.send({url:""+s.config.speedUrl,method:"post",data:function(e,t){var n={fetch:[],static:[]},o=new FormData;if(Array.isArray(e))e.forEach(function(e){var t=se(e);n[e.type].push(t)});else{var r=se(e);n[e.type].push(r)}return o.append("payload",JSON.stringify(y({duration:n},t))),o}(e,s.bean)})}]);try{e.uin=e.uin||parseInt((document.cookie.match(/\buin=\D+(\d*)/)||[])[1],10)||parseInt((document.cookie.match(/\bilive_uin=\D*(\d+)/)||[])[1],10)||"",e.offlineLog&&s._initOfflineLog(),e.shadowLog&&s._initShadowLog(),s.init(e,fe),s.extendBean("sessionId",fe._sessionID)}catch(e){console.warn(e),console.log("%c以上错误发生在初始化 Aegis 的过程中，将会影响您正常使用 Aegis，\n建议您联系 aegis-helper，进行反馈，感谢您的支持。","color: red"),s._sendSDKError(e)}return s}return ce.use(function(){this.config.listenOnerror&&l.push(this._normalLogPipeline),function(){if(!L){L=!0;var n=window.onerror;window.onerror=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];_({msg:(e[0]||"")+" @ ("+(e[1]||"")+":"+(e[2]||0)+":"+(e[3]||0)+")",level:v.ERROR}),n&&n.call.apply(n,function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var o=Array(e),r=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,r++)o[r]=i[s];return o}([window],e))},window.addEventListener("unhandledrejection",function(e){_({msg:"PROMISE_ERROR: "+(e&&R(e.reason)),level:v.PROMISE_ERROR})});var i=0;window.document.addEventListener("error",function(e){if(e&&e.target&&e.srcElement){var t=e.target||e.srcElement,n=t.src||t.href,o=t.tagName;if(n&&o){var r={msg:o+" load fail: "+n,level:v.INFO};switch(o.toLowerCase()){case"script":r.level=v.SCRIPT_ERROR;break;case"link":r.level=v.CSS_ERROR;break;case"img":if(10<i)return;i++,r.level=v.IMAGE_ERROR;break;case"audio":case"video":r.level=v.MEDIA_ERROR;break;default:return}_(r)}}},!0);var e=window.XMLHttpRequest.prototype,t=e.open,o=e.send;e.open=function(){return this.aegisMethod&&this.aegisUrl||(this.aegisMethod=arguments[0],this.aegisUrl=arguments[1]),t.apply(this,arguments)},e.send=function(){return this.__sendByAegis||this.addEventListener("loadend",function(){this.aegisTimeout?_({msg:"AJAX_ERROR: request timeout. status: "+this.status+". \n url: "+this.aegisUrl,level:v.AJAX_ERROR}):0===this.status?_({msg:"AJAX_ERROR: request failed. status: "+this.status+". \n url: "+this.aegisUrl,level:v.AJAX_ERROR}):400<=this.status&&_({msg:"AJAX_ERROR: request error. status: "+this.status+". \n url: "+this.aegisUrl,level:v.AJAX_ERROR})}),this.__sendByAegis||this.addEventListener("timeout",function(){this.aegisTimeout=!0}),o.apply(this,arguments)}}}()}),ce.use(function(){var d,e,t,n;this.config.reportApiSpeed&&(H.push(this._speedLogPipeline),U.push(this._normalLogPipeline),q||(q=!0,function(g){if("function"==typeof window.fetch){var e=window.fetch;window.fetch=function(l,d){var p=Date.now();return e(l,d).then(function(f){try{var e=f.headers?f.headers.get("content-type"):"";f.ok&&"string"==typeof e&&O(e)?M({url:m(f.url),isHttps:b(f.url),method:d&&d.method||"get",duration:Date.now()-p,type:"static",status:f.status,urlQuery:m(f.url,!0),x5ContentType:h.string,x5HttpStatusCode:h.number,x5ImgDecodeStatus:h.number,x5ErrorCode:h.number,x5LoadFromLocalCache:h.number,x5ContentLength:h.number,domainLookup:h.number,connectTime:h.number}):f.clone().text().then(function(e){F({msg:l+" "+e,level:v.API_RESPONSE});var t=E(e,g.api),n={url:m(f.url),isHttps:b(f.url),method:d&&d.method||"get",duration:Date.now()-p,type:"fetch",ret:t||"unknown",status:f.status,payload:new x(f,e)},o=g.api&&g.api.errCode;o=o&&[].concat(o).map(function(e){return e+""});var r=g.api&&g.api.code;r=r&&[].concat(r).map(function(e){return e+""});var i=g.api&&"function"==typeof g.api.retCodeHandler&&g.api.retCodeHandler,s=!1;if(i){var a=i(e),u=a.code,c=a.isErr;n.ret=u,s=c}else s=o&&-1!==o.indexOf(t)||r&&-1===r.indexOf(t)||!o&&!r&&"0"!==t&&"unknown"!==t;M(n),s&&F({msg:"request url: "+l+" \n response: "+e,level:v.RET_ERROR})})}catch(e){}return f}).catch(function(e){throw M({url:m(l),isHttps:b(l),method:d&&d.method||"get",duration:Date.now()-p,type:"fetch",status:600}),e})}}}(this.config),d=this.config,e=window.XMLHttpRequest.prototype,t=e.open,n=e.send,e.open=function(){return this.aegisMethod&&this.aegisUrl||(this.aegisMethod=arguments[0],this.aegisUrl=arguments[1]),t.apply(this,arguments)},e.send=function(){var f=Date.now(),l=0;return this.__sendByAegis||this.addEventListener("loadend",function(){var e=this.aegisUrl;if(e){l=Date.now()-f;var t={url:m(e),isHttps:b(e),status:this.status,method:this.aegisMethod||"get",type:"fetch",duration:l,payload:new p(this)},n=this.getResponseHeader("content-type");if(400<=this.status||"string"!=typeof n||!O(n))try{F({msg:"req url: "+e+" \nres time: "+l+" \nres data: "+this.response,level:v.API_RESPONSE}),t.ret=E(this.response,d.api);var o=d.api&&d.api.errCode;o=o&&[].concat(o).map(function(e){return e+""});var r=d.api&&d.api.code;r=r&&[].concat(r).map(function(e){return e+""});var i=d.api&&"function"==typeof d.api.retCodeHandler&&d.api.retCodeHandler,s=!1;if(i){var a=i(this.response),u=a.code,c=a.isErr;t.ret=u,s=c}else s=o&&-1!==o.indexOf(t.ret)||r&&-1===r.indexOf(t.ret)||!o&&!r&&"0"!==t.ret&&"unknown"!==t.ret;s&&F({msg:"request url: "+e+" \n response: "+this.response,level:v.RET_ERROR})}catch(e){t.ret="unknown"}else t.type="static",delete t.ret,Object.assign(t,{urlQuery:m(e,!0),x5ContentType:h.string,x5HttpStatusCode:h.number,x5ImgDecodeStatus:h.number,x5ErrorCode:h.number,x5LoadFromLocalCache:h.number,x5ContentLength:h.number,domainLookup:h.number,connectTime:h.number});M(t)}}),n.apply(this,arguments)}))}),ce.use(function(){a()&&this.config.reportAssetSpeed&&(A.push(this._speedLogPipeline),C||(C=!0,setInterval(T,this.config.delay),performance.onresourcetimingbufferfull=function(){P=0,performance.clearResourceTimings()},window.document.addEventListener("error",function(e){if(e&&e.target&&e.srcElement){var t=e.target||e.srcElement,n=t.src||t.href;n&&I({url:m(n),status:400,method:"get",type:"static",isHttps:b(n),urlQuery:m(n,!0),x5ContentType:h.string,x5HttpStatusCode:h.number,x5ImgDecodeStatus:h.number,x5ErrorCode:h.number,x5LoadFromLocalCache:h.number,x5ContentLength:h.number,domainLookup:h.number,connectTime:h.number})}},!0)))}),ce.use(function(){var c,n,f,l,o=this;if(a())if(N.push(this.send),j)k(j,this);else try{c=function(e){var t=performance.timing,n=t.loadEventStart-t.domInteractive;n<0&&(n=1070),k(j={dnsLookup:t.domainLookupEnd-t.domainLookupStart,tcp:t.connectEnd-t.connectStart,ssl:0===t.secureConnectionStart?0:t.requestStart-t.secureConnectionStart,ttfb:t.responseStart-t.requestStart,contentDownload:t.responseEnd-t.responseStart,domParse:t.domInteractive-t.domLoading,resourceDownload:n,firstScreenTiming:Math.floor(e)},o)},n=["script","style","link","br"],f=[],(l=new MutationObserver(function(e){var t={roots:[],rootsDomNum:[],time:performance.now()};e.forEach(function(e){e&&e.addedNodes&&e.addedNodes.forEach&&e.addedNodes.forEach(function(e){1!==e.nodeType||-1!==n.indexOf(e.nodeName.toLocaleLowerCase())||function e(t,n){return!(!t||t===document.documentElement)&&(-1!==n.indexOf(t)||e(t.parentElement,n))}(e,t.roots)||(t.roots.push(e),t.rootsDomNum.push(function e(t){var n=0;if(t&&1===t.nodeType){n++;var o=t.children;if(o&&o.length)for(var r=0;r<o.length;r++)n+=e(o[r])}return n}(e)||0))})}),t.roots.length&&f.push(t)})).observe(document,{childList:!0,subtree:!0}),setTimeout(function(){l.disconnect();var n=0,o=0,r=!1;f.forEach(function(e){for(var t=0;t<e.roots.length;t++)e.rootsDomNum[t]>n&&D(e.roots[t])&&(n=e.rootsDomNum[t],o=e.time)});for(var e=document.querySelectorAll(".fp-check"),i=[],t=0;t<e.length;t++)if("img"===e[t].tagName.toLowerCase()&&""!==e[t].src)i.push(e[t].src);else{var s=window.getComputedStyle(e[t]),a=/url\([\'\"](.+)[\'\"]\)/gi.exec(s.backgroundImage);a&&2===a.length&&i.push(a[1])}var u=0;window.performance.getEntriesByType("resource").some(function(n){return i.some(function(e,t){if(e===n.name)return n.responseEnd>u&&(u=n.responseEnd),(n.fetchStart<o||n.startTime<o)&&n.responseEnd>o&&(r=!0,o=n.responseEnd),i.splice(t,1),!0}),0===i.length}),0===o&&(o=u),c(r?o:o+25)},3e3)}catch(c){}}),ce.use(function(){var t=this;!function(e){try{var t=window.localStorage.getItem("AEGIS_ID");t||(t="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}),window.localStorage.setItem("AEGIS_ID",t)),e(t||"")}catch(t){e("")}}(function(e){t.bean.aid=e})}),ce.use(function(e){var t;this.config.tjg&&(t=e,X||(X=!0,function(n){if("function"==typeof window.fetch){var o=window.fetch;window.fetch=function(e,t){return G(e)&&("object"==typeof t&&t?t.headers?t.headers instanceof Headers&&t.headers.append("X-Tjg-Json-Span-Context",B(n)):t.headers=new Headers({"X-Tjg-Json-Span-Context":B(n)}):t={headers:new Headers({"X-Tjg-Json-Span-Context":B(n)})}),o(e,t)}}}(t),function(e){if(window.XMLHttpRequest){var t=window.XMLHttpRequest.prototype.send,n=window.XMLHttpRequest.prototype.open;window.XMLHttpRequest.prototype.open=function(){return!this.__sendByAegis&&G(arguments[1])&&(this.useTjg=!0),n.apply(this,arguments)},window.XMLHttpRequest.prototype.send=function(){return this.useTjg&&this.setRequestHeader("X-Tjg-Json-Span-Context",B(e)),t.apply(this,arguments)}}}(t)))}),ce.use(function(){var e;this.config.reportAssetSpeed&&(this.extendBean("platform",(e=W.other,/\bAndroid\s*([^;]+)/.test(Z)?e=W.android:/\b(iPad|iPhone|iPod)\b.*? OS ([\d_]+)/.test(Z)&&(e=W.ios),e)),this.extendBean("x5Type",function(){var e=Q.other;if(0<=Z.indexOf("tbs")){var t=Z.match(/tbs\/([\d\.]+)/);e=t&&t[1]&&36541<=parseInt(t[1],10)?Q.newX5:Q.oldX5}return e}()),this.extendBean("netType",K.unknown))}),ce});
//# sourceMappingURL=aegis.min.js.map


/***/ }),

/***/ "./node_modules/alloyfinger/alloy_finger.js":
/*!**************************************************!*\
  !*** ./node_modules/alloyfinger/alloy_finger.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* AlloyFinger v0.1.15
 * By dntzhang
 * Github: https://github.com/AlloyTeam/AlloyFinger
 */
;
(function () {
    function getLen(v) {
        return Math.sqrt(v.x * v.x + v.y * v.y);
    }

    function dot(v1, v2) {
        return v1.x * v2.x + v1.y * v2.y;
    }

    function getAngle(v1, v2) {
        var mr = getLen(v1) * getLen(v2);
        if (mr === 0) return 0;
        var r = dot(v1, v2) / mr;
        if (r > 1) r = 1;
        return Math.acos(r);
    }

    function cross(v1, v2) {
        return v1.x * v2.y - v2.x * v1.y;
    }

    function getRotateAngle(v1, v2) {
        var angle = getAngle(v1, v2);
        if (cross(v1, v2) > 0) {
            angle *= -1;
        }

        return angle * 180 / Math.PI;
    }

    var HandlerAdmin = function (el) {
        this.handlers = [];
        this.el = el;
    };

    HandlerAdmin.prototype.add = function (handler) {
        this.handlers.push(handler);
    }

    HandlerAdmin.prototype.del = function (handler) {
        if (!handler) this.handlers = [];

        for (var i = this.handlers.length; i >= 0; i--) {
            if (this.handlers[i] === handler) {
                this.handlers.splice(i, 1);
            }
        }
    }

    HandlerAdmin.prototype.dispatch = function () {
        for (var i = 0, len = this.handlers.length; i < len; i++) {
            var handler = this.handlers[i];
            if (typeof handler === 'function') handler.apply(this.el, arguments);
        }
    }

    function wrapFunc(el, handler) {
        var handlerAdmin = new HandlerAdmin(el);
        handlerAdmin.add(handler);

        return handlerAdmin;
    }

    var AlloyFinger = function (el, option) {

        this.element = typeof el == 'string' ? document.querySelector(el) : el;

        this.start = this.start.bind(this);
        this.move = this.move.bind(this);
        this.end = this.end.bind(this);
        this.cancel = this.cancel.bind(this);
        this.element.addEventListener("touchstart", this.start, false);
        this.element.addEventListener("touchmove", this.move, false);
        this.element.addEventListener("touchend", this.end, false);
        this.element.addEventListener("touchcancel", this.cancel, false);

        this.preV = {
            x: null,
            y: null
        };
        this.pinchStartLen = null;
        this.zoom = 1;
        this.isDoubleTap = false;

        var noop = function () {};

        this.rotate = wrapFunc(this.element, option.rotate || noop);
        this.touchStart = wrapFunc(this.element, option.touchStart || noop);
        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);
        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);
        this.pinch = wrapFunc(this.element, option.pinch || noop);
        this.swipe = wrapFunc(this.element, option.swipe || noop);
        this.tap = wrapFunc(this.element, option.tap || noop);
        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);
        this.longTap = wrapFunc(this.element, option.longTap || noop);
        this.singleTap = wrapFunc(this.element, option.singleTap || noop);
        this.pressMove = wrapFunc(this.element, option.pressMove || noop);
        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);
        this.touchMove = wrapFunc(this.element, option.touchMove || noop);
        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);
        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);

        this._cancelAllHandler = this.cancelAll.bind(this);

        window.addEventListener('scroll', this._cancelAllHandler);

        this.delta = null;
        this.last = null;
        this.now = null;
        this.tapTimeout = null;
        this.singleTapTimeout = null;
        this.longTapTimeout = null;
        this.swipeTimeout = null;
        this.x1 = this.x2 = this.y1 = this.y2 = null;
        this.preTapPosition = {
            x: null,
            y: null
        };
    };

    AlloyFinger.prototype = {
        start: function (evt) {
            if (!evt.touches) return;
            this.now = Date.now();
            this.x1 = evt.touches[0].pageX;
            this.y1 = evt.touches[0].pageY;
            this.delta = this.now - (this.last || this.now);
            this.touchStart.dispatch(evt, this.element);
            if (this.preTapPosition.x !== null) {
                this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);
                if (this.isDoubleTap) clearTimeout(this.singleTapTimeout);
            }
            this.preTapPosition.x = this.x1;
            this.preTapPosition.y = this.y1;
            this.last = this.now;
            var preV = this.preV,
                len = evt.touches.length;
            if (len > 1) {
                this._cancelLongTap();
                this._cancelSingleTap();
                var v = {
                    x: evt.touches[1].pageX - this.x1,
                    y: evt.touches[1].pageY - this.y1
                };
                preV.x = v.x;
                preV.y = v.y;
                this.pinchStartLen = getLen(preV);
                this.multipointStart.dispatch(evt, this.element);
            }
            this._preventTap = false;
            this.longTapTimeout = setTimeout(function () {
                this.longTap.dispatch(evt, this.element);
                this._preventTap = true;
            }.bind(this), 750);
        },
        move: function (evt) {
            if (!evt.touches) return;
            var preV = this.preV,
                len = evt.touches.length,
                currentX = evt.touches[0].pageX,
                currentY = evt.touches[0].pageY;
            this.isDoubleTap = false;
            if (len > 1) {
                var sCurrentX = evt.touches[1].pageX,
                    sCurrentY = evt.touches[1].pageY
                var v = {
                    x: evt.touches[1].pageX - currentX,
                    y: evt.touches[1].pageY - currentY
                };

                if (preV.x !== null) {
                    if (this.pinchStartLen > 0) {
                        evt.zoom = getLen(v) / this.pinchStartLen;
                        this.pinch.dispatch(evt, this.element);
                    }

                    evt.angle = getRotateAngle(v, preV);
                    this.rotate.dispatch(evt, this.element);
                }
                preV.x = v.x;
                preV.y = v.y;

                if (this.x2 !== null && this.sx2 !== null) {
                    evt.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;
                    evt.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;
                } else {
                    evt.deltaX = 0;
                    evt.deltaY = 0;
                }
                this.twoFingerPressMove.dispatch(evt, this.element);

                this.sx2 = sCurrentX;
                this.sy2 = sCurrentY;
            } else {
                if (this.x2 !== null) {
                    evt.deltaX = currentX - this.x2;
                    evt.deltaY = currentY - this.y2;

                    //move事件中添加对当前触摸点到初始触摸点的判断，
                    //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。
                    var movedX = Math.abs(this.x1 - this.x2),
                        movedY = Math.abs(this.y1 - this.y2);

                    if (movedX > 10 || movedY > 10) {
                        this._preventTap = true;
                    }

                } else {
                    evt.deltaX = 0;
                    evt.deltaY = 0;
                }


                this.pressMove.dispatch(evt, this.element);
            }

            this.touchMove.dispatch(evt, this.element);

            this._cancelLongTap();
            this.x2 = currentX;
            this.y2 = currentY;

            if (len > 1) {
                evt.preventDefault();
            }
        },
        end: function (evt) {
            if (!evt.changedTouches) return;
            this._cancelLongTap();
            var self = this;
            if (evt.touches.length < 2) {
                this.multipointEnd.dispatch(evt, this.element);
                this.sx2 = this.sy2 = null;
            }

            //swipe
            if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||
                (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {
                evt.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);
                this.swipeTimeout = setTimeout(function () {
                    self.swipe.dispatch(evt, self.element);

                }, 0)
            } else {
                this.tapTimeout = setTimeout(function () {
                    if (!self._preventTap) {
                        self.tap.dispatch(evt, self.element);
                    }
                    // trigger double tap immediately
                    if (self.isDoubleTap) {
                        self.doubleTap.dispatch(evt, self.element);
                        self.isDoubleTap = false;
                    }
                }, 0)

                if (!self.isDoubleTap) {
                    self.singleTapTimeout = setTimeout(function () {
                        self.singleTap.dispatch(evt, self.element);
                    }, 250);
                }
            }

            this.touchEnd.dispatch(evt, this.element);

            this.preV.x = 0;
            this.preV.y = 0;
            this.zoom = 1;
            this.pinchStartLen = null;
            this.x1 = this.x2 = this.y1 = this.y2 = null;
        },
        cancelAll: function () {
            this._preventTap = true
            clearTimeout(this.singleTapTimeout);
            clearTimeout(this.tapTimeout);
            clearTimeout(this.longTapTimeout);
            clearTimeout(this.swipeTimeout);
        },
        cancel: function (evt) {
            this.cancelAll()
            this.touchCancel.dispatch(evt, this.element);
        },
        _cancelLongTap: function () {
            clearTimeout(this.longTapTimeout);
        },
        _cancelSingleTap: function () {
            clearTimeout(this.singleTapTimeout);
        },
        _swipeDirection: function (x1, x2, y1, y2) {
            return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down')
        },

        on: function (evt, handler) {
            if (this[evt]) {
                this[evt].add(handler);
            }
        },

        off: function (evt, handler) {
            if (this[evt]) {
                this[evt].del(handler);
            }
        },

        destroy: function () {
            if (this.singleTapTimeout) clearTimeout(this.singleTapTimeout);
            if (this.tapTimeout) clearTimeout(this.tapTimeout);
            if (this.longTapTimeout) clearTimeout(this.longTapTimeout);
            if (this.swipeTimeout) clearTimeout(this.swipeTimeout);

            this.element.removeEventListener("touchstart", this.start);
            this.element.removeEventListener("touchmove", this.move);
            this.element.removeEventListener("touchend", this.end);
            this.element.removeEventListener("touchcancel", this.cancel);

            this.rotate.del();
            this.touchStart.del();
            this.multipointStart.del();
            this.multipointEnd.del();
            this.pinch.del();
            this.swipe.del();
            this.tap.del();
            this.doubleTap.del();
            this.longTap.del();
            this.singleTap.del();
            this.pressMove.del();
            this.twoFingerPressMove.del()
            this.touchMove.del();
            this.touchEnd.del();
            this.touchCancel.del();

            this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;

            window.removeEventListener('scroll', this._cancelAllHandler);
            return null;
        }
    };

    if (true) {
        module.exports = AlloyFinger;
    } else {}
})();

/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_advance-string-index.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_advance-string-index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-copy-within.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-copy-within.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-fill.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_array-fill.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.9' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/modules/_fails-is-regexp.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_fails-is-regexp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-regexp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/core-js/modules/_microtask.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_microtask.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_new-promise-capability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-assign.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-sap.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-sap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-to-array.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var isEnum = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_perform.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_perform.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_promise-resolve.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec-abstract.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec-abstract.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/modules/_species-constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_species-constructor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-at.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-context.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-context.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-trim.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-trim.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var spaces = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),

/***/ "./node_modules/core-js/modules/_string-ws.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-ws.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-index.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_to-index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/modules/_typed-array.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-array.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js")) {
  var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
  var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
  var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
  var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
  var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
  var $buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
  var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
  var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
  var propertyDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
  var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
  var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
  var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
  var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
  var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
  var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
  var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
  var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
  var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
  var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
  var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
  var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
  var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
  var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
  var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
  var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
  var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
  var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
  var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
  var createArrayIncludes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js");
  var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
  var ArrayIterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
  var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
  var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
  var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
  var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
  var arrayCopyWithin = __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js");
  var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
  var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),

/***/ "./node_modules/core-js/modules/_typed-buffer.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-buffer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),

/***/ "./node_modules/core-js/modules/_typed.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_typed.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_user-agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_user-agent.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");


/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.fill.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.fill.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { fill: __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('fill');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, NUMBER, $Number);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.assign.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.assign.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var test = {};
test[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.promise.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js")($Promise, PROMISE);
__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(PROMISE);
Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('RegExp');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.exec.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.exec.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
__webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js")({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@match logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var callRegExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.ends-with.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.ends-with.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.includes.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.includes.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.starts-with.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.starts-with.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.includes.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $includes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('includes');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.values.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.values.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $values = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),

/***/ "./node_modules/long/src/long.js":
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),

/***/ "./node_modules/lz-string/libs/lz-string.js":
/*!**************************************************!*\
  !*** ./node_modules/lz-string/libs/lz-string.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (true) {
  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return LZString; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
} else {}


/***/ }),

/***/ "./src/TEduBoard.js":
/*!**************************!*\
  !*** ./src/TEduBoard.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/Config */ "./src/config/Config.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/util */ "./src/util/util.js");
/* harmony import */ var _util_polyfill__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/polyfill */ "./src/util/polyfill.js");
/* harmony import */ var _util_polyfill__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_util_polyfill__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _net_ELKLog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./net/ELKLog */ "./src/net/ELKLog.js");
/* harmony import */ var _event_TEduEvent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./event/TEduEvent */ "./src/event/TEduEvent.js");
/* harmony import */ var _board_Board__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./board/Board */ "./src/board/Board.js");
/* harmony import */ var _board_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./board/Event */ "./src/board/Event.js");
/* harmony import */ var _board_Aegis__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./board/Aegis */ "./src/board/Aegis.js");
/* harmony import */ var _model_TEduBoardToolType__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./model/TEduBoardToolType */ "./src/model/TEduBoardToolType.js");
/* harmony import */ var _model_TEduBoardContentFitMode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./model/TEduBoardContentFitMode */ "./src/model/TEduBoardContentFitMode.js");
/* harmony import */ var _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./model/TEduBoardWarningCode */ "./src/model/TEduBoardWarningCode.js");
/* harmony import */ var _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./model/TEduBoardArrowType */ "./src/model/TEduBoardArrowType.js");
/* harmony import */ var _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./model/TEduBoardLineType */ "./src/model/TEduBoardLineType.js");
/* harmony import */ var _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./model/TEduBoardOvalDrawMode */ "./src/model/TEduBoardOvalDrawMode.js");
/* harmony import */ var _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./model/TEduBoardVideoStatus */ "./src/model/TEduBoardVideoStatus.js");
/* harmony import */ var _model_TEduBoardH5FileStatus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./model/TEduBoardH5FileStatus */ "./src/model/TEduBoardH5FileStatus.js");
/* harmony import */ var _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./model/TEduBoardErrorCode */ "./src/model/TEduBoardErrorCode.js");
/* harmony import */ var _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./model/TEduBoardImageFitMode */ "./src/model/TEduBoardImageFitMode.js");
/* harmony import */ var _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./model/TEduBoardTextStyle */ "./src/model/TEduBoardTextStyle.js");
/* harmony import */ var _model_TEduBoardBackgroundH5Status__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./model/TEduBoardBackgroundH5Status */ "./src/model/TEduBoardBackgroundH5Status.js");
/* harmony import */ var _model_TEduBoardUploadStatus__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./model/TEduBoardUploadStatus */ "./src/model/TEduBoardUploadStatus.js");
/* harmony import */ var _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./model/TEduBoardImageStatus */ "./src/model/TEduBoardImageStatus.js");
/* harmony import */ var _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./model/TEduBoardElementType */ "./src/model/TEduBoardElementType.js");
























/**
 * @defgroup ctrl TEduBoardController
 * 白板功能的主要接口类
 */

/**
 * @defgroup callback TEduBoardCallback
 * 白板功能的回调接口类
 */

/**
 * @defgroup def 关键类型定义
 */

/**
 * @defgroup code 错误码
 */

/**
 * @brief 白板回调事件
 */

TEduBoard.EVENT = _event_TEduEvent__WEBPACK_IMPORTED_MODULE_5__["default"].commonEvent;
TEduBoard.TOOL_TYPE = _model_TEduBoardToolType__WEBPACK_IMPORTED_MODULE_9__["default"];
TEduBoard.CONTENT_FIT_MODE = _model_TEduBoardContentFitMode__WEBPACK_IMPORTED_MODULE_10__["default"];
TEduBoard.ARROW_TYPE = _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_12__["default"];
TEduBoard.LINE_TYPE = _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_13__["default"];
TEduBoard.OVAL_DRAW_MODE = _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_14__["default"];
TEduBoard.VIDEO_STATUS = _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_15__["default"];
TEduBoard.H5FILE_STATUS = _model_TEduBoardH5FileStatus__WEBPACK_IMPORTED_MODULE_16__["default"];
TEduBoard.TEduBoardErrorCode = _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_17__["default"];
TEduBoard.TEduBoardWarningCode = _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"];
TEduBoard.TEduBoardToolType = _model_TEduBoardToolType__WEBPACK_IMPORTED_MODULE_9__["default"];
TEduBoard.TEduBoardImageFitMode = _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_18__["default"];
TEduBoard.TEduBoardTextStyle = _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_19__["default"];
TEduBoard.TEduBoardUploadStatus = _model_TEduBoardUploadStatus__WEBPACK_IMPORTED_MODULE_21__["default"];
TEduBoard.TEduBoardBackgroundH5Status = _model_TEduBoardBackgroundH5Status__WEBPACK_IMPORTED_MODULE_20__["default"];
TEduBoard.TEduBoardContentFitMode = _model_TEduBoardContentFitMode__WEBPACK_IMPORTED_MODULE_10__["default"];
TEduBoard.TEduBoardLineType = _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_13__["default"];
TEduBoard.TEduBoardArrowType = _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_12__["default"];
TEduBoard.TEduBoardOvalDrawMode = _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_14__["default"];
TEduBoard.TEduBoardH5FileStatus = _model_TEduBoardH5FileStatus__WEBPACK_IMPORTED_MODULE_16__["default"];
TEduBoard.TEduBoardVideoStatus = _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_15__["default"];
TEduBoard.TEduBoardImageStatus = _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_22__["default"];
TEduBoard.TEduBoardElementType = _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_23__["default"]; /// @name 创建销毁实例
/// @{

/**
 * @memberof TEduBoard
 * @fn TEduBoard(TEduBoardInitParam initParams)
 * @brief 白板构造函数
 * @param initParams     【必填】白板初始化参数
 */

function TEduBoard(initParams) {
  var _this = this;

  _config_Config__WEBPACK_IMPORTED_MODULE_1__["default"].setNativeVersion(initParams.nativeVersion);
  _config_Config__WEBPACK_IMPORTED_MODULE_1__["default"].setPlatform(initParams.platform || _config_Config__WEBPACK_IMPORTED_MODULE_1__["default"].PLATFORM);
  initParams.tlsData = {
    sdkAppId: initParams.sdkAppId,
    identifier: initParams.userId + '',
    userSig: initParams.userSig
  };
  this.version = _config_Config__WEBPACK_IMPORTED_MODULE_1__["default"].VERSION;
  var aegis = new _board_Aegis__WEBPACK_IMPORTED_MODULE_8__["default"]();
  aegis.setConfig({
    uin: "".concat(initParams.sdkAppId, "_").concat(initParams.userId)
  });
  initParams.aegis = aegis;
  var elkLog = new _net_ELKLog__WEBPACK_IMPORTED_MODULE_4__["default"]();
  elkLog.setSdkAppid(initParams.sdkAppId);
  elkLog.setRoomId(initParams.classId);
  elkLog.setUserId(initParams.userId);
  initParams.elkLog = elkLog;
  this.event = new _board_Event__WEBPACK_IMPORTED_MODULE_7__["default"]();
  initParams.event = this.event;
  this.board = new _board_Board__WEBPACK_IMPORTED_MODULE_6__["default"](initParams);

  if (initParams.syncHistroyEnable) {
    this.historySyncDone = false;
  } else {
    this.historySyncDone = true;
  }

  this.event.on(TEduBoard.EVENT.TEB_HISTROYDATA_SYNCCOMPLETED, function () {
    _this.historySyncDone = true;
  });
  console.log('tedu board version:', this.version);
}
/**
 * @memberof TEduBoard
 * @fn void destroy()
 * @brief 销毁白板
 */


TEduBoard.prototype.destroy = function () {
  this.off(); // 销毁所有事件

  this.event = null;
  this.board && this.board.destroy();
  this.board = null;
  this.historySyncDone = false; // 历史数据是否同步完成
}; /// @}
/// @name 设置 TEduBoardCallback 回调
/// @{

/**
 * @memberof TEduBoard
 * @fn void on(String name, Function callback)
 * @brief 启用事件监听
 * @param name              【必填】要监听的事件
 * @param callback          【必填】事件处理回调
 */


TEduBoard.prototype.on = function (name, callback) {
  this.event.on(name, callback);
};
/**
 * @memberof TEduBoard
 * @fn void off(String name, Function callback)
 * @brief 取消事件监听
 * @param name              【必填】要取消监听的事件
 * @param callback          【必填】事件处理回调
 */


TEduBoard.prototype.off = function (name, callback) {
  this.event && this.event.off(name, callback);
}; /// @}
/// @name 基本流程接口
/// @{

/**
 * @memberof TEduBoard
 * @fn void addSyncData(Object data)
 * @brief 添加白板同步数据
 * @param data 				【必填】接收到的房间内其他人发送的同步数据
 * @note 该接口用于多个白板间的数据同步
 */


TEduBoard.prototype.addSyncData = function (data) {
  this.board && this.board.addData(data); // 增加判断，避免用户在销毁后，im事件没有解除绑定，而后继续调用的报错
};

TEduBoard.getVersion = function () {
  return _config_Config__WEBPACK_IMPORTED_MODULE_1__["default"].VERSION;
};
/**
 * @memberof TEduBoard
 * @fn String getVersion()
 * @brief 获取 SDK 版本号
 * @return SDK 版本号
 */


TEduBoard.prototype.getVersion = function () {
  return this.version;
};
/**
 * @memberof TEduBoard
 * @fn void setDataSyncEnable(Boolean enable)
 * @brief 设置白板是否开启数据同步
 * @param enable            【必填】是否开启
 *
 * 白板创建后默认开启数据同步，关闭数据同步，本地的所有白板操作不会同步到远端和服务器
 */


TEduBoard.prototype.setDataSyncEnable = function (enable) {
  this.board.setDataSyncEnable(enable);
};
/**
 * @memberof TEduBoard
 * @fn Boolean isDataSyncEnable()
 * @brief 获取白板是否开启数据同步
 * @return 是否开启数据同步，true 表示开启，false 表示关闭
 */


TEduBoard.prototype.isDataSyncEnable = function () {
  return this.board.isDataSyncEnable();
};
/**
 * @memberof TEduBoard
 * @fn void reset()
 * @brief 重置白板
 *
 * 调用该接口后将会删除所有的白板页和文件
 */


TEduBoard.prototype.reset = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'reset invalid while load history');
    return;
  }

  this.board.clearAll();
};
/**
 * @memberof TEduBoard
 * @fn Number getSyncTime()
 * @brief 获取同步时间戳
 * @return 毫秒级同步时间戳
 */


TEduBoard.prototype.getSyncTime = function () {
  return this.board.getSyncTime();
};
/**
 * @memberof TEduBoard
 * @fn void syncRemoteTime(String userId, Number timestamp)
 * @brief 同步远端时间戳
 * @param userId			【必填】远端用户 ID
 * @param timestamp			【必填】远端用户毫秒级同步时间戳
 */


TEduBoard.prototype.syncRemoteTime = function (userId, timestamp) {
  this.board.syncRemoteTime(userId, timestamp);
};

TEduBoard.prototype.generateFid = function () {
  return "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp());
}; /// @}
/// @name 涂鸦相关接口
/// @{

/**
 * @memberof TEduBoard
 * @fn void setDrawEnable(Boolean enable)
 * @brief 设置白板是否允许涂鸦
 * @param enable 			【必填】是否允许涂鸦，true 表示白板可以涂鸦，false 表示白板不能涂鸦
 *
 * 白板创建后默认为允许涂鸦状态
 */


TEduBoard.prototype.setDrawEnable = function (enable) {
  this.board.setDrawEnable(enable);
};
/**
 * @memberof TEduBoard
 * @fn Boolean isDrawEnable()
 * @brief 获取白板是否允许涂鸦
 * @return 是否允许涂鸦，true 表示白板可以涂鸦，false 表示白板不能涂鸦
 */


TEduBoard.prototype.isDrawEnable = function () {
  return this.board.isDrawEnable();
};
/**
 * @memberof TEduBoard
 * @fn void setAccessibleUsers(Array users)
 * @brief 设置允许操作哪些用户绘制的图形
 * @param users             【必填】指定允许操作的用户集，为[]或 null 表示不加限制
 *
 * 该接口会产生以下影响：
 *    1. ERASER 工具只能擦除 users 参数列出的用户绘制的涂鸦，无法擦除其他人绘制的涂鸦
 *    2. POINTSELECT、SELECT 工具只能选中 users 参数列出的用户绘制的涂鸦，无法选中其他人绘制的涂鸦
 *    3. clear 接口只能用于清空选中涂鸦以及 users 参数列出的用户绘制的涂鸦，无法清空背景及其他人绘制的涂鸦
 *    4. 白板包含的其他功能未在本列表明确列出者都可以确定不受本接口影响
 */


TEduBoard.prototype.setAccessibleUsers = function (users) {
  this.board.setAccessibleUsers(users);
};
/**
 * @memberof TEduBoard
 * @fn void setGlobalBackgroundColor(Color color)
 * @brief 设置所有白板的背景色
 * @param color 			【必填】要设置的全局背景色
 *
 * 调用该接口将导致所有白板的背景色发生改变
 * 新创建白板的默认背景色取全局背景色
 */


TEduBoard.prototype.setGlobalBackgroundColor = function (color) {
  this.board.setGlobalBackgroundColor(color);
};
/**
 * @memberof TEduBoard
 * @fn Color getGlobalBackgroundColor()
 * @brief 获取白板全局背景色
 * @return 全局背景色
 */


TEduBoard.prototype.getGlobalBackgroundColor = function () {
  return this.board.getGlobalBackgroundColor();
};
/**
 * @memberof TEduBoard
 * @fn void setBackgroundColor(Color color)
 * @brief 设置当前白板页的背景色
 * @param color 			【必填】要设置的背景色
 *
 * 白板页创建以后的默认背景色由 SetDefaultBackgroundColor 接口设定
 */


TEduBoard.prototype.setBackgroundColor = function (color) {
  this.board.setBackgroundColor(color);
};
/**
 * @memberof TEduBoard
 * @fn Color getBackgroundColor()
 * @brief 获取当前白板页的背景色
 * @return 当前白板页的背景色
 */


TEduBoard.prototype.getBackgroundColor = function () {
  return this.board.getBackgroundColor();
};
/**
 * @memberof TEduBoard
 * @fn void setToolType(TEduBoardToolType type)
 * @brief 设置要使用的白板工具
 * @param type 				【必填】要设置的白板工具
 */


TEduBoard.prototype.setToolType = function (type) {
  this.board.setType(type);
};
/**
 * @memberof TEduBoard
 * @fn TEduBoardToolType getToolType()
 * @brief 获取正在使用的白板工具
 * @return 正在使用的白板工具
 */


TEduBoard.prototype.getToolType = function () {
  return this.board.getToolType();
};
/**
 * @memberof TEduBoard
 * @fn void setCursorIcon(TEduBoardToolType toolType, TEduBoardCursorIcon cursorIcon)
 * @brief 自定义白板工具鼠标样式
 * @param toolType          【必填】要设置鼠标样式的白板工具类型
 * @param cursorIcon        【必填】要设置的鼠标样式
 */


TEduBoard.prototype.setCursorIcon = function (toolType, cursorIcon) {
  this.board.setCursorIcon(toolType, cursorIcon);
};
/**
 * @memberof TEduBoard
 * @fn void setBrushColor(Color color)
 * @brief 设置画笔颜色
 * @param color 			【必填】要设置的画笔颜色
 *
 * 画笔颜色用于所有涂鸦绘制
 */


TEduBoard.prototype.setBrushColor = function (color) {
  this.board.setColor(color);
};
/**
 * @memberof TEduBoard
 * @fn Color getBrushColor()
 * @brief 获取画笔颜色
 * @return 画笔颜色
 */


TEduBoard.prototype.getBrushColor = function () {
  return this.board.getBrushColor();
};
/**
 * @memberof TEduBoard
 * @fn void setBrushThin(Number thin)
 * @brief 设置画笔粗细
 * @param thin 				【必填】要设置的画笔粗细
 *
 * 画笔粗细用于所有涂鸦绘制，实际像素值取值(thin * 白板的高度 / 10000)px，如果结果小于1px，则涂鸦的线条会比较虚
 */


TEduBoard.prototype.setBrushThin = function (thin) {
  this.board.setThin(thin);
};
/**
 * @memberof TEduBoard
 * @fn Number getBrushThin()
 * @brief 获取画笔粗细
 * @return 画笔粗细
 */


TEduBoard.prototype.getBrushThin = function () {
  return this.board.getBrushThin();
};
/**
 * @memberof TEduBoard
 * @fn void setTextColor(Color color)
 * @brief 设置文本颜色
 * @param color 			【必填】要设置的文本颜色
 */


TEduBoard.prototype.setTextColor = function (color) {
  this.board.setTextColor(color);
};
/**
 * @memberof TEduBoard
 * @fn Color getTextColor()
 * @brief 获取文本颜色
 * @return 文本颜色
 */


TEduBoard.prototype.getTextColor = function () {
  return this.board.getTextColor();
};
/**
 * @memberof TEduBoard
 * @fn void setTextSize(Number size)
 * @brief 设置文本大小
 * @param size 				【必填】要设置的文本大小
 *
 * 实际像素值取值(size * 白板的高度 / 10000)px
 */


TEduBoard.prototype.setTextSize = function (size) {
  this.board.setTextSize(size);
};
/**
 * @memberof TEduBoard
 * @fn Number getTextSize()
 * @brief 获取文本大小
 * @return 文本大小
 */


TEduBoard.prototype.getTextSize = function () {
  return this.board.getTextSize();
};
/**
 * @memberof TEduBoard
 * @fn void setTextStyle(TEduBoardTextStyle style)
 * @brief 设置文本样式
 * @param style 			【必填】要设置的文本样式
 */


TEduBoard.prototype.setTextStyle = function (style) {
  this.board.setTextFontStyle(style);
};
/**
 * @memberof TEduBoard
 * @fn TEduBoardTextStyle getTextStyle()
 * @brief 获取文本样式
 * @return 文本样式
 */


TEduBoard.prototype.getTextStyle = function () {
  return this.board.getTextFontStyle();
};
/**
 * @memberof TEduBoard
 * @fn void setLineStyle(TEduBoardLineStyle style)
 * @brief 设置直线样式
 * @param style 			【必填】要设置的直线样式
 */


TEduBoard.prototype.setLineStyle = function (style) {
  this.board.setLineStyle(style);
};
/**
 * @memberof TEduBoard
 * @fn TEduBoardLineStyle getLineStyle()
 * @brief 获取直线样式
 * @return 直线样式
 */


TEduBoard.prototype.getLineStyle = function () {
  return this.board.getLineStyle();
};
/**
 * @memberof TEduBoard
 * @fn void setOvalDrawMode(TEduBoardOvalDrawMode drawMode)
 * @brief 设置椭圆绘制模式
 * @param drawMode 			【必填】要设置的椭圆绘制模式
 */


TEduBoard.prototype.setOvalDrawMode = function (drawMode) {
  this.board.setOvalDrawMode(drawMode);
};
/**
 * @memberof TEduBoard
 * @fn TEduBoardOvalDrawMode getOvalDrawMode()
 * @brief 获取椭圆绘制模式
 * @return 椭圆绘制模式
 */


TEduBoard.prototype.getOvalDrawMode = function () {
  return this.board.getOvalDrawMode();
};
/**
 * @memberof TEduBoard
 * @fn void clear(Boolean clearBackground, Boolean clearSelectedOnly)
 * @brief 清空当前白板页涂鸦
 * @param clearBackground 	【可选】是否同时清空背景色以及背景图片
 * @param clearSelectedOnly 【可选】是否只清除选中部分涂鸦
 * @warning 目前不支持清除选中部分的同时清除背景
 */


TEduBoard.prototype.clear = function (clearBackground, clearSelectedOnly) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'clear invalid while load history');
    return;
  }

  this.board.clear(clearBackground, clearSelectedOnly);
};
/**
 * @memberof TEduBoard
 * @fn void setBackgroundImage(String url, TEduBoardImageFitMode mode)
 * @brief 设置当前白板页的背景图片
 * @param url 				【必填】要设置的背景图片URL，编码格式为 UTF8
 * @param mode				【可选】要使用的图片填充对齐模式
 *
 * 除了设置一个在线图片为背景外，您也可以选择上传一个本地图片作为背景，此时 url 参数可以传一个 Object 类型，格式如下：
 * @code{.js}
 * {
 *    data: document.getElementById('uploadFile').files[0], //取自 input 标签的 fileObject 对象
 *    userData: 'xxx' //透传数据，会在文件上传进度回调中带回
 * }
 * @endcode
 */


TEduBoard.prototype.setBackgroundImage = function (url, mode) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'setBackgroundImage invalid while load history');
    return;
  }

  this.board._setBackgroundImage(url, mode);
};
/**
 * @memberof TEduBoard
 * @fn void setBackgroundH5(String url)
 * @brief 设置当前白板页的背景 H5 页面
 * @param url				【必填】要设置的背景 H5 页面 URL
 *
 * 该接口与 SetBackgroundImage 接口互斥
 */


TEduBoard.prototype.setBackgroundH5 = function (url) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'setBackgroundH5 invalid while load history');
    return;
  }

  this.board.setBackgroundH5(url);
};
/**
 * @memberof TEduBoard
 * @fn void undo()
 * @brief 撤销当前白板页上一次动作
 */


TEduBoard.prototype.undo = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'undo invalid while load history');
    return;
  }

  this.board.undo();
};
/**
 * @memberof TEduBoard
 * @fn void redo()
 * @brief 重做当前白板页上一次撤销
 */


TEduBoard.prototype.redo = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'redo invalid while load history');
    return;
  }

  this.board.redo();
};
/**
 * @memberof TEduBoard
 * @fn void resize()
 * @brief 重新计算白板大小，并渲染
 */


TEduBoard.prototype.resize = function () {
  this.board.resize();
}; /// @}
/// @name 白板页操作接口
/// @{

/**
 * @memberof TEduBoard
 * @fn String addBoard(String url, TEduBoardImageFitMode mode)
 * @brief 增加一页白板
 * @param url				【可选】要使用的背景图片 URL，为 null 表示不指定背景图片
 * @param mode				【可选】要使用的图片填充对齐模式
 * @return 白板 ID
 * @warning 白板页会被添加到默认文件（文件 ID 为#DEFAULT)，自行上传的文件无法添加白板页
 */


TEduBoard.prototype.addBoard = function (url, mode) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'addBoard invalid while load history');
    return;
  }

  var newBoardId = this.board.addBoard();
  this.board.setBackgroundPic(newBoardId, url, mode);
  return newBoardId;
};
/**
 * @memberof TEduBoard
 * @fn void deleteBoard(String boardId)
 * @brief 删除一页白板
 * @param boardId			【可选】要删除的白板 ID，为 null 表示删除当前页
 * @warning 只允许删除默认文件（文件 ID 为#DEFAULT）内的白板页，且默认白板页（白板 ID 为#DEFAULT）无法删除
 */


TEduBoard.prototype.deleteBoard = function (boardId) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'deleteBoard invalid while load history');
    return;
  }

  this.board.deleteBoard(boardId);
};
/**
 * @memberof TEduBoard
 * @fn void prevStep()
 * @brief 上一步
 *  每个 Step 对应 PPT 的一个动画效果，若当前没有已展示的动画效果，则该接口调用会导致向前翻页
 */


TEduBoard.prototype.prevStep = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'prevStep invalid while load history');
    return;
  }

  this.board.prevStep();
};
/**
 * @memberof TEduBoard
 * @fn void nextStep()
 * @brief 下一步
 *
 * 每个 Step 对应 PPT 的一个动画效果，若当前没有未展示的动画效果，则该接口调用会导致向后翻页
 */


TEduBoard.prototype.nextStep = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'nextStep invalid while load history');
    return;
  }

  this.board.nextStep();
};
/**
 * @memberof TEduBoard
 * @fn void prevBoard(Boolean resetStep)
 * @brief 向前翻页
 * @param resetStep			【可选】指定翻到指定页以后是否重置 PPT 动画步数
 *
 * 若当前白板页为当前文件的第一页，则该接口调用无效
 */


TEduBoard.prototype.prevBoard = function (resetStep) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'prevBoard invalid while load history');
    return;
  }

  this.board.prevBoard(resetStep);
};
/**
 * @memberof TEduBoard
 * @fn void nextBoard(Boolean resetStep)
 * @brief 向后翻页
 * @param resetStep			【可选】指定翻到指定页以后是否重置 PPT 动画步数
 *
 * 若当前白板页为当前文件的最后一页，则该接口调用无效
 */


TEduBoard.prototype.nextBoard = function (resetStep) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'nextBoard invalid while load history');
    return;
  }

  this.board.nextBoard(resetStep);
};
/**
 * @memberof TEduBoard
 * @fn void gotoBoard(String boardId, Boolean resetStep)
 * @brief 跳转到指定白板页
 * @param boardId			【必填】要跳转到的白板页 ID
 * @param resetStep			【可选】指定翻到指定页以后是否重置 PPT 动画步数
 *
 * 允许跳转到任意文件的白板页
 */


TEduBoard.prototype.gotoBoard = function (boardId, resetStep) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'gotoBoard invalid while load history');
    return;
  }

  if (boardId) {
    this.board.switchBoard(boardId, resetStep);
  }
};
/**
 * @memberof TEduBoard
 * @fn String getCurrentBoard()
 * @brief 获取当前白板页 ID
 * @return 当前白板页 ID
 */


TEduBoard.prototype.getCurrentBoard = function () {
  return this.board.getCurrentBoard();
};
/**
 * @memberof TEduBoard
 * @fn Array getBoardList()
 * @brief 获取所有文件的白板列表
 * @return 所有文件的白板列表
 */


TEduBoard.prototype.getBoardList = function () {
  return this.board.getBoardList();
};
/**
 * @memberof TEduBoard
 * @fn void setBoardRatio(String ratio)
 * @brief 设置当前白板页宽高比
 * @param ratio				【必填】要设置的白板宽高比
 *
 * 格式如: "4:3"、"16:9"
 */


TEduBoard.prototype.setBoardRatio = function (ratio) {
  this.board.setBoardRatio(ratio);
};
/**
 * @memberof TEduBoard
 * @fn String getBoardRatio()
 * @brief 获取当前白板页宽高比
 * @return 白板宽高比，格式与 SetBoardRatio 接口参数格式一致
 */


TEduBoard.prototype.getBoardRatio = function () {
  return this.board.getBoardRatio();
};
/**
 * @memberof TEduBoard
 * @fn void setBoardScale(Number scale)
 * @brief 设置当前白板页缩放比例
 * @param scale				【必填】要设置的白板缩放比例
 *
 * 支持范围: [100，300]，实际缩放比为: scale/100
 */


TEduBoard.prototype.setBoardScale = function (scale) {
  this.board.setBoardScale(scale);
};
/**
 * @memberof TEduBoard
 * @fn Number getBoardScale()
 * @brief 获取当前白板页缩放比例
 * @return 白板缩放比例，格式与 SetBoardScale 接口参数格式一致
 */


TEduBoard.prototype.getBoardScale = function () {
  return this.board.getBoardScale();
};
/**
 * @memberof TEduBoard
 * @fn void setBoardContentFitMode(TEduBoardContentFitMode mode)
 * @brief 设置白板内容自适应模式
 * @param mode				【必填】要设置的白板内容自适应模式
 *
 * 设置自适应模式后会影响所有后续白板内容操作,受影响接口包括：AddTranscodeFile
 */


TEduBoard.prototype.setBoardContentFitMode = function (mode) {
  this.board.setBoardContentFitMode(mode);
};
/**
 * @memberof TEduBoard
 * @fn TEduBoardContentFitMode getBoardContentFitMode()
 * @brief 获取白板内容自适应模式
 * @return 白板内容自适应模式
 */


TEduBoard.prototype.getBoardContentFitMode = function () {
  return this.board.getBoardContentFitMode();
}; /// @}
/// @name 文件操作接口
/// @{

/**
 * @memberof TEduBoard
 * @fn void applyFileTranscode(Object fileObj, TEduBoardTranscodeConfig config)
 * @brief 发起文件转码请求
 * @param fileObj			【必填】请求转码的文件对象，详细格式见下方介绍
 * @param config            【必填】转码参数
 * @warning 本接口设计用于在接入阶段快速体验转码功能，原则上不建议在生产环境中使用，生产环境中的转码请求建议使用后台服务接口发起
 *
 * fileObj参数格式如下：
 * @code {.js}
 * {
 *    data: document.getElementById('uploadFile').files[0], //取自 input 标签的 fileObject 对象
 *    userData: 'xxx' //透传数据，会在文件转码进度回调中带回
 * }
 * @endcode
 * - 本接口支持支持 PPT、PDF、Word 文件转码
 * - PPT 文档默认转为 H5 动画，能够还原 PPT 原有动画效果，其它文档转码为静态图片
 * - PPT 动画转码耗时约1秒/页，所有文档的静态转码耗时约0.5秒/页
 * - 转码进度和结果将会通过 onTEBFileTranscodeProgress 回调返回，详情参见该回调说明文档
 */


TEduBoard.prototype.applyFileTranscode = function (fileObj, config) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'applyFileTranscode invalid while load history');
    return;
  }

  this.board.applyFileTranscode(fileObj, config);
};
/**
 * @memberof TEduBoard
 * @fn void getFileTranscodeProgress(Object data)
 * @brief 主动查询文件转码进度
 * @param data              【必填】文件信息，格式见下方介绍
 * @warning 该接口仅用于特殊业务场景下主动查询文件转码进度，调用 applyFileTranscode 后，SDK 内部将会自动定期触发 TEB_TRANSCODEPROGRESS 回调，正常情况下您不需要主动调用此接口
 *
 * data 参数格式如下：
 * @code {.js}
 * {
 *     taskId: "xxxxx" //从 TEB_TRANSCODEPROGRESS 回调拿到的 taskId
 * }
 * @endcode
 * 转码进度和结果将会通过 onTEBFileTranscodeProgress 回调返回，详情参见该回调说明文档
 */


TEduBoard.prototype.getFileTranscodeProgress = function (data) {
  this.board.describeTranscode(data);
};
/**
 * @memberof TEduBoard
 * @fn String addTranscodeFile(TEduBoardTranscodeFileResult result, bool needSwitch)
 * @brief 添加转码文件
 * @param  result             文件转码结果
 * @param  needSwitch Boolean	添加转码文件，是否需要立刻跳转到该文件，默认为 true
 * @return 文件 ID
 * @warning 当传入文件的 URL 重复时，返回该 URL 对应的文件 ID
 * @warning 在收到对应的 TEB_TRANSCODEPROGRESS 回调前，无法用返回的文件 ID 查询到文件信息
 *
 * TEduBoardTranscodeFileResult 的字段信息主要来自：
 * 1. 使用客户端 ApplyFileTranscode 转码，直接将转码结果用于调用此接口
 * 2. 使用服务端 REST API 转码，只需传入转码回调结果的四个字段，其服务端->客户端字段的对应关系为 Title->title、Resolution->resolution、ResultUrl->url、Pages->pages 字段 [转码文档](https://cloud.tencent.com/document/product/1137/40260)
 *
 * 调用该接口后，SDK 会在后台进行文件加载，期间用户可正常进行其它操作，加载成功或失败后会触发相应回调
 * 文件加载成功后，将自动切换到该文件
 */


TEduBoard.prototype.addTranscodeFile = function (result) {
  var needSwitch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'addTranscodeFile invalid while load history');
    return;
  }

  return this.board.addTranscodeFile(result, needSwitch);
};
/**
 * @memberof TEduBoard
 * @fn String addImagesFile(Array urls, bool needSwitch)
 * @brief 批量导入图片到白板
 * @param  urls               要使用的背景图片URL列表，编码格式为 UTF8
 * @param  needSwitch Boolean	添加转码文件，是否需要立刻跳转到该文件，默认为 true
 * @return 新增加文件 Id
 * @warning 当传入文件的 URL 重复时，返回该 URL 对应的文件 ID
 */


TEduBoard.prototype.addImagesFile = function (urls) {
  var needSwitch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!Array.isArray(urls)) {
    console.error('addImagesFile: urls is not array.');
    return '';
  }

  if (urls.length == 0) {
    console.error('addImagesFile: urls is emplty.');
    return '';
  } // 如果历史数据还没有加载完成，则不允许操作


  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'addImagesFile invalid while load history');
    return '';
  }

  return this.board.addImagesFile(urls, null, needSwitch);
};
/**
 * @memberof TEduBoard
 * @fn void deleteFile(String fileId)
 * @brief 删除文件
 * @param fileId			【可选】要删除的文件 ID
 * @note 文件 ID 为 null 时表示当前文件，默认文件无法删除
 */


TEduBoard.prototype.deleteFile = function (fileId) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'deleteFile invalid while load history');
    return;
  }

  this.board.deleteFile(fileId);
};
/**
 * @memberof TEduBoard
 * @fn void switchFile(String fileId, String boardId, Number stepIndex)
 * @brief 切换文件
 * @param fileId			【必填】要切换到的文件 ID
 * @param boardId           【可选】切换文件并跳转到这个白板页
 * @param stepIndex         【可选】跳转到白板页并切换到这个动画
 * @warning 该接口仅可用于文件切换，如果传入的 fileId 为当前文件 ID，SDK 会忽略其它参数，不做任何操作
 * @note 文件 ID 为必填项，为 null 或空字符串将导致文件切换失败
 */


TEduBoard.prototype.switchFile = function (fileId, boardId, stepIndex) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'switchFile invalid while load history');
    return;
  }

  this.board.switchFile(fileId, boardId, stepIndex);
};
/**
 * @memberof TEduBoard
 * @fn String getCurrentFile()
 * @brief 获取当前文件 ID
 * @return 当前文件 ID
 */


TEduBoard.prototype.getCurrentFile = function () {
  return this.board.getCurrentFile();
};
/**
 * @memberof TEduBoard
 * @fn TEduBoardFileInfo getFileInfo(String fileId)
 * @brief 获取白板中指定文件的文件信息
 * @param fileId			【必填】要获取信息的文件 ID
 * @return 文件信息
 */


TEduBoard.prototype.getFileInfo = function (fileId) {
  var fileInfo = this.board.getFileInfo(fileId);
  return Object.assign({}, fileInfo, {
    boardInfoList: this.board.getBoardInfoList(fileId)
  });
};
/**
 * @memberof TEduBoard
 * @fn Array getFileInfoList()
 * @brief 获取白板中上传的所有文件的文件信息列表
 * @return 文件信息列表
 */


TEduBoard.prototype.getFileInfoList = function () {
  return this.board.getFileInfoList();
};
/**
 * @memberof TEduBoard
 * @fn Array getFileBoardList(String fileId)
 * @brief 获取指定文件的白板 ID 列表
 * @param fileId			【必填】文件 ID
 * @return 白板 ID 列表
 */


TEduBoard.prototype.getFileBoardList = function (fileId) {
  return this.board.getBoardByGroup(fileId);
};
/**
 * @memberof TEduBoard
 * @fn Array getThumbnailImages(String fileId)
 * @brief 获取指定文件的缩略图，不支持默认文件（fileId=#DEFAULT）
 * @param fileId        	【必填】文件 ID
 * @return 缩略图URL列表
 * @note 用户在调用 rest api 请求转码时，需要带上 "thumbnail_resolution" 参数，开启缩略图功能，否则返回的缩略图 url 无效
 */


TEduBoard.prototype.getThumbnailImages = function (fileId) {
  return this.board.getThumbnailImages(fileId);
};
/**
 * @memberof TEduBoard
 * @fn void clearFileDraws(String fileId)
 * @brief 清空指定文件的所有白板涂鸦
 * @param fileId			【必填】文件 ID
 */


TEduBoard.prototype.clearFileDraws = function (fileId) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'clearFileDraws invalid while load history');
    return;
  }

  this.board.clearFileDraws(fileId);
};
/**
 * @memberof TEduBoard
 * @fn boolean hasVideoPermission()
 * @brief 是否授权视频文件播放
 * @warning 手机端如果要播放视频文件必须在初始化白板前引导用户点击授权，否则无法播放。
 * @returns 是否授权
 */


TEduBoard.hasVideoPermission = function () {
  return _board_Board__WEBPACK_IMPORTED_MODULE_6__["default"].hasVideoPermission();
};
/**
 * @memberof TEduBoard
 * @fn String applyVideoPermission()
 * @brief 授权视频文件播放
 * @warning 手机端h5如果要播放视频文件必须在初始化白板前引导用户点击授权，否则无法播放。
 */


TEduBoard.applyVideoPermission = function (count) {
  _board_Board__WEBPACK_IMPORTED_MODULE_6__["default"].applyVideoPermission(count, this.elkLog);
};
/**
 * @memberof TEduBoard
 * @fn String addVideoFile(String url)
 * @brief 添加视频文件
 * @note 支持 mp4/m3u8/hls；触发状态改变回调 TEB_VIDEO_STATUS_CHANGED
 * @param url			【必填】文件地址
 * @warning 当传入文件的 URL 重复时，返回该 URL 对应的文件 ID
 * @warning 需要引入以下 js 文件
 * @code{.html}
 * <script src="https://res.qcloudtiw.com/board/third/videojs/1.0.0/video.min.js"></script>
 * <link href="https://res.qcloudtiw.com/board/third/videojs/1.0.0/video-js.min.css" rel="stylesheet">
 * @endcode
 * @return 文件 ID
 */


TEduBoard.prototype.addVideoFile = function (url) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'addVideoFile invalid while load history');
    return '';
  }

  return this.board.addVideoFile(url);
};
/**
 * @memberof TEduBoard
 * @fn String addVODFile(String appId, String vodId, String extParam)
 * @brief 添加视频文件（内部接口）
 * @note 仅支持腾讯云点播系统文件
 * @param appId			点播应用ID
 * @param vodId			点播文件ID
 * @param extParam	点播视频额外参数，如 plugins、hlsConfig 等，具体请参考 https://cloud.tencent.com/document/product/266/14603
 * @warning 需要引入以下 css 或 js 文件
 * @code{.html}
 * <link href="https://imgcache.qq.com/open/qcloud/video/tcplayer/tcplayer.min.css" rel="stylesheet">
 * <script src="https://imgcache.qq.com/open/qcloud/video/tcplayer/libs/hls.min.0.12.4.js"></script>
 * <script src="https://imgcache.qq.com/open/qcloud/video/tcplayer/tcplayer.min.js"></script>
 * @endcode
 * @return 白板文件 ID
 */


TEduBoard.prototype.addVODFile = function (appId, vodId) {
  var extParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'addVODFile invalid while load history');
    return '';
  }

  return this.board.addVODFile(appId, vodId, extParam);
};
/**
 * @memberof TEduBoard
 * @fn String setVODExtParam(String fileId, Object extParam)
 * @brief 设置点播视频的额外参数，如 plugins、hlsConfig 等，具体请参考 https://cloud.tencent.com/document/product/266/14603
 * @warning 在收到 TEB_VODEXTPARAM 回调后调用
 * @param fileId		白板文件 ID
 * @param extParam	点播视频额外参数
 */


TEduBoard.prototype.setVODExtParam = function (fileId, extParam) {
  this.board.setVODExtParam(fileId, extParam);
};
/**
 * @memberof TEduBoard
 * @fn void showVideoControl(bool show)
 * @brief 隐藏和显示默认视频控制栏
 * @param show 是否显示
 * @warning 全局控制项，对所有视频文件有效
 * @info 隐藏和显示默认视频控制栏，默认显示系统自带的 video 控制栏，不同平台界面 UI 样式不同
 */


TEduBoard.prototype.showVideoControl = function (show) {
  this.board.showVideoControl(show);
};
/**
 * @memberof TEduBoard
 * @fn void playVideo()
 * @brief 播放
 * @warning 只对当前文件有效
 * @info 触发状态改变回调 TEB_VIDEO_STATUS_CHANGED，一般情况在使用自定义视频控制栏时使用
 */


TEduBoard.prototype.playVideo = function () {
  this.board.playVideo();
};
/**
 * @memberof TEduBoard
 * @fn void pauseVideo()
 * @brief 暂停
 * @warning 只对当前文件有效
 * @info 触发状态改变回调 TEB_VIDEO_STATUS_CHANGED，一般情况在使用自定义视频控制栏时使用
 */


TEduBoard.prototype.pauseVideo = function () {
  this.board.pauseVideo();
};
/**
 * @memberof TEduBoard
 * @fn void seekVideo(float time)
 * @brief 跳转（仅支持点播视频）
 * @param time 播放进度，单位秒
 * @warning 只对当前文件有效
 * @info 触发状态改变回调 TEB_VIDEO_STATUS_CHANGED，一般情况在使用自定义视频控制栏时使用
 */


TEduBoard.prototype.seekVideo = function (time) {
  this.board.seekVideo(time);
};
/**
 * @memberof TEduBoard
 * @fn void muteVideo(boolean muted)
 * @brief 静音
 * @param muted 是否静音
 * @warning 只对当前文件有效，静音不会影响远端
 * @info 由于用户隐私政策限制，微信浏览器以及手机浏览器默认静音播放
 */


TEduBoard.prototype.muteVideo = function (muted) {
  this.board.muteVideo(muted);
};
/**
 * @memberof TEduBoard
 * @fn void setSyncVideoStatusEnable(bool enable)
 * @brief 是否同步本地视频操作状态到远端
 * @note videoPlay/videoPause/videoSeek 接口以及控制栏事件触发是否影响远端，默认为 true
 * @warning 全局控制项，对所有视频文件有效
 * @param enable			【必填】是否同步
 */


TEduBoard.prototype.setSyncVideoStatusEnable = function (enable) {
  this.board.setSyncVideoStatusEnable(enable);
};
/**
 * @memberof TEduBoard
 * @fn void startSyncVideoStatus(int interval)
 * @brief 内部启动定时器，定时同步视频状态到远端（仅限于 mp4）
 * @note 一般在老师端视频加载完成后调用，切换文件后自动销毁定时器，
 * @warning 只对当前文件有效
 * @param interval			【选填】同步间隔
 */


TEduBoard.prototype.startSyncVideoStatus = function () {
  var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config_Config__WEBPACK_IMPORTED_MODULE_1__["default"].SYNC_VIDEO_STATUS_INTERVAL;
  this.board.startSyncVideoStatus(interval);
};
/**
 * @memberof TEduBoard
 * @fn void stopSyncVideoStatus()
 * @warning 只对当前文件有效
 * @brief 停止同步视频状态
 */


TEduBoard.prototype.stopSyncVideoStatus = function () {
  this.board.stopSyncVideoStatus();
};
/**
 * @memberof TEduBoard
 * @fn String addH5File(String url)
 * @brief 添加 H5 页面
 * @warning 只支持展示，不支持互动
 * @param url			【必填】网页地址
 * @return 文件 ID
 */


TEduBoard.prototype.addH5File = function (url) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'addH5File invalid while load history');
    return '';
  }

  return this.board.addH5File(url);
};
/**
 * @memberof TEduBoard
 * @fn void addImageElement(String url)
 * @brief 添加图片元素
 * @param url 【必填】要设置的图片元素 URL，编码格式为 UTF8
 * 
 * 除了设置一个在线图片为图片元素外，您也可以选择上传一个本地图片作为图片元素，此时 url 参数可以传一个 Object 类型，格式如下：
 * @code{.js}
 * {
 *    data: document.getElementById('uploadFile').files[0], //取自 input 标签的 fileObject 对象
 *    userData: 'xxx' //透传数据，会在文件上传进度回调中带回
 * }
 * @endcode
 */


TEduBoard.prototype.addImageElement = function (url) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'setBackgroundImage invalid while load history');
    return;
  }

  this.board.addImageElement(url);
};
/**
 * @memberof TEduBoard
 * @fn void setHandwritingEnable(Boolean enable)
 * @brief 设置白板是否开启笔锋
 * @param enable 			【必填】是否开启，true 表示开启，false 表示关闭
 *
 * 白板创建后默认为关闭
 */


TEduBoard.prototype.setHandwritingEnable = function (enable) {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'enableHandwriting invalid while load history');
    return '';
  }

  return this.board.setHandwritingEnable(enable);
};
/**
 * @memberof TEduBoard
 * @fn Boolean isHandwritingEnable()
 * @brief 获取白板是否开启笔锋
 * @return 是否开启笔锋
 */


TEduBoard.prototype.isHandwritingEnable = function () {
  return this.board.isHandwritingEnable();
};
/**
 * @memberof TEduBoard
 * @fn void addElement(Object params)
 * @brief 添加白板元素
 * @param params 【必填】要添加的元素类型和响应的参数
 * @return 元素ID
 * @code{.js}
 * teduBoard.addElement({
 *   type: TEduBoard.TEduBoardElementType.TEDU_BOARD_ELEMENT_H5,
 *   url: 'https://www.qq.com',
 *   userData: 'tiw' //透传数据，会在ADDELEMENT事件回调中带回
 * })
 * 
 *  // 监听增加元素事件
 *  teduBoard.on(TEduBoard.EVENT.TEB_ADDELEMENT, ({id, userData}) => {
 *    console.log('id:', id, ' userData:', userData);
 *  });
 * @endcode
 */


TEduBoard.prototype.addElement = function (params) {
  return this.board.addElement(params);
};
/**
 * @memberof TEduBoard
 * @fn void removeElement()
 * @brief 删除白板元素
 * @return 删除是否成功
 */


TEduBoard.prototype.removeElement = function (id) {
  return this.board.removeElement(id);
};
/**
 * @memberof TEduBoard
 * @fn void refresh()
 * @brief 刷新当前页白板，触发 TEB_REFRESH 回调
 * @warning 如果当前白板包含 PPT/H5/图片/视频时，刷新白板将会触发对应的回调
 */


TEduBoard.prototype.refresh = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'refresh invalid while load history');
    return;
  }

  this.board.refresh();
};
/**
 * @memberof TEduBoard
 * @fn void addAckData(Object data)
 * @param data TEB_SYNCDATA 回调的数据
 * @brief 确认数据是否发送成功
 */


TEduBoard.prototype.addAckData = function (data) {
  this.board.addAckData(data);
};
/**
 * @memberof TEduBoard
 * @fn Boolean syncAndReload()
 * @brief 同步本地发送失败的数据到远端并刷新本地数据
 * 
 * 接口用途：此接口主要用于网络恢复后，同步本地数据到远端，拉取远端数据到本地
 * 调用时机：在网络恢复后调用
 * 使用限制：
 * （1）仅支持2.4.9及以上版本
 * （2）如果历史数据还没有加载完成，则不允许重复调用，否则回调告警 TEDU_BOARD_WARNING_ILLEGAL_OPERATION
 * （3）此接口需要配合 addAckData 一起使用，在白板数据发送成功后，请调用 addAckData 接口完成确认
 * @warning reload等同于重新加载历史数据，会触发白板初始化时除onTEBInit之外的所有回调。
 */


TEduBoard.prototype.syncAndReload = function () {
  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'syncAndReload invalid while load history');
    return;
  }

  this.historySyncDone = false;
  this.board.syncAndReload();
};
/**
 * @memberof TEduBoard
 * @fn void snapshot(TEduBoardSnapshotInfo param)
 * @brief 白板快照
 * @param param 快照参数
 * @code{.js}
 * {
 *    //接口调用--userData透传数据，会在 TEB_SNAPSHOT 事件回调中带回
 *    teduBoard.snapshot({userData: '/snapshot/snapshot.png'});
 *    //监听事件--image 为 base64格式图片， userdata为透传字段
 *    teduBoard.on(TEduBoard.EVENT.TEB_SNAPSHOT, ({image, userData}) => {});
 * }
 * @endcode
 */


TEduBoard.prototype.snapshot = function () {
  var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  // 如果历史数据还没有加载完成，则不允许操作
  if (!this.historySyncDone) {
    this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_11__["default"].TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'snapshot invalid while load history');
    return;
  }

  this.board.snapshot(param);
};

TEduBoard.prototype.setFileScale = function (fid, scale) {
  this.board.setFileScale(fid, scale);
};

TEduBoard.prototype.getFileScale = function (fid) {
  return this.board.getFileScale(fid);
}; /// @}

/**
 * @memberof TEduBoard
 * @ingroup ctrl
 * @class TEduBoard
 * @brief 白板控制器
 */


/* harmony default export */ __webpack_exports__["default"] = (TEduBoard);

/***/ }),

/***/ "./src/board/Aegis.js":
/*!****************************!*\
  !*** ./src/board/Aegis.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _tencent_aegis_web_sdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tencent/aegis-web-sdk */ "./node_modules/@tencent/aegis-web-sdk/lib/aegis.min.js");
/* harmony import */ var _tencent_aegis_web_sdk__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_tencent_aegis_web_sdk__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");





function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




/**
 * aegis 日志服务模块，支持离线拉取日志，小程序有请求的限频，比较适用于小程序场景
 */

var AegisWeb =
/*#__PURE__*/
function () {
  function AegisWeb() {
    _classCallCheck(this, AegisWeb);

    this.platform = 'web';
    this.aegis = new _tencent_aegis_web_sdk__WEBPACK_IMPORTED_MODULE_4___default.a({
      id: 1922,
      // 项目ID 2090 互动白板-测试  1922	互动白板
      version: _config_Config__WEBPACK_IMPORTED_MODULE_5__["default"].REPORT_VERSION,
      listenOnerror: true,
      offlineLogExp: 7,
      offlineLog: true,
      beforeReport: function beforeReport(log) {
        var offlineLogReportLevel = ["2048"];

        if (offlineLogReportLevel.indexOf(String(log.level)) > -1) {
          try {
            var msg = JSON.parse(log.msg);

            if (!_util_util__WEBPACK_IMPORTED_MODULE_6__["default"].isUndefined(msg.errorCode) && msg.errorCode != 0) {
              // 如果是上报错误的日志
              return true;
            } else {
              return false; // 普通日志，不实时报
            }
          } catch (error) {
            if (log.msg.indexOf('edu.xueyafz.cn') > -1) {
              return false; // 屏蔽这个白嫖公司的错误上报
            } else if (log.msg.indexOf('Error.stack') > -1 && log.msg.indexOf('Error.message') > -1) {
              // 如果是error日志， 比如 Vue把error catch了，导致不能上报，需要在vue的errorHandlder主动将error通过report上报上来
              return true;
            } else if (log.msg.indexOf('errorMessage') > -1) {
              return true;
            } else {
              return false; // 普通日志，不实时报
            }
          }
        } else {
          return true;
        }
      }
    });
  }

  _createClass(AegisWeb, [{
    key: "setConfig",
    value: function setConfig(config) {
      this.aegis.setConfig(config);
    }
  }, {
    key: "report",
    value: function report(action) {
      var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      msg = Object.assign(msg, {
        action: action,
        platform: this.platform,
        errorCode: 0
      });

      try {
        this.aegis.report(JSON.stringify(msg));
      } catch (error) {}
    }
  }, {
    key: "reportError",
    value: function reportError(errorCode, errorMessage, action) {
      var msg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (Object.prototype.toString.call(msg) === '[object Error]') {
        try {
          this.aegis.report(msg);
        } catch (error) {}
      } else {
        msg = Object.assign(msg, {
          action: action,
          platform: this.platform,
          errorCode: errorCode,
          errorMessage: errorMessage
        });

        try {
          this.aegis.report(JSON.stringify(msg));
        } catch (error) {}
      }
    }
    /**
     * 调用aegis库的原始方法
     * @param {*} method 
     * @param {*} msg 
     */

  }, {
    key: "callAegisMethod",
    value: function callAegisMethod(method, msg) {
      this.aegis[method].call(this, msg);
    }
  }]);

  return AegisWeb;
}();

/* harmony default export */ __webpack_exports__["default"] = (AegisWeb);

/***/ }),

/***/ "./src/board/BackgroundIFrame.js":
/*!***************************************!*\
  !*** ./src/board/BackgroundIFrame.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BackgroundIFrame =
/*#__PURE__*/
function () {
  function BackgroundIFrame(src) {
    _classCallCheck(this, BackgroundIFrame);

    this.src = src;
    this.dom = null;
    this.isRepeatLoad = false; // 是否重复加载
  } // 创建iframe节点


  _createClass(BackgroundIFrame, [{
    key: "createElement",
    value: function createElement(container, url, onloadCallback) {
      var dom = this.remove(container, url);

      if (dom) {
        this.dom = dom;
        this.isRepeatLoad = true; // 重复加载 (在同一个url上进行涂鸦)
      } else {
        this.isRepeatLoad = false; // 第一次加载

        this.dom = document.createElement('iframe');
        this.dom.classList.add('tic_board_h5_bg');
        this.dom.style.display = 'none';
        this.dom.style.border = 'none';
        this.dom.style.position = 'absolute';
        this.dom.style.top = 0;
        this.dom.style.left = 0;
        this.dom.style.zIndex = 5;
        this.dom.src = url;
        this.dom.scrolling = 'no';

        this.dom.onload = function () {
          onloadCallback && onloadCallback(this.src);
        };

        container.appendChild(this.dom);
      }
    }
  }, {
    key: "render",
    value: function render(beforeRenderCallback) {
      if (!this.isRepeatLoad) {
        // 不是重复加载
        beforeRenderCallback && beforeRenderCallback();
      }

      this.dom.style.display = 'block';
    }
  }, {
    key: "layout",
    value: function layout(width, height) {
      this.dom.width = width;
      this.dom.height = height;
    }
  }, {
    key: "remove",
    value: function remove(container, url) {
      var currentIframe = null;
      var oldIFrame = container.getElementsByClassName('tic_board_h5_bg');

      for (var i = 0, len = oldIFrame.length; i < len; i++) {
        var iframe = oldIFrame[i]; // 如果有url, 且当前的页面的iframe，则不删除

        var src = iframe.getAttribute('src'); // 注意iframe.src 与 iframe.getAttribute('src')不同 https://music.qq.com  https://music.qq.com/

        if (url && (src == url || src == encodeURI(url))) {
          currentIframe = iframe;
        } else {
          iframe.remove();
        }
      }

      return currentIframe;
    }
  }]);

  return BackgroundIFrame;
}();

/* harmony default export */ __webpack_exports__["default"] = (BackgroundIFrame);

/***/ }),

/***/ "./src/board/Board.js":
/*!****************************!*\
  !*** ./src/board/Board.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");
/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.object.keys */ "./node_modules/core-js/modules/es6.object.keys.js");
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es6_array_fill__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es6.array.fill */ "./node_modules/core-js/modules/es6.array.fill.js");
/* harmony import */ var core_js_modules_es6_array_fill__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_fill__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");
/* harmony import */ var core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _Store__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Store */ "./src/board/Store.js");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _config_Constant__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../config/Constant */ "./src/config/Constant.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _H5Control__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./H5Control */ "./src/board/H5Control.js");
/* harmony import */ var _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../model/TEduBoardImageStatus */ "./src/model/TEduBoardImageStatus.js");
/* harmony import */ var _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../model/TEduBoardWarningCode */ "./src/model/TEduBoardWarningCode.js");
/* harmony import */ var _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../model/TEduBoardErrorCode */ "./src/model/TEduBoardErrorCode.js");
/* harmony import */ var _model_TEduBoardBackgroundH5Status__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../model/TEduBoardBackgroundH5Status */ "./src/model/TEduBoardBackgroundH5Status.js");
/* harmony import */ var _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../model/TEduBoardImageFitMode */ "./src/model/TEduBoardImageFitMode.js");
/* harmony import */ var _model_TEduBoardH5FileStatus__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../model/TEduBoardH5FileStatus */ "./src/model/TEduBoardH5FileStatus.js");
/* harmony import */ var _GroupTemplate__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./GroupTemplate */ "./src/board/GroupTemplate.js");
/* harmony import */ var alloyfinger__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! alloyfinger */ "./node_modules/alloyfinger/alloy_finger.js");
/* harmony import */ var alloyfinger__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(alloyfinger__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../model/TEduBoardLineType */ "./src/model/TEduBoardLineType.js");
/* harmony import */ var _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../model/TEduBoardArrowType */ "./src/model/TEduBoardArrowType.js");
/* harmony import */ var _BackgroundIFrame__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./BackgroundIFrame */ "./src/board/BackgroundIFrame.js");
/* harmony import */ var _H5IFrame__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./H5IFrame */ "./src/board/H5IFrame.js");
/* harmony import */ var _PptIFrame__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./PptIFrame */ "./src/board/PptIFrame.js");
/* harmony import */ var _CompositionEvent__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./CompositionEvent */ "./src/board/CompositionEvent.js");
/* harmony import */ var _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../model/TEduBoardVideoStatus */ "./src/model/TEduBoardVideoStatus.js");
/* harmony import */ var _model_TEduBoardCursorLayer__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../model/TEduBoardCursorLayer */ "./src/model/TEduBoardCursorLayer.js");
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./Line */ "./src/board/Line.js");
/* harmony import */ var _TextAreaComponent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./TextAreaComponent */ "./src/board/TextAreaComponent.js");
/* harmony import */ var _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../model/TEduBoardH5WebEvent */ "./src/model/TEduBoardH5WebEvent.js");
/* harmony import */ var _model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../model/TEduBoardIFrameModule */ "./src/model/TEduBoardIFrameModule.js");
/* harmony import */ var _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../model/TEduBoardElementType */ "./src/model/TEduBoardElementType.js");







































function Board(options) {
  var _this = this;

  if (!(this instanceof Board)) {
    return new Board(options);
  }

  this.option = options;
  this.event = this.option.event;
  this.aegis = this.option.aegis;
  this.elkLog = this.option.elkLog;
  this.container = document.getElementById(this.option.id);

  if (!this.container) {
    setTimeout(function () {
      _this.event.fire(_this, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_19__["default"].TEDU_BOARD_ERROR_INIT, 'not found id:' + _this.option.id + ' Node');
    }, 10);
    return;
  } // 课堂id


  this.classId = this.option.classId;
  this.pinchScale = []; // 移动端手指捏合系数集合

  this.beforePinchScale; // 捏合前的比例

  this.isMoving = false; // 是否在移动

  this.minLineWidth = options.minLineWidth || _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].MIN_LINE_WIDTH; // 涂鸦最小的像素

  this.isRenderFace = false; // 是否正在首屏渲染

  if (options.progressEnable) {
    // 启用progress
    this.progressBarUrl = options.progressBarUrl || _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].defaultLoadingImage;
  } else {
    this.progressBarUrl = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].defaultLoadingImage;
  }

  this.backgroundIFrameManager = new _BackgroundIFrame__WEBPACK_IMPORTED_MODULE_27__["default"]();
  this.h5Iframe = null;
  this.store = new _Store__WEBPACK_IMPORTED_MODULE_12__["default"](options);
  this.maxLaserSeq = 0; // 渲染激光笔的seq

  this.isTouchType = 'mouse'; // 鼠标（mouse）或者手指（finger）

  this.textInputStatus = 0; // 0 blur态  1 focus态

  this.touchID = null; // 单点触控限制

  this.resetVideoStatus(); //视频状态

  this.isSyncVideoStatus = true;
  this.isShowVideoControl = true;
  this.syncVideoStatusTimer = null;
  this.syncVideoStatusPrecision = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].SYNC_VIDEO_STATUS_PRECISION;
  this.drawTimer = null; // 白板渲染的定时任务
  //消息缓存

  this.userTime = {};
  this.enableSyncTime = true;
  this.compositionEvent = new _CompositionEvent__WEBPACK_IMPORTED_MODULE_30__["default"]();
  this.taskIdTitleMap = {}; // taskId和文件名的映射关系

  this.textAreaComponentMap = {};
  this.imageElementMapData = {}; // key: belongSeq, value: teduBoardImageElement

  this.textAreaFocusBlurStatus = {};
  this.addFileNeedSwitchMap = {}; // 新增文件是否需要直接切换

  this.enableLineOptimization = true;
  this.fpsOptimization = true;
  this.preDrawLineTimestamp = 0;
  this.enableRaserOptimization = true;
  this.boardImageLoadStatus = {
    backgrounds: {},
    // 背景图片
    elements: {} // 图片元素

  }; // 白板图片加载状态

  this.preLayout = {
    width: 0,
    height: 0,
    left: 0,
    top: 0,
    ratio: 0,
    scale: 0
  };
  this.preRenderCost = 0;
  this.init();
  this.initFont();
  this.updateCursorIcons();
  this.initMeasureTextElement();
  this.initPermission();
}

Board.prototype.initPermission = function () {
  if (!Board.hasVideoPermission()) {
    this.elkLog.report('init_video_permission', {});
    Board.applyVideoPermission(10, this.elkLog);
  } else {
    this.elkLog.report('has_video_permission', {});
  }
};

Board.hasVideoPermission = function () {
  if (Board.videoPermissionDiv && Board.videoPermissionDiv.getElementsByTagName('video').length != 0) {
    return true;
  }

  return false;
};

Board.applyVideoPermission = function () {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var elkLog = arguments.length > 1 ? arguments[1] : undefined;

  if (Board.hasVideoPermission()) {
    elkLog && elkLog.report('has_apply_video_permission', {});
  } else {
    Board.videoPermissionDiv = document.createElement('div');
    Board.videoPermissionDiv.id = "board_permission_videos";
    Board.videoPermissionDiv.style.display = "none";
    var permissionVideoEls = [];

    for (var i = 0; i < count; i++) {
      var videoEl = document.createElement('video');
      videoEl.setAttribute('class', 'video-js');
      videoEl.setAttribute('x5-video-player-type', 'h5-page');
      videoEl.setAttribute('controlsList', 'nodownload nofullscreen');
      videoEl.setAttribute('disablePictureInPicture', 'disablePictureInPicture');
      videoEl.setAttribute('webkit-playsinline', 'webkit-playsinline');
      videoEl.setAttribute('playsinline', 'playsinline');
      videoEl.setAttribute('controls', 'controls');
      videoEl.setAttribute('style', 'height:100%; width:100%;');
      Board.videoPermissionDiv.appendChild(videoEl);
      permissionVideoEls.push(videoEl);
    }

    document.body.appendChild(Board.videoPermissionDiv);
    permissionVideoEls.forEach(function (item) {
      try {
        item.play().catch(function () {});
      } catch (error) {}
    });
    elkLog && elkLog.report('apply_video_permission', {
      extra_info: JSON.stringify({
        count: count
      })
    });
  }
};

Board.prototype.updateCursorIcons = function () {
  this.penIcon = new Image();
  var penIconUrl = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ICONS['1'].url;

  if (penIconUrl) {
    this.penIcon.onerror = function () {
      if (this.src.indexOf('try=true') > -1) {
        return;
      }

      if (this.src.indexOf('?') == -1) {
        this.src = this.src + '?try=true';
      } else {
        this.src = this.src + '&try=true';
      }
    };

    this.penIcon.src = penIconUrl;
  }

  this.laserIcon = new Image();
  var laserIconUrl = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ICONS['3'].url;

  if (laserIconUrl) {
    this.laserIcon.onerror = function () {
      if (this.src.indexOf('try=true') > -1) {
        return;
      }

      if (this.src.indexOf('?') == -1) {
        this.src = this.src + '?try=true';
      } else {
        this.src = this.src + '&try=true';
      }
    };

    this.laserIcon.src = laserIconUrl;
  }
};
/**
 * 插入一个用来测量文字宽高的element
 */


Board.prototype.initMeasureTextElement = function () {
  var measureTextElement = document.createElement('div');
  measureTextElement.id = 'tic_measuretext__tool';
  measureTextElement.style.position = 'fixed';
  measureTextElement.style.left = '-10000px';
  measureTextElement.style.fontFamily = 'customFontFamily';
  measureTextElement.style.visibility = 'hidden';
  measureTextElement.style.boxSizing = 'content-box';
  measureTextElement.style.display = 'inline-block';
  measureTextElement.style.margin = 0;
  measureTextElement.style.padding = 0;
  measureTextElement.style.whiteSpace = 'pre-wrap';
  measureTextElement.style.lineHeight = 1;
  document.body.appendChild(measureTextElement);
};
/**
 * 初始加载字体
 */


Board.prototype.initFont = function () {
  var styleElement = document.createElement('style');
  styleElement.type = 'text/css';
  styleElement.innerHTML = "@font-face {font-family: 'customFontFamily';src: url(".concat(_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].fontUrl, ") format('truetype');}");
  var fontElement = document.createElement('div');
  fontElement.style.fontFamily = 'customFontFamily';
  fontElement.style.position = 'fixed';
  fontElement.style.left = '-10000px';
  fontElement.style.width = '1px';
  fontElement.innerHTML = '&nbsp;';
  document.body.appendChild(styleElement);
  document.body.appendChild(fontElement); // this.store.initFont();
}; // 重置画布


Board.prototype.resize = function () {
  // 交互dom节点的时候 container的节点会发送变化，此时则重新获取一次
  if (this.option && document.getElementById(this.option.id) && this.container != document.getElementById(this.option.id)) {
    this.container = document.getElementById(this.option.id);
  }

  this.store.setNeedDraw(true);
  this.draw();
};
/**
 * 
 * @param {*} e 事件对象
 * @param {*} isSimulatePCEvent 是否将touchEvent模拟成PC事件, 存在原因： ppt中有一些链接元素，转码后会变成onclick，因为touch事件阻止了默认行为，不会触发onclick,则通过alloyfinger监听singleTap事件来模拟成click, 
 * 改事件实际为touchend事件，如果按touch事件去获取坐标，则会获取不到(touchstart和touchend是一对完整事件，将touchID置空，再用一次touchend去获取坐标，则会获取不到，因为是单击事件，所以直接将touch事件模拟成PC的click来获取)
 * touches是当前屏幕上所有触摸点的列表;
 * targetTouches是当前对象上所有触摸点的列表;
 * changedTouches是涉及当前事件的触摸点的列表。
 */


Board.prototype.getEventLocation = function (e) {
  var isSimulatePCEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var result = {
    x: 0,
    y: 0,
    ox: 0,
    // 原始数据x
    oy: 0 // 原始数据y

  };
  var eventX, eventY;
  var boardBox = this.boardBox;
  var boardBoxOffset = boardBox.getBoundingClientRect();

  if (e.changedTouches && !isSimulatePCEvent) {
    var currentTouch = null;
    var errReturn = {
      x: -1000000,
      y: -1000000,
      ox: -1000000,
      oy: -1000000
    }; // 单点触控逻辑------------------

    if (e.type == "touchstart") {
      if (this.touchID == null || e.touches.length === 1) {
        this.touchID = e.changedTouches[0].identifier;
        currentTouch = e.changedTouches[0];
      } else {
        return errReturn;
      }
    } else if (e.type == "touchmove") {
      for (var i = 0; i < e.changedTouches.length; i++) {
        if (e.changedTouches[i].identifier == this.touchID) {
          currentTouch = e.changedTouches[i];
          break;
        }
      }

      if (!currentTouch) {
        return errReturn;
      }
    } else if (e.type == "touchend" || e.type == "touchcancel") {
      for (var _i = 0; _i < e.changedTouches.length; _i++) {
        if (e.changedTouches[_i].identifier == this.touchID) {
          currentTouch = e.changedTouches[_i];
          break;
        }
      }

      if (currentTouch || e.touches.length === 0) {
        this.touchID = null;
      } else {
        return errReturn;
      }
    } // 单点触控逻辑--------------------


    eventX = currentTouch['pageX'] - boardBoxOffset.left - boardBox.ownerDocument.defaultView.pageXOffset;
    eventY = currentTouch['pageY'] - boardBoxOffset.top - boardBox.ownerDocument.defaultView.pageYOffset;
    result.clientX = parseInt(currentTouch.clientX);
    result.clientY = parseInt(currentTouch.clientY);
  } else {
    // 将touchEvent模拟成PCEvent
    if (isSimulatePCEvent) {
      var touch = e.changedTouches[0];
      eventX = touch.pageX - boardBoxOffset.left - boardBox.ownerDocument.defaultView.pageXOffset;
      eventY = touch.pageY - boardBoxOffset.top - boardBox.ownerDocument.defaultView.pageYOffset;
      result.clientX = parseInt(touch.clientX);
      result.clientY = parseInt(touch.clientY);
    } else {
      eventX = e.pageX - boardBoxOffset.left - boardBox.ownerDocument.defaultView.pageXOffset;
      eventY = e.pageY - boardBoxOffset.top - boardBox.ownerDocument.defaultView.pageYOffset;
      result.clientX = parseInt(e.clientX);
      result.clientY = parseInt(e.clientY);
    }
  } // 要转一下x


  result.x = parseInt(eventX / this.width * 10000);
  result.y = parseInt(eventY / this.height * 10000); // 保存原始数据

  result.ox = parseInt(eventX);
  result.oy = parseInt(eventY);
  return result;
}; // 全局重绘


Board.prototype.draw = function () {
  if (!this.store.getCurrentBoard()) {
    return;
  }

  var self = this; // 获取当前白板的数据

  var boardData = this.store.getCurrentBoardData();
  var currentPic = boardData.backgroundPic;

  if (this.layout()) {
    //布局发生改变，全部局部绘制
    this.store.setPartDraw(true);
    this.store.setLaserDraw(true);
  }

  var ctx = self.el.getContext("2d");

  if (this.store.getPartDraw() || this.store.getNeedDraw()) {
    var floatNumber = 5; // 浮动数字（在electron中出现边界残留的问题）
    // 需要局部刷新

    ctx.clearRect(0 - floatNumber, 0 - floatNumber, self.width + floatNumber * 2, self.height + floatNumber * 2);
  }

  this.preloadTriggered = false; // 是否触发了预加载
  // 文件信息(首屏渲染还没有文件)

  var fileInfo = this.getFileInfo(this.getCurrentFile());

  if (!fileInfo) {
    return;
  }

  if (this.store.getNeedDraw()) {
    // 渲染视频 
    this.renderVideo(fileInfo); // 渲染H5PPT

    this.renderH5PPT(fileInfo); // 渲染H5Web

    this.renderH5File(fileInfo); // 渲染背景图片

    this.renderBackgroundImageAndH5(currentPic); // 渲染背景颜色

    this.renderBackgroundColor(boardData.backgroundColor, fileInfo);
  } // 渲染canvas


  this.drawData(boardData.data, ctx);

  if (!this.preloadTriggered) {
    // 触发预加载
    this.store.preloadBoard();
  }
}; // 渲染首屏


Board.prototype.drawFace = function () {
  console.time('render face');

  if (!this.store.getCurrentBoard()) {
    return;
  }

  var self = this; // 获取当前首页白板的数据

  var faceData = this.store.getFaceData();

  if (!faceData.fileInfo) {
    // 如果文件信息为空（旧版本翻页的switchBoard数据,缺少文件信息）
    return;
  }

  if (!this.layout(faceData.fileInfo)) {
    return;
  }

  var ctx = self.el.getContext("2d");
  var laserCtx = this.laserCanvas && this.laserCanvas.getContext("2d");
  var floatNumber = 5; // 浮动数字（在electron中出现边界残留的问题）
  // 先清空画板

  ctx.clearRect(0 - floatNumber, 0 - floatNumber, self.width + floatNumber * 2, self.height + floatNumber * 2);
  this.preloadTriggered = false; // 是否触发了预加载
  // ------------------------------  渲染动画PPT start --------------------------------------------- 

  this.renderH5PPT(faceData.fileInfo, true); // ------------------------------  渲染动画PPT end --------------------------------------------- 
  // ------------------------------  渲染图片 start --------------------------------------------- 

  this.renderBackgroundImageAndH5(faceData.currentPic); // ------------------------------  渲染图片 end --------------------------------------------- 
  // ------------------------------  渲染背景色 start --------------------------------------------- 

  this.renderBackgroundColor(faceData.backgroundColor, faceData.fileInfo); // ------------------------------  渲染背景色 end --------------------------------------------- 
  // ------------------------------  渲染涂鸦 start --------------------------------------------- 

  this.drawData(faceData.data, ctx); // ------------------------------  渲染涂鸦 start --------------------------------------------- 

  if (!this.preloadTriggered) {
    // 触发预加载
    this.store.preloadBoard();
  }

  console.timeEnd('render face');
};
/**
 * 
 */


Board.prototype._displayImage = function () {
  this.img.removeAttribute('src');
  this.img.removeAttribute('width');
  this.img.removeAttribute('height');
  this.img.style.display = 'none';
};
/**
 * 渲染背景图片或者H5
 */


Board.prototype.renderBackgroundImageAndH5 = function (currentPic) {
  var _this2 = this;

  var self = this;
  var currentBoard = this.getCurrentBoard();
  var currentImageStatus = this.boardImageLoadStatus.backgrounds;
  var needLoadBackgroundImage = true;

  if (!currentImageStatus) {
    currentImageStatus = {
      boardId: currentBoard,
      status: null,
      url: null
    };
    this.boardImageLoadStatus.backgrounds[currentBoard] = currentImageStatus;
  } else {
    if (currentImageStatus.boardId != currentBoard) {
      // 不同的白板页，重新清空图片的状态
      if (currentImageStatus.status === 'start') {
        // 则需要抛出超时
        this.event.fire(this, 'TEB_IMAGE_STATUS_CHANGED', _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__["default"].TEDU_BOARD_IMAGE_STATUS_LOAD_CANCEL, {
          currentBoardId: currentImageStatus.boardId,
          imgUrl: currentImageStatus.url,
          // 要加载的url 
          currentImgUrl: this.img.currentSrc // 当前图片节点上的src图片

        });
        currentImageStatus.status = 'cancel';
        clearTimeout(this.pregressTask);
        this.progress.style.display = 'none'; // currentImageStatus.boardId = currentBoard;
        // 图片加载超时

        this.elkLog.report('load_cancel_img', {
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - startLoadTime,
          image_url: currentImageStatus.url,
          boardid: currentImageStatus.boardId,
          extra_info: JSON.stringify({
            image_url: currentImageStatus.url,
            boardid: currentImageStatus.boardId,
            currentSrc: this.img.currentSrc
          })
        });
      } // ==================  清空状态 ====================


      this._displayImage();

      this.boardImageLoadStatus.backgrounds[currentBoard] = {
        boardId: currentBoard,
        status: null,
        url: null // ==================  清空状态 ====================

      };
    } else {
      // 如果是同一个白板
      if (currentImageStatus.status === 'cancel' || currentImageStatus.status === 'timeout' || currentImageStatus.status === 'start') {
        needLoadBackgroundImage = false;
      }
    }
  }

  if (currentPic.url && currentPic.show) {
    if (currentPic.type === _config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].BACKGROUND_TYPE.IMAGE) {
      // 如果背景是图片
      if (!needLoadBackgroundImage) {
        // 如果不需要加载背景图
        return;
      }

      var mode = currentPic.mode || _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER; // 图片没有加载过，则要第一次加载

      var isFirstLoad = currentPic.url !== self.img.src && encodeURI(currentPic.url) !== self.img.src && decodeURI(currentPic.url) !== decodeURI(self.img.src);

      if (navigator.userAgent.toLocaleLowerCase().indexOf('iphone os 8') > -1) {
        var decodeUrl = decodeURI(currentPic.url);
        var decodeSrc = decodeURI(self.img.src).replace(/(&|\?)imgtime=\d+_imgtime/g, '');

        if (decodeUrl == decodeSrc) {
          isFirstLoad = false;
        }
      }

      if (isFirstLoad) {
        // 图片开始加载的事件
        var startLoadTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();

        self.img.onload = function () {
          currentImageStatus.status = 'loaded'; // 加载完成

          var styles = ['display:none', 'position:absolute', 'z-index:5']; // 图片原始宽高

          var naturalWidth = self.img.naturalWidth;
          var naturalHeight = self.img.naturalHeight;
          var isHeightCriterion = self.width / self.height > naturalWidth / naturalHeight; // 是否是以高度为标准

          if (isHeightCriterion) {
            // 以高度为标准（撑满高度）
            self.img.setAttribute('height', self.height);

            if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER) {
              // 默认
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; left:50% !important;transform: translateX(-50%) !important;-webkit-transform: translateX(-50%) !important;z-index:5 !important;');
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_LEFT) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; left:0 !important;z-index:5 !important;');
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_TOP) {
              // 铺满高度后，居底和居顶都无效
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; left:50% !important;transform: translateX(-50%) !important;-webkit-transform: translateX(-50%) !important;z-index:5 !important;');
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_RIGHT) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; right:0 !important;z-index:5 !important;');
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_BOTTOM) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; left:50% !important;transform: translateX(-50%) !important;-webkit-transform: translateX(-50%) !important;z-index:5 !important;'); // 铺满高度后，居底和居顶都无效
            } else {
              // 其他MODE值都按默认的计算
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; left:50% !important;transform: translateX(-50%) !important;-webkit-transform: translateX(-50%) !important;z-index:5 !important;');
            }

            self.img.removeAttribute('width');
          } else {
            // 以宽度为标准
            self.img.setAttribute('width', self.width);

            if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER) {
              // 默认
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:50% !important; left:0 !important;transform: translateY(-50%) !important;-webkit-transform: translateY(-50%) !important;z-index:5 !important;');
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_LEFT) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:50% !important; left:0 !important;transform: translateY(-50%) !important;-webkit-transform: translateY(-50%) !important;z-index:5 !important;'); // 铺满宽度后，居左和居右都无效
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_TOP) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:0 !important; left:0 !important;z-index:5 !important;');
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_RIGHT) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:50% !important; left:0 !important;transform: translateY(-50%) !important;-webkit-transform: translateY(-50%) !important;z-index:5 !important;'); // 铺满宽度后，居左和居右都无效
            } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_BOTTOM) {
              self.img.setAttribute('style', 'display:none; position:absolute !important; bottom:0 !important; left:0 !important;z-index:5 !important;');
            } else {
              // 其他MODE值都按默认的计算
              self.img.setAttribute('style', 'display:none; position:absolute !important; top:50% !important; left:0 !important;transform: translateY(-50%) !important;-webkit-transform: translateY(-50%) !important;z-index:5 !important;');
            }

            self.img.removeAttribute('height');
          }

          self.img.style.display = 'block';
          self.img.onload = null;
          clearTimeout(self.pregressTask);
          self.progress.style.display = 'none'; // 图片加载完成

          self.event.fire(this, 'TEB_IMAGE_STATUS_CHANGED', _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__["default"].TEDU_BOARD_IMAGE_STATUS_LOAD_DONE, {
            currentBoardId: self.getCurrentBoard(),
            imgUrl: currentPic.url,
            currentImgUrl: self.img.currentSrc
          }); // 图片加载完成

          self.elkLog.report('load_succ_img', {
            time_consume: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - startLoadTime,
            image_url: currentPic.url,
            boardid: self.getCurrentBoard(),
            extra_info: JSON.stringify({
              image_url: currentPic.url,
              boardid: self.getCurrentBoard(),
              currentSrc: self.img.currentSrc
            })
          }); // 触发预加载

          self.store.preloadBoard();
        };

        self.img.onabort = function () {
          currentImageStatus.status = 'abort'; // 加载中断

          self.img.onabort = null;
          clearTimeout(self.pregressTask);
          self.progress.style.display = 'none';
          self.event.fire(this, 'TEB_IMAGE_STATUS_CHANGED', _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__["default"].TEDU_BOARD_IMAGE_STATUS_LOAD_ABORT, {
            currentBoardId: self.getCurrentBoard(),
            imgUrl: currentPic.url,
            currentImgUrl: self.img.currentSrc
          }); // 图片加载中断

          self.elkLog.report('load_abort_img', {
            time_consume: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - startLoadTime,
            image_url: currentPic.url,
            boardid: self.getCurrentBoard(),
            extra_info: JSON.stringify({
              image_url: currentPic.url,
              boardid: self.getCurrentBoard(),
              currentSrc: self.img.currentSrc
            })
          }); // 触发预加载

          self.store.preloadBoard();
        };

        self.img.onerror = function () {
          currentImageStatus.status = 'error'; // 加载中断

          var currentSrc = self.img.currentSrc;

          if (currentSrc.endsWith('try=1')) {
            self.img.style.display = 'none';
            self.img.onerror = null;
            clearTimeout(self.pregressTask);
            self.progress.style.display = 'none';
            self.event.fire(this, 'TEB_IMAGE_STATUS_CHANGED', _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__["default"].TEDU_BOARD_IMAGE_STATUS_LOAD_ERROR, {
              currentBoardId: self.getCurrentBoard(),
              imgUrl: currentPic.url,
              currentImgUrl: self.img.currentSrc
            }); // 图片加载错误

            self.elkLog.report('load_error_img', {
              time_consume: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - startLoadTime,
              image_url: currentPic.url,
              boardid: self.getCurrentBoard(),
              extra_info: JSON.stringify({
                image_url: currentPic.url,
                boardid: self.getCurrentBoard(),
                currentSrc: self.img.currentSrc
              })
            });
          } else {
            var tempUrl = currentPic.url;

            if (currentPic.url.indexOf('?') > -1) {
              tempUrl += '&try=1';
            } else {
              tempUrl += '?try=1';
            } // 延迟100ms再重试


            setTimeout(function () {
              self.img.src = tempUrl; // 图片加载错误，重新加载

              self.elkLog.report('load_try_img', {
                time_consume: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - startLoadTime,
                image_url: tempUrl,
                boardid: self.getCurrentBoard(),
                extra_info: JSON.stringify({
                  image_url: tempUrl,
                  boardid: self.getCurrentBoard(),
                  currentSrc: self.img.currentSrc
                })
              });
            }, 100);
          } // 触发预加载


          self.store.preloadBoard();
        }; // 图片开始加载


        self.event.fire(this, 'TEB_IMAGE_STATUS_CHANGED', _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__["default"].TEDU_BOARD_IMAGE_STATUS_LOADING, {
          currentBoardId: self.getCurrentBoard(),
          imgUrl: currentPic.url,
          currentImgUrl: self.img.currentSrc
        }); // 开始加载图片

        self.elkLog.report('start_load_img', {
          image_url: currentPic.url,
          boardid: self.getCurrentBoard(),
          extra_info: JSON.stringify({
            image_url: currentPic.url,
            boardid: self.getCurrentBoard(),
            currentSrc: self.img.currentSrc
          })
        });
        self.img.style.display = 'none';

        if (navigator.userAgent.toLocaleLowerCase().indexOf('iphone os 8') > -1) {
          if (currentPic.url.indexOf('?') > -1) {
            self.img.src = currentPic.url + '&imgtime=' + Date.now() + '_imgtime';
          } else {
            self.img.src = currentPic.url + '?imgtime=' + Date.now() + '_imgtime';
          }
        } else {
          self.img.src = currentPic.url;
        }
        /* #################### 图片加载状态 ##################  */


        currentImageStatus.status = 'start';
        currentImageStatus.boardId = currentBoard;
        currentImageStatus.url = currentPic.url;
        clearTimeout(this.checkImageStatusTask); // 清空检测任务

        this.checkImageStatusTask = setTimeout(function () {
          if (currentImageStatus.status === 'start') {
            // 如果到了最大超时时间， 图片的状态还是start
            // 则需要抛出超时
            _this2.event.fire(_this2, 'TEB_IMAGE_STATUS_CHANGED', _model_TEduBoardImageStatus__WEBPACK_IMPORTED_MODULE_17__["default"].TEDU_BOARD_IMAGE_STATUS_LOAD_TIMEOUT, {
              currentBoardId: currentImageStatus.boardId,
              imgUrl: currentImageStatus.url,
              // 要加载的url 
              currentImgUrl: _this2.img.currentSrc // 当前图片节点上的src图片

            });

            _this2._displayImage();

            currentImageStatus.status = 'timeout';
            clearTimeout(_this2.pregressTask);
            _this2.progress.style.display = 'none'; // 图片加载超时

            self.elkLog.report('load_timeout_img', {
              time_consume: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - startLoadTime,
              image_url: currentImageStatus.url,
              boardid: currentImageStatus.boardId,
              extra_info: JSON.stringify({
                image_url: currentImageStatus.url,
                boardid: currentImageStatus.boardId,
                currentSrc: _this2.img.currentSrc
              })
            });
          }
        }, this.store.getImageTimeout() * 1000);
        /* #################### 图片加载状态 ##################  */

        self.preloadTriggered = true;
        clearTimeout(this.pregressTask);
        self.pregressTask = setTimeout(function () {
          if (self.store.isProgressEnable()) {
            self.progress.style.display = 'block';
          }
        }, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROGRESS_SHOW_DELAY);
      } else {
        // 则认为图片加载过了，这时候只要重新修改图片宽高就可以
        // 图片原始宽高
        self.img.style.display = 'none';
        var naturalWidth = self.img.naturalWidth;
        var naturalHeight = self.img.naturalHeight;
        var isHeightCriterion = self.width / self.height > naturalWidth / naturalHeight; // 是否是以高度为标准

        var zIndex = 'z-index:5';

        if (isHeightCriterion) {
          // 高度铺满
          self.img.setAttribute('height', self.height);
          var translateX = 'transform: translateX(-50%);-webkit-transform: translateX(-50%)';

          if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER) {
            // 默认
            self.img.setAttribute('style', "display:none; position:absolute; top:0; left:50%;".concat(translateX, ";").concat(zIndex));
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_LEFT) {
            self.img.setAttribute('style', "display:none; position:absolute; top:0; left:0;".concat(zIndex));
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_TOP) {
            self.img.setAttribute('style', "display:none; position:absolute; top:0; left:50%;".concat(translateX, ";").concat(zIndex)); // 铺满高度后，居底和居顶都无效
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_RIGHT) {
            self.img.setAttribute('style', "display:none; position:absolute; top:0; right: 0;".concat(zIndex));
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_BOTTOM) {
            self.img.setAttribute('style', "display:none; position:absolute; top:0; left:50%;".concat(translateX, ";").concat(zIndex)); // 铺满高度后，居底和居顶都无效
          } else {
            self.img.setAttribute('style', "display:none; position:absolute; top:0; left:50%;".concat(translateX, ";").concat(zIndex));
          }

          self.img.removeAttribute('width');
        } else {
          self.img.setAttribute('width', self.width);
          var translateY = 'transform: translateY(-50%);-webkit-transform: translateY(-50%)';

          if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER) {
            // 默认
            self.img.setAttribute('style', "display:none; position:absolute; top:50%; left:0;".concat(translateY, ";").concat(zIndex));
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_LEFT) {
            self.img.setAttribute('style', "display:none; position:absolute; top:50%; left:0;".concat(translateY, ";").concat(zIndex)); // 铺满宽度后，居左和居右都无效
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_TOP) {
            self.img.setAttribute('style', "display:none; position:absolute; top:0; left:0;".concat(zIndex));
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_RIGHT) {
            self.img.setAttribute('style', "display:none; position:absolute; top:50%; left:0;".concat(translateY, ";").concat(zIndex)); // 铺满宽度后，居左和居右都无效
          } else if (mode === _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_BOTTOM) {
            self.img.setAttribute('style', "display:none; position:absolute; bottom:0; left:0;".concat(zIndex));
          } else {
            self.img.setAttribute('style', "display:none; position:absolute; top:50%; left:0;".concat(translateY, ";").concat(zIndex));
          }

          self.img.removeAttribute('height');
        }

        self.img.style.display = 'block';
      }

      self.preloadTriggered = true; // 删除背景iframe

      this.backgroundIFrameManager.remove(this.boardBox);
    } else {
      // 如果是H5
      // 当前背景url
      this._displayImage();

      this.backgroundIFrameManager.createElement(this.boardBox, currentPic.url, function (src) {
        if (src) {
          self.event.fire(self, 'TEB_H5BACKGROUND_STATUS_CHANGED', _model_TEduBoardBackgroundH5Status__WEBPACK_IMPORTED_MODULE_20__["default"].TEDU_BOARD_BACKGROUND_H5_STATUS_LOAD_FINISH, {
            currentBoardId: self.getCurrentBoard(),
            url: src
          });
          self.elkLog.report('iframe_load_done', {
            boardid: self.getCurrentBoard(),
            extra_info: 'H5_Background',
            image_url: src
          });
        }

        clearTimeout(self.pregressTask);
        self.progress.style.display = 'none'; // 触发预加载

        self.store.preloadBoard();
      });
      this.backgroundIFrameManager.layout(self.width, self.height);
      this.backgroundIFrameManager.render(function () {
        _this2.preloadTriggered = true;
        clearTimeout(_this2.pregressTask);
        _this2.pregressTask = setTimeout(function () {
          if (_this2.store.isProgressEnable()) {
            _this2.progress.style.display = 'block';
          }
        }, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROGRESS_SHOW_DELAY); // 正在加载

        _this2.event.fire(_this2, 'TEB_H5BACKGROUND_STATUS_CHANGED', _model_TEduBoardBackgroundH5Status__WEBPACK_IMPORTED_MODULE_20__["default"].TEDU_BOARD_BACKGROUND_H5_STATUS_LOADING, {
          currentBoardId: _this2.getCurrentBoard(),
          url: currentPic.url
        });

        self.elkLog.report('iframe_start_load', {
          boardid: _this2.getCurrentBoard(),
          extra_info: 'H5_Background',
          image_url: currentPic.url
        });
      });
    }
  } else {
    this._displayImage(); // 移除背景H5 iframe


    this.backgroundIFrameManager.remove(this.boardBox);
  }
};
/**
 * 渲染H5
 */


Board.prototype.renderH5File = function (fileInfo) {
  var _this3 = this;

  var fid = fileInfo.fid;
  var type = fileInfo.type;
  var url = fileInfo.downloadURL;
  this.aegis.report('renderH5File', {
    module: 'board',
    fid: fid,
    url: url
  });

  if (type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5FILE && url) {
    if (!this.h5Iframe || this.h5Iframe.src != url) {
      var self = this;

      if (this.h5Iframe) {
        this.h5Iframe.remove(this.boardWrap);
        this.h5Iframe = null;
      }

      this.h5Iframe = new _H5IFrame__WEBPACK_IMPORTED_MODULE_28__["default"](url);
      this.h5Iframe.createElement(this.boardWrap, url, function () {
        if (url) {
          self.event.fire(self, 'TEB_H5FILE_STATUS_CHANGED', {
            fileId: fid,
            status: _model_TEduBoardH5FileStatus__WEBPACK_IMPORTED_MODULE_22__["default"].TEDU_BOARD_H5_FILE_STATUS_LOADED
          });
          self.elkLog.report('iframe_load_done', {
            file_id: fid,
            extra_info: 'H5_FILE',
            url: url
          });
        }
      });
      var width = this.boardWrap.clientWidth;
      var height = this.boardWrap.clientHeight;
      this.h5Iframe.layout(width, height);
      this.h5Iframe.render(function () {
        // 正在加载
        _this3.event.fire(_this3, 'TEB_H5FILE_STATUS_CHANGED', {
          fileId: fid,
          status: _model_TEduBoardH5FileStatus__WEBPACK_IMPORTED_MODULE_22__["default"].TEDU_BOARD_H5_FILE_STATUS_LOADING
        });

        self.elkLog.report('iframe_start_load', {
          fid: fid,
          extra_info: 'H5_FILE',
          image_url: url
        });
      });
    }
  } else {
    //iframe
    if (this.h5Iframe) {
      this.h5Iframe.remove(this.boardWrap);
      this.h5Iframe = null;
    }
  }
};

Board.prototype.getVideoFormat = function (url) {
  //文件类型
  url = url.split('?')[0];
  var splits = url.split(':');
  var format = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.NONE;

  if (splits.length != 0 && splits[0].toLocaleLowerCase() == "rtmp") {
    format = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.RTMP;
  } else {
    splits = url.split('.');

    if (splits.length != 0) {
      format = splits[splits.length - 1].toLocaleLowerCase();

      if (format == "m3u8") {
        format = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.M3U8;
      } else if (format == "flv") {
        format = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.FLV;
      } else if (format == "mp4") {
        format = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.MP4;
      }
    }
  }

  return format;
};

Board.prototype.getVideoType = function (url) {
  var format = this.getVideoFormat(url);

  if (format == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.MP4) {
    return _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VOD;
  } else if (format == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.M3U8 || format == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.RTMP || format == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.FLV) {
    return _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.LIVE;
  } else {
    return _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.NONE;
  }
};

Board.prototype.videoPlayed = function (msg) {
  if (this.videoStatus.fid === "") {
    console.log("video log: videoPlayed fid null");
    this.elkLog.report('video_palyed_null');
    this.videoStatus.actions.pause = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
    this.videoPlayer.pause();
    return;
  }

  this.videoStatus.preStatus = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY;

  if (!this.isShowVideoControl && this.videoStatus.actions.play == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN) {
    //如果没有展示控制栏，说明不可能通过按钮调用，属于异常触发
    console.log("video log: videoPlayed exception, isShowVideoControl ".concat(this.isShowVideoControl, ", actions.pause ").concat(this.videoStatus.actions.pause));
    this.elkLog.report('video_played_exception', {
      file_id: this.videoStatus.fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        isShowVideoControl: this.isShowVideoControl,
        videoAction: this.videoStatus.actions.play
      })
    });
    this.store.setNeedDraw();
  } else {
    this.videoStatus.actionTimes.play = 0;

    if (!this.videoStatus.isLoaded) {
      //未加载完毕不同步状态到远端
      console.log('video log: videoPlayed video not loaded');
      this.store.setNeedDraw();
    } else {
      var progress = this.videoPlayer.currentTime() || 0;
      var duration = this.videoStatus.duration;
      var fid = this.videoStatus.fid;
      var needSync = this.isSyncVideoStatus;

      if (this.videoStatus.actions.play == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE) {
        //被动更新不同步状态到远端
        needSync = false;
      }

      var status = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY;
      this.store.updateVideo(fid, status, progress, needSync);
      this.store.setNeedDraw();

      if (!this.videoStatus.isFixed.play) {
        this.videoStatus.isFixed.play = true;
        console.log("video log: videoPlayed fixed");
        this.elkLog.report('video_played_fixed', {
          file_id: fid,
          extra_info: JSON.stringify({
            url: this.videoStatus.url,
            progress: progress
          })
        });

        if (this.videoStatus.isFixed.play && this.videoStatus.isFixed.pause && this.videoStatus.isFixed.seek) {
          this.videoLoaded();
        }
      } else {
        console.log("video log: videoPlayed progress ".concat(progress, ", duration ").concat(duration, ",  needSync ").concat(needSync));
        this.elkLog.report('video_played', {
          file_id: fid,
          extra_info: JSON.stringify({
            url: this.videoStatus.url,
            progress: progress,
            duration: duration,
            needSync: needSync
          })
        });
        this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
          fileId: fid,
          status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_PLAYED,
          progress: progress,
          duration: duration
        });
      }
    }
  }

  this.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN;
};

Board.prototype.videoLoaded = function () {
  console.log('video log: videoLoaded');
  this.elkLog.report('video_loaded', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url,
      progress: this.videoPlayer.currentTime(),
      duration: this.videoPlayer.duration()
    })
  });
  this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
    fileId: this.videoStatus.fid,
    status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_LOADED,
    progress: this.videoPlayer.currentTime(),
    duration: this.videoPlayer.duration()
  });
};

Board.prototype.videoCreated = function () {
  if (this.videoStatus.fid === "") {
    console.log("video log: videoCreated fid null");
    this.elkLog.report('video_created_null');
    return;
  }

  if (!this.isShowVideoControl && this.videoStatus.actions.create == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN) {
    //如果没有展示控制栏，说明不可能通过按钮调用，属于异常触发
    console.log("video log: videoPlayed videoCreated, isShowVideoControl ".concat(this.isShowVideoControl, ", actions.pause ").concat(this.videoStatus.actions.pause));
    this.elkLog.report('video_created_exception', {
      file_id: fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        isShowVideoControl: this.isShowVideoControl,
        videoAction: this.videoStatus.actions.create
      })
    });
    this.store.setNeedDraw();
  } else {
    if (this.videoStatus.isLoaded != true) {
      this.videoDiv.setAttribute('style', "z-index:20; position:absolute; top:0; left:0; height:".concat(this.height, "px; width:").concat(this.width, "px; display:block; outline:none;"));
      this.showVideoControl(this.isShowVideoControl);
      var duration = this.videoPlayer.duration() || 0;
      var fid = this.videoStatus.fid;
      var url = this.videoStatus.url;
      var type = this.videoStatus.type;
      this.videoStatus.duration = duration;

      if (this.videoStatus.actions.create == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE) {} else {
        console.log('video log: videoCreated add video file'); // this.store.addVideoFile(fid, url, this.width, this.height, type);
      }

      this.videoStatus.isLoaded = true;
      console.log("video log: videoCreated duration ".concat(duration));
      this.elkLog.report('video_created', {
        file_id: fid,
        extra_info: JSON.stringify({
          url: this.videoStatus.url,
          duration: duration
        })
      }); //需要更新

      var fileInfo = this.getFileInfo(this.videoStatus.fid);
      var progress = 0;

      if (fileInfo) {
        progress = fileInfo.progress;
        var before = progress;
        var currentTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();

        if (fileInfo.status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY) {
          progress = Math.floor((currentTime - fileInfo.timestamp) / 1000 + progress);
          console.log("video log: videoCreated fix progress before ".concat(before, " time ").concat(fileInfo.timestamp, ", after ").concat(progress, " time ").concat(currentTime));
        }
      }

      this.store.updateVideo(fid, -1, progress, false);
      this.store.setNeedDraw();

      if (fileInfo.status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PAUSE && this.videoStatus.preStatus == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY) {
        this.videoStatus.isFixed.pause = false;
      }

      if (fileInfo.status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY && this.videoStatus.preStatus == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PAUSE) {
        this.videoStatus.isFixed.play = false;
      }

      if (Math.floor(fileInfo.progress) != Math.floor(this.videoStatus.preProgress)) {
        this.videoStatus.isFixed.seek = false;
      }

      if (this.videoStatus.isFixed.play && this.videoStatus.isFixed.pause && this.videoStatus.isFixed.seek) {
        this.videoLoaded();
      }
    }
  }

  this.videoStatus.actions.create = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN;
};

Board.prototype.videoPaused = function (msg) {
  this.videoStatus.preStatus = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PAUSE;

  if (!this.isShowVideoControl && this.videoStatus.actions.pause == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN) {
    //如果没有展示控制栏，说明不可能通过按钮调用，属于异常触发
    console.log("video log: videoPaused exception, isShowVideoControl ".concat(this.isShowVideoControl, ", actions.pause ").concat(this.videoStatus.actions.pause));
    this.elkLog.report('video_paused_exception', {
      file_id: this.videoStatus.fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        isShowVideoControl: this.isShowVideoControl,
        videoAction: this.videoStatus.actions.pause
      })
    });
    this.store.setNeedDraw();
  } else {
    this.videoStatus.actionTimes.pause = 0;
    var rootNode = document.querySelector('div.tx_board_canvas_box');

    if (!rootNode || !rootNode.parentNode) {//节点删除video会自动调用pause方法
    } else {
      if (!this.videoStatus.isLoaded) {
        //未加载完毕不同步状态到远端
        console.log('video log: videoPaused video not loaded');
        this.store.setNeedDraw();
      } else {
        var progress = this.videoPlayer.currentTime() || 0;
        var duration = this.videoStatus.duration;
        var fid = this.videoStatus.fid;
        var needSync = this.isSyncVideoStatus;

        if (this.videoStatus.actions.pause == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE) {
          //被动更新不同步状态到远端
          needSync = false;
        }

        var status = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PAUSE;
        this.store.updateVideo(fid, status, progress, needSync);
        this.store.setNeedDraw();

        if (!this.videoStatus.isFixed.pause) {
          this.videoStatus.isFixed.pause = true;
          console.log("video log: videoPaused fixed");
          this.elkLog.report('video_paused_fixed', {
            file_id: fid,
            extra_info: JSON.stringify({
              url: this.videoStatus.url,
              progress: progress
            })
          });

          if (this.videoStatus.isFixed.play && this.videoStatus.isFixed.pause && this.videoStatus.isFixed.seek) {
            this.videoLoaded();
          }
        } else {
          console.log("video log: videoPaused progress ".concat(progress, ", duration ").concat(duration, ",  needSync ").concat(needSync));
          this.elkLog.report('video_paused', {
            file_id: fid,
            extra_info: JSON.stringify({
              url: this.videoStatus.url,
              progress: progress,
              duration: duration,
              needSync: needSync
            })
          });
          this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
            fileId: fid,
            status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_PAUSED,
            progress: progress,
            duration: duration
          });
        }
      }
    }
  }

  this.videoStatus.actions.pause = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN;
};

Board.prototype.videoTimeUpdate = function (msg) {
  if (this.hidden && _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
    console.log("video log: videoTimeUpdate document hidden");
    return;
  }

  if (this.videoStatus.fid === "") {
    console.log("video log: videoTimeUpdate fid null");
    this.elkLog.report('video_videoTimeUpdate_null');
    return;
  }

  if (this.videoStatus.isFixed.play && this.videoStatus.isFixed.pause && this.videoStatus.isFixed.seek && this.videoStatus.preStatus == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY) {
    //只有修正后才接受timeupdate回调
    //第一次play后，created前如果触发了videoTimeUpdate回调，将会导致状态错误。
    var fid = this.videoStatus.fid;
    var duration = this.videoStatus.duration;
    var curProgress = this.videoPlayer.currentTime() || 0; //this.videoStatus.preProgress = curProgress;
    // console.log(`video log: videoTimeUpdate progress ${curProgress}, duration ${duration}`);
    // this.store.updateVideo(fid, -1, curProgress, false);

    this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
      fileId: fid,
      status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_TIMEUPDATE,
      progress: curProgress,
      duration: duration
    });
  }
};

Board.prototype.videoEnded = function () {
  var fid = this.videoStatus.fid;
  var duration = this.videoPlayer.duration();
  this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
    fileId: fid,
    status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_ENDED,
    progress: duration,
    duration: duration
  });
  this.videoStatus.preProgress = duration;
  this.videoStatus.preStatus = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.STOP;
  console.log('video log: videoEnded');
  this.elkLog.report('video_ended', {
    file_id: fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url,
      needSync: false
    })
  });
  this.store.updateVideo(fid, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.STOP, duration, false);
};

Board.prototype.videoSeeked = function () {
  if (!this.isShowVideoControl && this.videoStatus.actions.seek == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN) {
    //如果没有展示控制栏，说明不可能通过按钮调用，属于异常触发
    console.log("video log: videoSeeked exception, isShowVideoControl ".concat(this.isShowVideoControl, ", actions.pause ").concat(this.videoStatus.actions.pause));
    this.elkLog.report('video_seeked_exception', {
      file_id: this.videoStatus.fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        isShowVideoControl: this.isShowVideoControl,
        videoAction: this.videoStatus.actions.seek
      })
    });
    this.store.setNeedDraw();
  } else {
    this.videoStatus.actionTimes.seek = 0;

    if (!this.videoStatus.isLoaded) {
      //未加载完毕不同步状态到远端
      console.log('video log: videoSeeked video not loaded');
      this.store.setNeedDraw();
    } else {
      var progress = this.videoPlayer.currentTime() || 0;
      var duration = this.videoStatus.duration;
      var fid = this.videoStatus.fid;
      this.videoStatus.preProgress = progress;
      var needSync = this.isSyncVideoStatus;

      if (this.videoStatus.actions.seek == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE) {
        //被动更新不同步状态到远端
        needSync = false;
      }

      var status = this.videoStatus.preStatus;
      this.store.updateVideo(fid, -1, progress, needSync);
      this.store.setNeedDraw();

      if (!this.videoStatus.isFixed.seek) {
        this.videoStatus.isFixed.seek = true;
        console.log("video log: videoSeeked fixed ".concat(progress));
        this.elkLog.report('video_seeked_fixed', {
          file_id: fid,
          extra_info: JSON.stringify({
            url: this.videoStatus.url,
            progress: progress
          })
        });

        if (this.videoStatus.isFixed.play && this.videoStatus.isFixed.pause && this.videoStatus.isFixed.seek) {
          this.videoLoaded();
        }
      } else {
        console.log("video log: videoSeeked progress ".concat(progress, ", duration ").concat(duration, ",  needSync ").concat(needSync));
        this.elkLog.report('video_seeked', {
          file_id: fid,
          extra_info: JSON.stringify({
            url: this.videoStatus.url,
            progress: progress,
            duration: duration,
            needSync: needSync
          })
        });
        this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
          fileId: fid,
          status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_SEEKED,
          progress: progress,
          duration: duration
        });
      }
    }
  }

  this.videoStatus.actions.seek = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN;
};

Board.prototype.videoMetaDataLoaded = function () {
  this.elkLog.report('video_metadata_loaded', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.videoWaiting = function () {
  this.videoStatus.waitingTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
  this.videoStatus.isWaiting = true;
  console.log('video log: waiting');
  this.elkLog.report('video_waiting', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.videoPlaying = function () {
  if (!this.videoStatus.isWaiting) {
    return;
  }

  this.videoStatus.isWaiting = false;
  var cost = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - this.videoStatus.waitingTime;
  console.log("video log: playing, cost ".concat(cost));
  this.elkLog.report('video_playing', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url,
      cost: cost
    })
  });
};

Board.prototype.videoError = function () {
  if (this.videoPlayer.errorDisplay) {
    this.videoPlayer.errorDisplay.hide();
  }

  this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
    fileId: this.videoStatus.fid,
    status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_ERROR,
    progress: 0,
    duration: 0
  });
  var error = this.videoPlayer.error();
  console.log("video log: error cdoe ".concat(error.code, ", msg ").concat(error.message));
  this.elkLog.report('video_error', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url,
      code: error.code,
      msg: error.message
    })
  });
};

Board.prototype.visibilityChange = function () {
  if (document.visibilityState === "hidden") {
    this.hidden = true;
    this.store.setVisible(false);
    console.log("board visibility: background");
    this.elkLog.report('move_background', {});
  } else {
    this.hidden = false;
    this.store.setVisible(true);
    this.elkLog.report('move_foreground', {});
    console.log("board visibility: foreground");
    this.store.setNeedDraw(true);
  }
};

Board.prototype.createVideo = function (fid, url) {
  var _this4 = this;

  this.store.request.corsGet(url, function () {
    _this4.innerCreateVideo(fid, url, true);
  }, function () {
    _this4.innerCreateVideo(fid, url, false);
  });
};

Board.prototype.innerCreateVideo = function (fid, url, crossOrigin) {
  var _this5 = this;

  var width = this.boardWrap.clientWidth;
  var height = this.boardWrap.clientHeight;
  this.videoDiv.setAttribute('style', "z-index:20; position:absolute; top:0; left:0; height:".concat(height, "px; width:").concat(width, "px; display:none;"));
  this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
    fileId: fid,
    status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_LOADING,
    progress: 0,
    duration: 0
  });
  var that = this;

  if (!this.videoTag) {
    if (!Board.hasVideoPermission()) {
      console.log("视频未授权");
      return;
    }

    this.videoTag = Board.videoPermissionDiv.getElementsByTagName("video")[0];

    if (crossOrigin) {
      this.videoTag.setAttribute('crossOrigin', 'Anonymous');
    } else {
      this.videoTag.removeAttribute('crossOrigin');
    }

    this.videoTag.setAttribute('data-fid', fid);
    this.videoTag.addEventListener("mousedown", function (event) {
      //阻断涂鸦事件传递
      event.stopPropagation();
    });
    this.videoTag.addEventListener("touchstart", function (event) {
      //阻断涂鸦事件传递
      event.stopPropagation();
    });
    this.videoTag.pause();

    if (this.videoTag) {
      var id = Math.floor(Math.random() * 1000000);
      this.videoTag.id = "tic_video_".concat(id);
      this.videoDiv.appendChild(this.videoTag);
      this.videoPlayer = window.videojs(this.videoTag.id, {
        width: width,
        height: height,
        preload: "auto"
      }, function () {
        this.tech_ && this.tech_.off('dblclick'); // 取消双击事件导致video全屏，会拦截focus事件，导致不能文本输入

        that.resetVideoJSControl();
        that.videoTag = that.videoDiv.getElementsByTagName('video')[0];
        this.src([{
          src: url
        }]);
        this.on('loadstart', function () {});
        this.on('loadedmetadata', function () {
          that.videoMetaDataLoaded();

          if (!that.videoStatus.isLoaded) {
            if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
              //非移动端收到loadedmetadata，意味着元数据已经加载
              that.videoCreated();
            }
          }
        });
        this.on('loadeddata', function () {});
        this.on('canplay', function () {
          that.elkLog.report('video_canplay', {
            file_id: that.videoStatus.fid,
            extra_info: JSON.stringify({
              url: that.videoStatus.url,
              duration: this.duration()
            })
          });
          console.log("video log: canplay");
        });
        this.on('durationchange', function () {
          that.elkLog.report('video_durationchange', {
            file_id: that.videoStatus.fid,
            extra_info: JSON.stringify({
              url: that.videoStatus.url,
              duration: this.duration()
            })
          });
          console.log("video log: durationchange");
        });
        this.on('play', function () {
          that.videoPlayed();

          if (!that.videoStatus.isLoaded) {
            if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
              //android必须play后才能真正获取画面
              that.videoCreated();
            }
          }
        });
        this.on('pause', function () {
          that.videoPaused();
        });
        this.on('ended', function () {
          that.videoEnded();
        });
        this.on('seeked', function () {
          that.videoSeeked();
        });
        this.on('timeupdate', function () {
          that.videoTimeUpdate();
        });
        this.on('waiting', function () {
          that.videoWaiting();
        });
        this.on('playing', function () {
          that.videoPlaying();
        });
        this.on('error', function () {
          that.videoError();
        });
        that.videoPlayer.load();
        setTimeout(function () {
          if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
            //android必须play后才能真正获取画面
            var actionTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
            that.videoStatus.actionTimes.play = actionTime;
            that.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
            that.videoPlayer.play();
            console.log('video log: createVideo play');
            var playInterval = setInterval(function () {
              if (that) {
                if (that.videoStatus.actionTimes.play == actionTime) {
                  console.log("video log: createVideo play miss callback");
                  that.elkLog.report('create_play_miss_callback', {
                    file_id: that.videoStatus.fid,
                    extra_info: JSON.stringify({
                      url: that.videoStatus.url
                    })
                  });
                  that.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
                  that.videoPlayer.play();
                } else {
                  clearInterval(playInterval);
                }
              } else {
                clearInterval(playInterval);
              }
            }, 2000);
          }
        }, 500);
      });
    } else {
      this.elkLog.report('no_auth_video', {
        file_id: this.videoStatus.fid,
        extra_info: JSON.stringify({
          url: this.videoStatus.url
        })
      });
      return;
    }
  } else {
    this.videoPlayer.src([{
      src: url
    }]);
    this.videoPlayer.load();
    setTimeout(function () {
      if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
        //android必须play后才能真正获取画面
        var actionTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
        _this5.videoStatus.actionTimes.play = actionTime;
        _this5.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;

        _this5.videoPlayer.play();

        console.log('video log: createVideo play');
        var playInterval = setInterval(function () {
          if (_this5) {
            if (_this5.videoStatus.actionTimes.play == actionTime) {
              console.log("video log: createVideo play miss callback");

              _this5.elkLog.report('create_play_miss_callback', {
                file_id: _this5.videoStatus.fid,
                extra_info: JSON.stringify({
                  url: _this5.videoStatus.url
                })
              });

              _this5.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;

              _this5.videoPlayer.play();
            } else {
              clearInterval(playInterval);
            }
          } else {
            clearInterval(playInterval);
          }
        }, 2000);
      }
    }, 500);
  }
};

Board.prototype.splitVodVideoOption = function (url) {
  var ids = url.split("_");

  if (ids.length != 3) {
    return {
      appId: 0,
      vodId: 0,
      hasExt: "false"
    };
  }

  var appId = ids[0];
  var vodId = ids[1];
  var hasExt = ids[2];
  return {
    appId: appId,
    vodId: vodId,
    hasExt: hasExt
  };
};

Board.prototype.createVodVideo = function (fid, url) {
  var _this6 = this;

  var extParam = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (this.videoPlayer) {
    this.videoPlayer.dispose();
    this.videoPlayer = null;
  }

  var width = this.boardWrap.clientWidth;
  var height = this.boardWrap.clientHeight;
  this.videoDiv.setAttribute('style', "z-index:20; position:absolute; top:0; left:0; height:".concat(height, "px; width:").concat(width, "px; display:none"));
  var video = document.createElement('video');
  var videoId = "tic_video_".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp());
  video.setAttribute('style', 'width:100%; height:100%');
  video.setAttribute('id', videoId);
  this.videoDiv.appendChild(video);
  this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', {
    fileId: fid,
    status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_LOADING,
    progress: 0,
    duration: 0
  });
  var ids = this.splitVodVideoOption(url); //tcplayer参数

  var option = {
    appID: ids.appId,
    fileID: ids.vodId,
    width: width,
    height: height
  }; //合并额外参数

  if (extParam) {
    for (var param in extParam) {
      option[param] = extParam[param];
    }
  }

  this.videoPlayer = new window.TCPlayer(videoId, option);
  this.videoPlayer.on('error', function () {
    // if (!this.videoStatus.isLoaded) {
    // this.store.addVideoFile(fid, url, width, height, this.videoStatus.type);
    // this.videoStatus.isLoaded = true;
    // }
    // this.store.setNeedDraw();
    _this6.event.fire(_this6, 'TEB_VIDEO_STATUS_CHANGED', {
      fileId: fid,
      status: _model_TEduBoardVideoStatus__WEBPACK_IMPORTED_MODULE_31__["default"].TEDU_BOARD_VIDEO_STATUS_ERROR,
      progress: 0,
      duration: 0
    });
  });
  this.videoPlayer.on('loadstart', function () {
    var video = _this6.container.getElementsByTagName('video')[0];

    if (!video) {
      //移除video会触发pause回调
      return;
    }

    video.setAttribute("x5-video-player-type", "h5-page"); //隐藏下载

    video.setAttribute("controlsList", "nodownload"); //隐藏画中画

    video.setAttribute("disablePictureInPicture", ""); //界面设置（cvp-loading动态添加，需要多次设置）

    _this6.removeTCPlayerControl();
  });
  this.videoPlayer.on('loadedmetadata', function () {
    _this6.videoMetaDataLoaded();
  });
  this.videoPlayer.on('play', function () {
    _this6.videoPlayed();

    if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
      if (!_this6.videoStatus.isLoaded) {
        //Android会偶现不能获取到duration的情况，统一延迟调用
        setTimeout(function () {
          if (window.WeixinJSBridge || _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile() && _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PLATFORM.toLowerCase() != "ios" && _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PLATFORM.toLowerCase() != "android") {//移动端h5播放由于用户隐私政策，统一静音播放
          } else {
            _this6.videoPlayer.mute(false);
          }

          _this6.videoCreated(width, height);
        }, 500);
      }
    }
  });
  this.videoPlayer.on('pause', function () {
    _this6.videoPaused();
  });
  this.videoPlayer.on('ended', function () {
    _this6.videoEnded();
  });
  this.videoPlayer.on('seeked', function () {
    _this6.videoSeeked();
  });
  this.videoPlayer.on('seeking', function () {
    if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isAndroid() && _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isTBS()) {
      //tcplyaer在android tbs环境下有可能没有seeked回调
      _this6.videoSeeked();
    }
  });
  this.videoPlayer.on('timeupdate', function () {
    _this6.videoTimeUpdate();
  });
  this.videoPlayer.on('loadeddata', function () {
    //非移动平台
    if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
      _this6.videoCreated(width, height);
    }
  });
};

Board.prototype.setVODExtParam = function (fileId, extParam) {
  if (this.videoStatus.fid == fileId) {
    this.videoStatus.extParam = extParam;
    this.createVodVideo(fileId, this.videoStatus.url, extParam);
  }
};

Board.prototype.resetVideoTag = function () {
  this.videoTag = this.videoDiv.getElementsByTagName('video')[0];

  if (this.videoTag) {
    this.videoTag.setAttribute('x5-video-player-type', 'h5-page');
    this.videoTag.setAttribute('controlsList', 'nodownload nofullscreen');
    this.videoTag.setAttribute('disablePictureInPicture', 'disablePictureInPicture');
    this.videoTag.setAttribute('webkit-playsinline', 'webkit-playsinline');
    this.videoTag.setAttribute('playsinline', 'playsinline');
    this.videoTag.setAttribute('style', 'height:100%; width:100%;');
    this.videoTag.setAttribute('controls', 'controls');
    this.videoTag.addEventListener("mousedown", function (event) {
      //阻断涂鸦事件传递
      event.stopPropagation();
    });
    this.videoTag.addEventListener("touchstart", function (event) {
      //阻断涂鸦事件传递
      event.stopPropagation();
    });
  }
};

Board.prototype.resetVideoStatus = function () {
  this.videoStatus = {
    fid: "",
    url: "",
    type: _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VOD,
    format: _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_FORMAT.MP4,
    duration: 0,
    isLoaded: false,
    //是否created
    isFixed: {
      //是否修正到原始状态
      play: true,
      pause: true,
      seek: true
    },
    isWaiting: false,
    //是否缓冲
    waitingTime: 0,
    //开始缓冲时间
    preStatus: -1,
    preProgress: 0,
    actions: {
      //判断是否异常调用
      play: _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN,
      pause: _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN,
      seek: _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN,
      create: _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.EXCEPTIOIN
    },
    actionTimes: {
      //判断是否收到回调
      play: 0,
      pause: 0,
      seek: 0
    }
  };
};

Board.prototype.updateVideoStatus = function (status, progress, type) {
  var _this7 = this;

  if (this.hidden && _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
    this.elkLog.report('ignore_video_update', {
      file_id: this.videoStatus.fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        progress: progress,
        status: status,
        duration: this.videoStatus.duration
      })
    });
    console.log("video log: ignore video update status ".concat(status, ", progress, ").concat(progress));
    return;
  } // if (type == Config.FILE_TYPE.VOD) {


  var needSeek = false;

  if (status == this.videoStatus.preStatus) {
    //定时同步
    if (Math.abs(parseInt(this.videoStatus.preProgress) - parseInt(progress)) * 1000 > this.syncVideoStatusPrecision) {
      needSeek = true;
    }
  } else {
    //状态切换
    if (Math.abs(parseInt(this.videoStatus.preProgress) - parseInt(progress)) * 1000 > 0) {
      needSeek = true;
    }
  }

  if (needSeek) {
    //点播支持进度控制
    // if (this.videoStatus.actionTimes.seek != 0) {
    //   //上一次还没有收到回调
    //   this.elkLog.report('seek_double_call', {
    //     file_id: this.videoStatus.fid,
    //     extra_info: JSON.stringify({
    //       url: this.videoStatus.url,
    //       progress: progress,
    //       status: status
    //     })
    //   });
    // }
    // else {
    var seekTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
    this.videoStatus.actionTimes.seek = seekTime;
    this.videoStatus.actions.seek = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
    this.videoPlayer.currentTime(progress);
    setTimeout(function () {
      if (_this7) {
        if (_this7.videoStatus.actionTimes.seek == seekTime) {
          console.log("video log: updateVideoStatus needSeek status ".concat(status, ", progress ").concat(progress, " miss callback"));

          _this7.elkLog.report('seek_miss_callback', {
            file_id: _this7.videoStatus.fid,
            extra_info: JSON.stringify({
              url: _this7.videoStatus.url,
              progress: progress,
              duration: _this7.videoStatus.duration
            })
          });

          _this7.store.setNeedDraw();
        }
      }
    }, 2000);
    console.log("video log: updateVideoStatus needSeek status ".concat(status, ", progress ").concat(progress));
    this.elkLog.report('video_status_update_seek', {
      file_id: this.videoStatus.fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        progress: progress,
        duration: this.videoStatus.duration
      })
    }); // }
  } // }
  else {
      var video = this.videoDiv.getElementsByTagName('video')[0];
      var videoPaused = video && video.paused;
      var videoPlayed = !videoPaused;
      var action = null;
      var actionTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();

      if (status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.STOP && !videoPaused) {
        //停止
        // if (this.videoStatus.actionTimes.pause != 0) {
        //   //上一次还没有收到回调
        //   this.elkLog.report('pause_double_call', {
        //     file_id: this.videoStatus.fid,
        //     extra_info: JSON.stringify({
        //       url: this.videoStatus.url,
        //       progress: progress,
        //       status: status
        //     })
        //   });
        // }
        // else {
        this.videoStatus.actionTimes.pause = actionTime;
        this.videoStatus.actions.pause = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
        this.videoPlayer.pause();
        setTimeout(function () {
          if (_this7) {
            if (_this7.videoStatus.actionTimes.pause == actionTime) {
              console.log("video log: updateVideoStatus needStop status ".concat(status, ", progress ").concat(progress, " miss callback"));

              _this7.elkLog.report('stop_miss_callback', {
                file_id: _this7.videoStatus.fid,
                extra_info: JSON.stringify({
                  url: _this7.videoStatus.url,
                  progress: progress,
                  duration: _this7.videoStatus.duration
                })
              });

              _this7.store.setNeedDraw();
            }
          }
        }, 2000);
        action = 'video_status_update_stop';
        console.log("video log: updateVideoStatus needStop status ".concat(status, ", progress ").concat(progress)); // }
      } else if (status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY && videoPaused) {
        //播放
        // if (this.videoStatus.actionTimes.play != 0) {
        //   //上一次还没有收到回调
        //   this.elkLog.report('play_double_call', {
        //     file_id: this.videoStatus.fid,
        //     extra_info: JSON.stringify({
        //       url: this.videoStatus.url,
        //       progress: progress,
        //       status: status
        //     })
        //   });
        // }
        // else {
        this.videoStatus.actionTimes.play = actionTime;
        this.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
        this.videoPlayer.play();
        setTimeout(function () {
          if (_this7) {
            if (_this7.videoStatus.actionTimes.play == actionTime) {
              console.log("video log: updateVideoStatus needPlay status ".concat(status, ", progress ").concat(progress, " miss callback"));

              _this7.elkLog.report('play_miss_callback', {
                file_id: _this7.videoStatus.fid,
                extra_info: JSON.stringify({
                  url: _this7.videoStatus.url,
                  progress: progress,
                  duration: _this7.videoStatus.duration
                })
              });

              _this7.store.setNeedDraw();
            }
          }
        }, 2000);
        action = 'video_status_update_play';
        console.log("video log: updateVideoStatus needPlay status ".concat(status, ", progress ").concat(progress)); // }
      } else if (status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PAUSE && videoPlayed) {
        //暂停
        // if (this.videoStatus.actionTimes.pause != 0) {
        //   //上一次还没有收到回调
        //   this.elkLog.report('pause_double_call', {
        //     file_id: this.videoStatus.fid,
        //     extra_info: JSON.stringify({
        //       url: this.videoStatus.url,
        //       progress: progress,
        //       status: status
        //     })
        //   });
        // }
        // else {
        this.videoStatus.actionTimes.pause = actionTime;
        this.videoStatus.actions.pause = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
        this.videoPlayer.pause();
        setTimeout(function () {
          if (_this7) {
            if (_this7.videoStatus.actionTimes.pause == actionTime) {
              console.log("video log: updateVideoStatus needPause status ".concat(status, ", progress ").concat(progress, " miss callback"));

              _this7.elkLog.report('pause_miss_callback', {
                file_id: _this7.videoStatus.fid,
                extra_info: JSON.stringify({
                  url: _this7.videoStatus.url,
                  progress: progress,
                  duration: _this7.videoStatus.duration
                })
              });

              _this7.store.setNeedDraw();
            }
          }
        }, 2000);
        action = 'video_status_update_pause';
        console.log("video log: updateVideoStatus needPause status ".concat(status, ", progress ").concat(progress)); // }
      }
    }

  if (action != null) {
    this.elkLog.report(action, {
      file_id: this.videoStatus.fid,
      extra_info: JSON.stringify({
        url: this.videoStatus.url,
        progress: progress,
        duration: this.videoStatus.duration
      })
    });
  }
};

Board.prototype.showVideoControl = function (show) {
  this.isShowVideoControl = show;

  if (this.videoPlayer) {
    this.videoPlayer.controls(show);
  }
};

Board.prototype.removeTCPlayerControl = function () {
  //直播tcplayer
  // var controlPanel = this.videoDiv.getElementsByClassName("vcp-controls-panel")[0];
  // controlPanel && controlPanel.remove();
  // var bigPlay = this.videoDiv.getElementsByClassName("vcp-bigplay")[0];
  // bigPlay && bigPlay.remove();
  // var loading = this.videoDiv.getElementsByClassName("vcp-loading")[0];
  // loading && loading.remove();
  // var volume = this.videoDiv.getElementsByClassName("vcp-volume")[0];
  // volume && volume.remove();
  //点播tcplayer
  // var vjsControlBar = this.videoDiv.getElementsByClassName("vjs-control-bar")[0];
  // vjsControlBar && vjsControlBar.remove();
  // var vjsBigPlay = this.videoDiv.getElementsByClassName("vjs-big-play-button")[0];
  // vjsBigPlay && vjsBigPlay.remove();
  // var vjsError = this.videoDiv.getElementsByClassName("vjs-error-display")[0];
  // vjsError && vjsError.remove();
  this.resetVideoJSControl();
};

Board.prototype.resetVideoJSControl = function () {
  if (this.videoPlayer) {
    if (this.videoPlayer.bigPlayButton) {
      this.videoPlayer.bigPlayButton.hide();
    }

    if (this.videoPlayer.controlBar) {
      //初始化后展示控制栏
      this.videoPlayer.controlBar.addClass('tiw-vjs-control-bar');

      if (this.videoPlayer.controlBar.liveDisplay) {
        this.videoPlayer.controlBar.liveDisplay.hide();
      }

      if (this.videoPlayer.controlBar.seekToLive) {
        this.videoPlayer.controlBar.seekToLive.hide();
      }

      if (this.videoPlayer.controlBar.fullscreenToggle) {
        this.videoPlayer.controlBar.fullscreenToggle.hide();
      }

      if (this.videoPlayer.controlBar.pictureInPictureToggle) {
        this.videoPlayer.controlBar.pictureInPictureToggle.hide();
      }

      if (this.videoPlayer.errorDisplay) {
        this.videoPlayer.errorDisplay.hide();
      }
    }
  }
};

Board.prototype.playVideo = function () {
  this.videoStatus.actions.play = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.API;
  this.videoPlayer && this.videoPlayer.play();
  this.elkLog.report('play_video', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.pauseVideo = function () {
  this.videoStatus.actions.pause = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.API;
  this.videoPlayer && this.videoPlayer.pause();
  this.elkLog.report('pause_video', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.seekVideo = function (time) {
  this.videoStatus.actions.seek = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.API;
  this.videoPlayer && this.videoPlayer.currentTime(time);
  this.elkLog.report('seek_video', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.muteVideo = function (muted) {
  this.videoTag && (this.videoTag.muted = muted);
  this.elkLog.report('mute_video', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.setSyncVideoStatusEnable = function (sync) {
  this.isSyncVideoStatus = sync;
};

Board.prototype.startSyncVideoStatus = function (interval) {
  var _this8 = this;

  if (!this.videoStatus.isLoaded) {
    return;
  }

  if (this.syncVideoStatusTimer) {
    clearInterval(this.syncVideoStatusTimer);
    this.syncVideoStatusTimer = null;
  }

  this.syncVideoStatusTimer = setInterval(function () {
    _this8.store.updateVideo(_this8.videoStatus.fid, _this8.videoStatus.preStatus, _this8.videoPlayer.currentTime());
  }, interval * 1000);
  this.elkLog.report('start_video_sync_timer', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url,
      interval: interval
    })
  });
};

Board.prototype.stopSyncVideoStatus = function () {
  if (this.syncVideoStatusTimer) {
    clearInterval(this.syncVideoStatusTimer);
  }

  this.elkLog.report('stop_video_sync_timer', {
    file_id: this.videoStatus.fid,
    extra_info: JSON.stringify({
      url: this.videoStatus.url
    })
  });
};

Board.prototype.renderVideo = function (fileInfo) {
  var _this9 = this;

  var fid = fileInfo.fid;
  var type = fileInfo.type;
  var downloadURL = fileInfo.downloadURL;
  var isVodVideo = type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VODFILE && downloadURL != null;
  var isNormalVideo = (type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VOD || type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.LIVE) && downloadURL != null;

  if (isVodVideo || isNormalVideo) {
    var status = fileInfo.status || 0;
    var progress = fileInfo.progress || 0;

    if (this.videoStatus.isLoaded && status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY) {
      var before = progress;
      var currentTime = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
      progress = Math.floor((currentTime - fileInfo.timestamp) / 1000 + progress);

      if (Math.floor(before) != Math.floor(progress)) {
        console.log("video log: renderVideo fix progress before ".concat(before, " time ").concat(fileInfo.timestamp, ", after ").concat(progress, " time ").concat(currentTime));
        this.elkLog.report("video_fix_progress", {
          file_id: this.videoStatus.fid,
          extra_info: JSON.stringify({
            url: this.videoStatus.url,
            before: before,
            beforeTime: fileInfo.timestamp,
            after: progress,
            currentTime: currentTime
          })
        });
      }
    }

    console.log("video log: renderVideo status ".concat(status, ", progress ").concat(progress));

    if (this.videoStatus.fid != fid) {
      //切换文件
      this.resetVideoStatus();
      this.stopSyncVideoStatus();

      if (isNormalVideo) {
        //被动创建
        this.videoStatus.fid = fid;
        this.videoStatus.url = downloadURL;
        this.videoStatus.format = this.getVideoFormat(downloadURL);
        this.videoStatus.type = this.getVideoType(downloadURL);
        this.videoStatus.actions.create = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
        this.store.addVideoFile(fid, downloadURL, this.width, this.height, this.videoStatus.type);
        this.createVideo(fid, downloadURL);
      } else if (isVodVideo) {
        this.videoStatus.fid = fid;
        this.videoStatus.url = downloadURL;
        this.videoStatus.type = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VODFILE;
        this.videoStatus.actions.create = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
        var ids = this.splitVodVideoOption(downloadURL);
        this.store.addVideoFile(fid, downloadURL, this.width, this.height, this.videoStatus.type);

        if (ids.hasExt == "true") {
          this.event.fire(this, 'TEB_VODEXTPARAM', {
            fileId: fid,
            appId: ids.appId,
            vodId: ids.vodId
          });
        } else {
          this.createVodVideo(fid, downloadURL);
        }
      }
    } else {
      //从非视频文件切回来
      this.videoDiv.style.display = "block";
    }

    if (!this.videoStatus.isLoaded) {
      console.log('video log: renderVideo video not loaded');
      return;
    }

    if (this.videoStatus.preStatus == status && parseInt(this.videoStatus.preProgress) == parseInt(progress)) {
      console.log('video log: renderVideo status and progress not changed'); //状态未改变

      return;
    } //状态保存
    // if (type == Config.FILE_TYPE.VOD) {
    //检查是否成功获取到视频时长


    if (this.videoStatus.duration == 0) {
      this.elkLog.report("video_get_duration", {
        file_id: this.videoStatus.fid,
        extra_info: JSON.stringify({
          url: this.videoStatus.url
        })
      });
      this.videoStatus.duration = this.videoPlayer.duration() || 0;

      if (this.videoStatus.duration == 0) {
        console.log('video log: get duration failed retry');
        setTimeout(function () {
          _this9.store.setNeedDraw();
        }, 500);
        return;
      }
    } //点播支持进度控制


    if (status == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PLAY && parseInt(progress) >= parseInt(this.videoStatus.duration)) {
      //视频结束，停留最后一帧
      progress = parseInt(this.videoStatus.duration);
      status = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_STATUS.PAUSE;
      console.log("video log: renderVideo fix status ".concat(status, ", progress ").concat(progress));
      this.elkLog.report("video_fix_progress", {
        file_id: this.videoStatus.fid,
        extra_info: JSON.stringify({
          url: this.videoStatus.url,
          progress: progress
        })
      });
    } // }
    //更新状态


    this.updateVideoStatus(status, progress, type);
  } else {
    //切换到非视频文件，暂停现有的文件
    this.resetVideoStatus();

    if (this.videoPlayer) {
      this.videoDiv.style.display = "none";
      this.videoStatus.actions.pause = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.PASSIVE;
      this.videoPlayer.pause();
    }
  }
};
/**
 * 渲染H5动画PPT
 */


Board.prototype.renderH5PPT = function (fileInfo) {
  var isRenderFace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var type = fileInfo.type || _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.IMG;
  var downloadURL = fileInfo.downloadURL;
  var currentPageIndex = fileInfo.currentPageIndex;
  var currentPageStep = fileInfo.currentPageStep;
  var fid = fileInfo.fid;

  if (this.getCurrentFile() != _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_GROUP) {
    // 如果不是默认白板组
    var originSrc = this.iframeDOM.getAttribute('src') || '';

    if (type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5PPT && downloadURL) {
      var originPath = '';

      if (originSrc && originSrc.indexOf('?') > -1) {
        originPath = originSrc.substring(0, originSrc.indexOf('?'));
      } else {
        originPath = originSrc;
      }

      var downloadPath = '';

      if (downloadURL.indexOf('?') > -1) {
        downloadPath = downloadURL.substring(0, downloadURL.indexOf('?'));
      } else {
        downloadPath = downloadURL;
      }

      if (originPath != downloadPath) {
        this.iframeDOM.removeAttribute('src');
        var url = fileInfo.downloadURL;

        if (url.indexOf('?') > -1) {
          url += "&page=".concat(currentPageIndex, "&step=").concat(currentPageStep, "&fid=").concat(encodeURIComponent(fid));
        } else {
          url += "?page=".concat(currentPageIndex, "&step=").concat(currentPageStep, "&fid=").concat(encodeURIComponent(fid));
        }

        this.elkLog.report('iframe_start_load', {
          file_id: fid,
          extra_info: url
        });
        this.iframeDOM.setAttribute('src', url);
        this.isRenderFace = isRenderFace; // 正在首屏渲染

        this.preloadTriggered = true;
      }
    } else {
      this.resetPPTIframe();
    }
  } else {
    if (this.iframeDOM.src) {
      this.resetPPTIframe();
    }
  }
};
/**
 * 渲染背景色
 */


Board.prototype.renderBackgroundColor = function (backgroundColor, fileInfo) {
  var type = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.IMG;

  if (fileInfo) {
    type = fileInfo.type;
  } // if (this.getCurrentFile() == Config.COMMON_GROUP) { // 如果是默认白板组
  //   // 有正常的背景色
  //   if (backgroundColor) {
  //     this.bgDiv.setAttribute('style', `z-index:4;position:absolute; top:0; left:0;background-color:${backgroundColor};width:${this.width}px;height:${this.height}px;`)
  //   } else {
  //     this.bgDiv.setAttribute('style', 'z-index:4;position:absolute; top:0; left:0;');
  //   }
  // } else { // 如果不是默认白板组
  //   if (type == Config.FILE_TYPE.IMG) {
  //     // 有正常的背景色
  //     if (backgroundColor) {
  //       this.bgDiv.setAttribute('style', `z-index:4;position:absolute; top:0; left:0;background-color:${backgroundColor};width:${this.width}px;height:${this.height}px;`)
  //     } else {
  //       this.bgDiv.setAttribute('style', 'z-index:4;position:absolute; top:0; left:0;');
  //     }
  //   } else {
  //     this.bgDiv.setAttribute('style', 'z-index:4;position:absolute; top:0; left:0;');
  //   }
  // }
  // 有正常的背景色


  if (backgroundColor) {
    this.bgDiv.setAttribute('style', "z-index:4 !important;position:absolute !important; top:0 !important; left:0 !important;background-color:".concat(backgroundColor, " !important;width:").concat(this.width, "px !important;height:").concat(this.height, "px !important;"));
  } else {
    this.bgDiv.setAttribute('style', 'z-index:4 !important;position:absolute !important; top:0 !important; left:0 !important;');
  }
};

Board.prototype.drawData = function (data, ctx) {
  var _this10 = this;

  var self = this; // 画圆

  var bezierEllipse = function bezierEllipse(context, x, y, a, b, fill, color) {
    var k = .5522848,
        ox = a * k,
        // 水平控制点偏移量
    oy = b * k; // 垂直控制点偏移量

    context.beginPath(); //从椭圆的左端点开始顺时针绘制四条三次贝塞尔曲线

    context.moveTo(x - a, y);
    context.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);
    context.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);
    context.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);
    context.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);
    context.closePath();
    context.stroke();

    if (fill) {
      context.fillStyle = color;
      context.fill();
    }
  }; //去掉多余排序
  // data = data.sort((item1, item2) => {
  //   return item1.seq - item2.seq;
  // });


  var straightLine = function straightLine(context, fromX, fromY, toX, toY, width, color, style) {
    //画直线
    context.beginPath();
    context.moveTo(fromX, fromY);
    context.lineTo(toX, toY);
    context.strokeStyle = color;
    context.lineWidth = width;
    context.lineCap = "round";

    if (style.lineType == _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_25__["default"].TEDU_BOARD_LINE_TYPE_DOTTED) {
      //画虚线
      var seg = 100.0 / 10000 * self.width + width;
      context.setLineDash && context.setLineDash([seg, seg]);
    }

    context.stroke(); //重制虚线设置

    context.setLineDash && context.setLineDash([]); //箭头

    if (style.startArrowType != _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__["default"].TEDU_BOARD_ARROW_TYPE_NONE || style.endArrowType != _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__["default"].TEDU_BOARD_ARROW_TYPE_NONE) {
      var headLen = width + 200.0 / 10000 * self.width;
      var theta = 25;
      var angle = Math.atan2(toY - fromY, toX - fromX) * 180 / Math.PI;
      var angle1 = (angle - theta) * Math.PI / 180;
      var angle2 = (angle + theta) * Math.PI / 180;
      var topX = headLen * Math.cos(angle1);
      var topY = headLen * Math.sin(angle1);
      var botX = headLen * Math.cos(angle2);
      var botY = headLen * Math.sin(angle2);

      if (style.endArrowType == _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__["default"].TEDU_BOARD_ARROW_TYPE_NORMAL) {
        //普通箭头
        context.beginPath();
        context.moveTo(toX - topX, toY - topY);
        context.lineTo(toX, toY);
        context.lineTo(toX - botX, toY - botY);
        context.stroke();
      } else if (style.endArrowType == _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__["default"].TEDU_BOARD_ARROW_TYPE_SOLID) {
        //实体箭头
        context.beginPath();
        context.moveTo(toX - topX, toY - topY);
        context.lineTo(toX, toY);
        context.lineTo(toX - botX, toY - botY);
        context.closePath();
        context.fillStyle = color;
        context.fill();
        context.stroke();
      }

      if (style.startArrowType == _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__["default"].TEDU_BOARD_ARROW_TYPE_NORMAL) {
        //普通箭头
        context.beginPath();
        context.moveTo(fromX + topX, fromY + topY);
        context.lineTo(fromX, fromY);
        context.lineTo(fromX + botX, fromY + botY);
        context.stroke();
      } else if (style.startArrowType == _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_26__["default"].TEDU_BOARD_ARROW_TYPE_SOLID) {
        //实体箭头
        context.beginPath();
        context.moveTo(fromX + topX, fromY + topY);
        context.lineTo(fromX, fromY);
        context.lineTo(fromX + botX, fromY + botY);
        context.closePath();
        context.fillStyle = color;
        context.fill();
        context.stroke();
      }
    }
  }; // 激光笔


  if (this.store.getLaserDraw() || this.store.getNeedDraw()) {
    var curLength = this.store.laserData.length;

    if (curLength > 0) {
      var laser = null;

      if (this.store.getNeedDraw()) {
        //全局更新
        laser = this.store.laserData[curLength - 1];
        this.store.laserData = [];
        this.store.laserData.push(laser);
      } else {
        if (curLength == 1) {
          // 保证布局更新canvas清空后有数据绘制
          laser = this.store.laserData[0];
        } else {
          laser = this.store.laserData.shift();
        }
      }

      this.drawLaser(laser); // 在store有多队列触发渲染激光笔，也有激光笔和涂鸦混合的也会触发激光笔渲染，所以需要记录一个最大的seq

      if (this.store.laserData.length != 0 && curLength != 1) {
        //如果是最后一个点重绘，不触发定时器
        setTimeout(function () {
          _this10.store.setLaserDraw(true);
        }, 0);
      }
    }
  }

  if (this.store.getNeedDraw() || this.store.getIncreasingDraw() || this.store.getPartDraw()) {
    data.forEach(function (item) {
      var x, y;

      if (item.type === 'line' && item.show) {
        // 画线
        self.drawLine(ctx, item);
      } else if (item.type == 'raser' && item.status) {// 画激光笔
      } else if (item.type == 'select' && item.show) {
        // 画选框
        ctx.setLineDash && ctx.setLineDash([15, 5]);
        ctx.lineWidth = 1;
        ctx.strokeStyle = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].dealColor(_config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].COLOR.RED);
        ctx.strokeRect(item.startInfo.x / 10000 * self.width, item.startInfo.y / 10000 * self.height, (item.location.x - item.startInfo.x) / 10000 * self.width, (item.location.y - item.startInfo.y) / 10000 * self.height);
        ctx.setLineDash && ctx.setLineDash([]);
      } else if (item.type == 'graph' && item.show) {
        // 画图形
        var lineWidth = item.thin / 10000 * self.height;

        if (item.graph == 'line') {
          // 画直线
          if (item.style) {
            straightLine(ctx, item.startPoint.x / 10000 * self.width, item.startPoint.y / 10000 * self.height, item.endPoint.x / 10000 * self.width, item.endPoint.y / 10000 * self.height, Math.max(lineWidth, self.minLineWidth), item.color, item.style);
          } else {
            ctx.beginPath();
            ctx.moveTo(item.startPoint.x / 10000 * self.width, item.startPoint.y / 10000 * self.height);
            ctx.lineTo(item.endPoint.x / 10000 * self.width, item.endPoint.y / 10000 * self.height);
            ctx.strokeStyle = item.color;
            ctx.lineWidth = Math.max(lineWidth, self.minLineWidth);
            ctx.lineCap = "round";
            ctx.stroke();
          }
        } else if (item.graph == 'rect') {
          // 画矩形
          // 先确定左上角
          x = item.startPoint.x > item.endPoint.x ? item.endPoint.x : item.startPoint.x;
          y = item.startPoint.y > item.endPoint.y ? item.endPoint.y : item.startPoint.y;
          ctx.strokeStyle = item.color;
          ctx.lineWidth = Math.max(lineWidth, self.minLineWidth);

          if (item.solid) {
            // 实心
            ctx.fillStyle = item.color;
            ctx.fillRect(x / 10000 * self.width, y / 10000 * self.height, Math.abs(item.startPoint.x - item.endPoint.x) / 10000 * self.width, Math.abs(item.startPoint.y - item.endPoint.y) / 10000 * self.height);
          } else {
            ctx.strokeRect(x / 10000 * self.width, y / 10000 * self.height, Math.abs(item.startPoint.x - item.endPoint.x) / 10000 * self.width, Math.abs(item.startPoint.y - item.endPoint.y) / 10000 * self.height);
          }
        } else if (item.graph == 'circle' || item.graph == 'oval') {
          // 画圆形或者椭圆
          x = (item.startPoint.x + item.endPoint.x) / 2 / 10000 * self.width;
          y = (item.startPoint.y + item.endPoint.y) / 2 / 10000 * self.height;
          var a = Math.abs(item.startPoint.x - item.endPoint.x) / 2 / 10000 * self.width;
          var b = Math.abs(item.startPoint.y - item.endPoint.y) / 2 / 10000 * self.height;
          ctx.strokeStyle = item.color;
          ctx.lineWidth = Math.max(lineWidth, self.minLineWidth);
          bezierEllipse(ctx, x, y, a, b, item.solid, item.color);
          ctx.stroke();
        }
      } else if (item.type == 'inputtext') {
        // 画Text文字输入
        _this10.renderTextTool(item);
      } else if (item.type == 'imageElement') {
        // 渲染图片元素
        _this10.renderImageElement(item);
      } else if (item.type == 'element') {
        if (item.subType === _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ELEMENT_H5) {
          // h5 web元素
          _this10.renderH5WebElement(item);
        }
      }
    });
  }

  if (self.store.getSelectList().length > 0) {
    var imageElements = [];

    for (var i = 0, len = self.store.getSelectList().length; i < len; i++) {
      var item = self.store.getSelectList()[i];

      if (item.type === 'imageElement') {
        imageElements.push(item);
      }
    }

    if (imageElements.length) {
      this.cursorLayerWrap.style.zIndex = 100;
      this.teduBoardCursorLayer.showSelectLayer(imageElements);
    } else {
      this.cursorLayerWrap.style.zIndex = 0;
    }

    var selectArea = self.store.getSelectArea();
    ctx.strokeStyle = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].dealColor(_config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].COLOR.RED);
    ctx.setLineDash && ctx.setLineDash([15, 5]);
    ctx.lineWidth = 1;
    ctx.strokeRect(selectArea.x / 10000 * self.width, selectArea.y / 10000 * self.height, selectArea.width / 10000 * self.width, selectArea.height / 10000 * self.height);
    ctx.setLineDash && ctx.setLineDash([]);
  } else {
    this.cursorLayerWrap.style.zIndex = 0;
  } // 移除图片元素


  this.removeImageElement(); // 移除文字工具

  this.removeTextTool(); // 移除H5WebElement

  this.removeH5WebElement();
};
/**
 * 渲染图片元素
 * @param {*} item
 */


Board.prototype.renderImageElement = function (item) {
  if (item.show) {
    this.imageElementMapData['' + item.belongSeq] = item;
    item.setBoardSize(this.width, this.height);
    item.renderTo(this.imageElementWrap);
  } else {
    item.remove();
    delete this.imageElementMapData['' + item.belongSeq];
  }
};

Board.prototype.removeImageElement = function () {
  var isRemoveCurrentBoard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var currentBoard = this.getCurrentBoard();

  for (var belongSeq in this.imageElementMapData) {
    var item = this.imageElementMapData[belongSeq];

    if (isRemoveCurrentBoard && item.boardId == currentBoard || !isRemoveCurrentBoard && item.boardId != currentBoard) {
      item.remove();
      delete this.imageElementMapData['' + item.belongSeq];
    }
  }
};
/**
 * 渲染文本
 * @param {*} item
 */


Board.prototype.renderTextTool = function (item) {
  var _this11 = this;

  if (item.show) {
    var textAreaComponent;
    var textareaEl = document.getElementById("tic-textarea__".concat(item.belongSeq));
    var fontSize = 12;
    var fontScale = item.textSize / 10000 * this.height / 12; // 基于12号字体的放大系数

    if (textareaEl) {
      textAreaComponent = this.textAreaComponentMap[item.belongSeq];
    } else {
      textAreaComponent = new _TextAreaComponent__WEBPACK_IMPORTED_MODULE_34__["default"]({
        boardId: this.getCurrentBoard(),
        board: this
      });
      textAreaComponent.createElement(this.textAreaBox);
      textAreaComponent.initEvent({
        onfocus: function onfocus(component, dragOffsetX, dragOffsetY, scale) {
          _this11.textAreaFocusBlurStatus['focus'] = component; // 文字输入状态（focus态）

          _this11.textInputStatus = 1;

          _this11.store.updateDragDataFromTextTool(dragOffsetX, dragOffsetY, scale);

          _this11.draw();
        },
        oninput: function oninput(component, dragOffsetX, dragOffsetY, scale) {
          // 文字输入状态（focus态）
          _this11.textInputStatus = 1;
          var text = component.dom.value;

          _this11.store.collectTextInputData().inputting(component, component.textItem, text, component.dom.clientWidth, component.dom.clientHeight);

          _this11.store.updateDragDataFromTextTool(dragOffsetX, dragOffsetY, scale);

          _this11.draw();
        },
        onblur: function onblur(component) {
          if (_this11.textAreaFocusBlurStatus['focus'] === component) {
            _this11.textAreaFocusBlurStatus['focus'] = null;
          } // 文字输入状态（blur态）


          _this11.textInputStatus = 0; // 失去焦点时候绘制全部数据到canvas上

          _this11.store.cancelSelect();

          var text;

          if (component.dom) {
            text = component.dom.value;
          }

          if (text) {
            _this11.store.collectTextInputData().draw(component, component.textItem, text, component.dom.clientWidth + 12, component.dom.clientHeight);
          } else {
            delete _this11.textAreaComponentMap[component.textItem.belongSeq];

            _this11.store.collectTextInputData().clearTask();
          }
        },
        onresize: function onresize(component) {
          if (component.textItem) {}
        }
      });
    }

    this.textAreaComponentMap[item.belongSeq] = textAreaComponent;

    if (textAreaComponent) {
      textAreaComponent.setBoardContainerSize(this.width, this.container.offsetWidth, this.height, this.container.offsetHeight);
      textAreaComponent.setTextItem(item);
      textAreaComponent.setPosition(item.location.x / 10000 * this.width, item.location.y / 10000 * this.height);
      textAreaComponent.setFontSize(fontSize);
      textAreaComponent.setMaxSize();
      textAreaComponent.setFontScale(fontScale);
      textAreaComponent.setSize();
    }
  } else {
    if (this.textAreaComponentMap[item.belongSeq]) {
      this.textAreaComponentMap[item.belongSeq].dom.blur();
      this.textAreaComponentMap[item.belongSeq].remove();
    }

    delete this.textAreaComponentMap[item.belongSeq];
  }
};

Board.prototype.removeTextTool = function () {
  var currentBoard = this.getCurrentBoard();

  for (var belongSeq in this.textAreaComponentMap) {
    var item = this.textAreaComponentMap[belongSeq];

    if (item && item.boardId != currentBoard) {
      var component = this.textAreaFocusBlurStatus['focus'];

      if (component === item) {
        item.dom && item.dom.blur();
      }

      item.remove();
      delete this.textAreaComponentMap['' + item.belongSeq];
    }
  }
}; // 同步白板数据


Board.prototype.getBoardData = function () {
  return JSON.parse(JSON.stringify(this.store.getData()));
}; // 处理历史消息 和普通的不一样


Board.prototype.addHistory = function (data) {
  this.store.addHistory(data);
}; // 设置内容data


Board.prototype.addData = function (data) {
  var _this12 = this;

  if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isString(data)) {
    try {
      data = JSON.parse(data);
    } catch (error) {
      this.event.fire(this, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__["default"].TEDU_BOARD_WARNING_SYNC_DATA_PARSE_FAILED, error.message + ', ' + data);
    }
  }

  if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isUndefined(data.avsdk_time)) {
    // 如果是对时消息，不是白板消息，则直接return
    return;
  }

  try {
    if (this.enableSyncTime) {
      var operator = data.value.operator;
      this.checkUserTime(operator);
      this.userTime[operator].imTimeOffset = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - data.timestamp;
      var offset = this.userTime[operator].avTimeOffset - this.userTime[operator].imTimeOffset;

      if (offset > 0) {
        setTimeout(function () {
          _this12.store && _this12.store.addData(data);
        }, offset);
      } else {
        this.store.addData(data);
      }
    } else {
      this.store.addData(data);
    }
  } catch (error) {
    // 上报接收到的数据
    this.elkLog.report('addData', {
      action_result: -1,
      extra_info: JSON.stringify({
        data: data,
        stack: error.stack,
        message: error.message
      })
    });
  }
};
/**
 * 删除白板，支持单个白板或者一个白板数组
 * @param {String|Array} boardId
 * @returns {Array} 删除的白板数组
 */


Board.prototype.deleteBoard = function () {
  var boardId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.store.getCurrentBoard();
  this.aegis.report('deleteBoard', {
    module: 'board',
    boardId: boardId
  }); // 主动失去焦点

  this.inputBlur();
  var fid = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].boardId2Fid(boardId);

  if (fid == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_GROUP) {
    this.store.deleteBoard(boardId);
  } else {
    console.log('文件类白板不能删除');
  }
};
/**
 * 返回白板列表
 * @returns {Array} 返回白板列表
 */


Board.prototype.getBoardList = function () {
  return JSON.parse(JSON.stringify(this.store.getBoardList()));
};
/**
 * 返回白板背景图片列表
 * @returns {Array} 返回白板背景图片列表
 */


Board.prototype.getBoardPicList = function () {
  return JSON.parse(JSON.stringify(this.store.getBoardPicList()));
};
/**
 * 返回当前白板
 */


Board.prototype.getCurrentBoard = function () {
  return this.store.currentBoard;
};
/**
 * 获取当前白板所处的分组/文件
 */


Board.prototype.getCurrentFile = function () {
  return this.store.getCurrentFile();
}; // 增加一个白板，并初始化白板数据


Board.prototype.addBoard = function () {
  // 主动失去焦点
  this.inputBlur();

  if (this.store.getCurrentFile() != _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_GROUP) {
    this.store.switchFile(_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_GROUP);
  }

  return this.store.switchBoard();
};

Board.prototype.switchBoard = function (boardId, resetStep) {
  var _this13 = this;

  this.aegis.report('switchBoard', {
    module: 'board',
    boardId: boardId,
    resetStep: resetStep
  }); // 主动失去焦点

  this.inputBlur();

  if (this.getBoardList().indexOf(boardId) === -1) {
    boardId = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_DEFAULT_BOARD;
  }

  if (boardId) {
    var fid = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].boardId2Fid(boardId);
    var fileInfo = this.getFileInfo(fid);

    if (fileInfo.type === _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5PPT) {
      // 如果是H5的PPT
      var boards = this.getBoardByGroup(fid);
      var slideIndex = boards.indexOf(boardId);
      _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].gotoTimestampNew(this.iframeDOM, {
        slideIndex: slideIndex,
        resetStep: resetStep,
        isPassive: false // 主动翻页（发起）

      });
    } else {
      // 如果是普通文件
      this.store.switchBoard(boardId);
    }
  } else {
    clearTimeout(this.bgH5LoadTask);
    this.backgroundIFrameManager.remove(this.boardBox);
    this.bgH5LoadTask = setTimeout(function () {
      _this13.store.switchBoard(boardId);
    }, 50);
  }
};
/**
 * 要跳转的页数索引
 */


Board.prototype.switchPage = function () {
  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return this.store.switchPage(index);
};
/**
 * 要跳转的页数索引
 */
// Board.prototype.switchStep = function (step) {
//   this.store.switchStep(step);
// }


Board.prototype.prevBoard = function (resetStep) {
  // 主动失去焦点
  this.inputBlur();
  var file = this.getFileInfo(this.getCurrentFile()); // 当前文件信息

  var boards = this.getBoardByGroup(this.getCurrentFile()); // 当前文件信息

  if (file.currentPageIndex < 1) {// 第一页，啥都不做
  } else {
    this.switchBoard(boards[file.currentPageIndex - 1], resetStep);
  }
};
/**
 * @description 上一步
 */


Board.prototype.prevStep = function () {
  var fileInfo = this.store.getFileInfo(this.store.getCurrentFile());

  if (fileInfo.type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5PPT) {
    // 主动失去焦点
    this.inputBlur();
    _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].gotoPreviousStep(this.iframeDOM, {
      currentPageIndex: fileInfo.currentPageIndex,
      currentPageStep: fileInfo.currentPageStep
    });
  } else {
    this.prevBoard();
  }
};

Board.prototype.nextBoard = function (resetStep) {
  // 主动失去焦点
  this.inputBlur();
  var file = this.getFileInfo(this.getCurrentFile()); // 当前文件信息

  var boards = this.getBoardByGroup(this.getCurrentFile()); // 当前文件信息

  if (file.currentPageIndex < file.pageCount - 1) {
    this.switchBoard(boards[file.currentPageIndex + 1], resetStep);
  }
};
/**
 * @description 下一步
 */


Board.prototype.nextStep = function () {
  var fileInfo = this.store.getFileInfo(this.store.getCurrentFile());

  if (fileInfo.type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5PPT) {
    // 主动失去焦点
    this.inputBlur();
    _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].gotoNextStep(this.iframeDOM, {});
  } else {
    this.nextBoard();
  }
};
/**
 * 设置背景颜色
 * @param {Number} color 数字颜色，默认白色
 */


Board.prototype.setGlobalBackgroundColor = function (color) {
  this.store.setGlobalBackgroundColor(color);
};
/**
 * 设置背景颜色
 * @param {Number} color 数字颜色，默认白色
 */


Board.prototype.setBackgroundColor = function (color) {
  this.store.setBackgroundColor(color);
}; // 初始化


Board.prototype.init = function () {
  var _this14 = this;

  var self = this; // 上报init

  this.elkLog.report('init', {
    extra_info: JSON.stringify({
      option: this.option
    })
  }); // 初始化白板后，上报一次白板容器的大小

  this.reportContainerSize(); // 监听页面可见性

  this.visibilityChangeName = "visibilitychange";

  if (typeof document.hidden !== "undefined") {
    // hidden = "hidden";
    this.visibilityChangeName = "visibilitychange";
  } else if (typeof document.mozHidden !== "undefined") {
    // hidden = "mozHidden";
    this.visibilityChangeName = "mozvisibilitychange";
  } else if (typeof document.msHidden !== "undefined") {
    // hidden = "msHidden";
    this.visibilityChangeName = "msvisibilitychange";
  } else if (typeof document.webkitHidden !== "undefined") {
    // hidden = "webkitHidden";
    this.visibilityChangeName = "webkitvisibilitychange";
  }

  this.hidden = false;
  this.visibilityChangeBind = this.visibilityChange.bind(this);
  document.addEventListener(this.visibilityChangeName, this.visibilityChangeBind);
  this.windowResizeListenerBind = this.windowResizeListener.bind(this);
  window.addEventListener('resize', this.windowResizeListenerBind);
  this.windowMessageListenerBind = this.windowMessageListener.bind(this);
  window.addEventListener('message', this.windowMessageListenerBind, false);
  Board.prototype.renderCanvas = renderCanvas;
  this.renderCanvas();
  this.layout();
  clearTimeout(this.pregressTask);
  self.pregressTask = setTimeout(function () {
    if (self.store.isProgressEnable()) {
      self.progress.style.display = 'block';
    }
  }, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROGRESS_SHOW_DELAY);
  self.event.on('TEB_HISTROYDATA_SYNCCOMPLETED', function () {
    clearTimeout(self.pregressTask);
    self.progress.style.display = 'none';
  });
  self.event.on('draw_laser', function (laser) {
    _this14.drawLaser(laser);
  }); // 首屏渲染

  this.event.on('TEB_DRAW_FACE', function () {
    try {
      _this14.drawFace();
    } catch (error) {
      var stack = error.stack;
      var message = 'render face page：' + error.message;

      _this14.store.machineNotify('markdown', "\u767D\u677F\u6E32\u67D3\u9519\u8BEF\n                \n>version\uFF1A<font color=\"#ff0000\">".concat(_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VERSION, "</font>\n                \n>sdkAppId\uFF1A<font color=\"#ff0000\">").concat(_this14.option.sdkAppId, "</font>\n                \n>userId\uFF1A<font color=\"#ff0000\">").concat(_this14.option.userId, "</font>\n                \n>classId\uFF1A<font color=\"#ff0000\">").concat(_this14.option.classId, "</font>\n                \n>\u4FE1\u606F\uFF1A<font color=\"#ff0000\">").concat(message, "</font>\n                \n>\u5806\u6808\uFF1A<font color=\"#ff0000\">").concat(stack, "</font>"));

      console.error('drawerror', error.message);

      _this14.elkLog.report('drawerror', {
        boardid: _this14.store.getCurrentBoard(),
        extra_info: JSON.stringify({
          stack: stack,
          message: message
        })
      });
    }
  }); // window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
  // window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
  // window.requestAnimationFrame(this.render.bind(this));

  this.drawTimer = setInterval(function () {
    _this14.render();
  }, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].RENDER_INTERVAL); // this.drawTimer = setTimeout(() => {
  //   this.render();
  // }, Config.RENDER_INTERVAL);
  // 清空图片加载内容（修复连续加载两张一样的图片，不触发imagestatuschange）
  // this.event.on('TEB_GOTOBOARD', (boardId, fid) => {
  //   console.log('>>>>>>>>>>>>>>>>>> boardId', boardId, fid);
  //   if (this.img.getAttribute('src')) {
  //     this._displayImage();
  //   }
  // });

  var type, color, thin; // 是否是按下鼠标状态

  var onoff = false; // 开始位置

  var startx = -10;
  var starty = -10; // 当前位置

  var oldx = -10;
  var oldy = -10; // 控制点

  var cpx = -10;
  var cpy = -10; // 激光笔

  var preRaserTimestamp = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
  var raserCount = 0;
  var ignoreRaserCount = 0;
  var inCanvas = false; // 鼠标是否在canvas内

  var isTouchUp = true; // 点击是否有弹起操作（弹起是相当于全局弹起） （默认弹起）

  var ctx = this.el.getContext("2d");

  function renderCanvas() {
    var _this15 = this;

    var groupTemplate = new _GroupTemplate__WEBPACK_IMPORTED_MODULE_23__["default"]();
    this.container.innerHTML = "<div class=\"tx_board_canvas_wrap\">".concat(groupTemplate.getTemplate(), "</div>");
    this.boardWrap = this.container.getElementsByClassName('tx_board_canvas_wrap')[0];
    this.boardBox = this.container.getElementsByClassName('tx_board_canvas_box')[0];
    this.keyboardinput = this.container.getElementsByTagName('textarea')[0];
    this.el = this.container.getElementsByTagName('canvas')[0]; // 渲染涂鸦的canvas

    this.laserCanvas = this.container.getElementsByTagName('canvas')[1]; // 渲染激光笔的canvas

    this.progress = this.container.getElementsByClassName('tic_board_bg_progress')[0];
    this.img = this.container.getElementsByClassName('tic_board_img_bg')[0];
    this.bgDiv = this.container.getElementsByClassName('tic_board_bg')[0]; // this.iframeDOM = this.container.getElementsByClassName('tic_iframe_H5')[0];

    this.videoDiv = document.getElementById('tic_video_wrap');
    this.imageElementWrap = this.container.getElementsByClassName('tic_board__imagewrap')[0];
    this.cursorLayerWrap = this.container.getElementsByClassName('tic_cursorlayer__wrap')[0]; // 鼠标层

    this.webviewWrap = this.container.getElementsByClassName('tiw_board_webview_wrap')[0]; // 

    this.progress.src = this.progressBarUrl; // 设置loading图标的src

    this.teduBoardCursorLayer = new _model_TEduBoardCursorLayer__WEBPACK_IMPORTED_MODULE_32__["default"](this.cursorLayerWrap, {
      // 使用函数节流
      onmousemove: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].debounce(function (imageElements) {
        _this15.store.updateImageElements(imageElements);
      }, 100),
      ontouchstart: function ontouchstart() {
        if (_this15.touchID === null) {
          _this15.touchID = 0;
        }
      },
      ontouchend: function ontouchend() {
        _this15.touchID = null;
      },
      ontouchcancel: function ontouchcancel() {
        _this15.touchID = null;
      }
    });
    this.resetPPTIframe(); // 文本编辑工具容器

    this.textAreaBox = this.container.getElementsByClassName('tic_board_textbox')[0];
    this.el.getContext('2d').translate(0.5, 0.5);
    this.laserCanvas && this.laserCanvas.getContext('2d').translate(0.5, 0.5);
    this.draw();
    document.body.addEventListener("mouseup", this.mouseupUpdateCursor = function (e) {
      isTouchUp = true; // 鼠标弹起

      onoff = false;

      _this15.updateCursor(); // 更新鼠标样式

    }, false);
    window.addEventListener("mouseup", this.mouseupUpdateCursor, false);
    this.boardWrap.addEventListener("click", function (e) {
      stopDefaultEvent(e);

      if (!_this15.isDrawEnable()) {
        return;
      }

      var eventLocation = _this15.getEventLocation(e);

      if (eventLocation.x == -1000000 && eventLocation.y == -1000000) {
        return;
      }

      if (_this15.store.getType() == 'mouse') {
        _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].sendMouseEvent(_this15.iframeDOM, {
          type: e.type,
          x: eventLocation.x,
          y: eventLocation.y,
          touch: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTouch(e)
        });
        return;
      }
    }, false);
    this.boardWrap.addEventListener("mousedown", function (e) {
      _this15.isTouchType = 'mouse';

      try {
        down.apply(_this15, [e]);
      } catch (error) {
        console.error('mousedown', error.message);

        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'mousedown',
            error: error.message,
            stack: error.stack
          })
        });
      }
    }, false);
    this.boardWrap.addEventListener("mousemove", function (e) {
      _this15.isTouchType = 'mouse';

      try {
        mouseMove.apply(_this15, [e]);
      } catch (error) {
        console.error('mousemove', error.message);

        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'mousemove',
            error: error.message,
            stack: error.stack
          })
        });
      }
    }, true);
    this.boardWrap.addEventListener("mouseup", function (e) {
      _this15.isTouchType = 'mouse';

      try {
        up.apply(_this15, [e]);
      } catch (error) {
        console.error('mouseup', error.message);

        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'mouseup',
            error: error.message,
            stack: error.stack
          })
        });
      }
    }, false);
    this.boardWrap.addEventListener("mouseleave", function (e) {
      _this15.isTouchType = 'mouse';

      try {
        over.apply(_this15, [e]);
      } catch (error) {
        console.error('mouseleave', error.message);

        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'mouseleave',
            error: error.message,
            stack: error.stack
          })
        });
      }
    }, false); // 增添Delete键盘监听

    document.body.addEventListener("keydown", this.keydownBodyEvent = function (e) {
      _this15.isTouchType = 'mouse';
      deleteContent.apply(_this15, [e]);
    }, false);
    var af = new alloyfinger__WEBPACK_IMPORTED_MODULE_24___default.a(this.boardWrap, {});
    af.on('touchStart', function (e) {
      _this15.isTouchType = 'finger';
      _this15.pinchScale = []; // 先清空

      try {
        down.apply(_this15, [e]);
      } catch (error) {
        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'touchStart',
            error: error.message,
            stack: error.stack
          })
        });
      }
    });
    af.on('touchMove', function (e) {
      _this15.isTouchType = 'finger';

      try {
        mouseMove.apply(_this15, [e]);
      } catch (error) {
        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'touchMove',
            error: error.message,
            stack: error.stack
          })
        });
      }
    });
    af.on('touchEnd', function (e) {
      _this15.isTouchType = 'finger';

      try {
        up.apply(_this15, [e]);
      } catch (error) {
        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'touchEnd',
            error: error.message,
            stack: error.stack
          })
        });
      }
    });
    af.on('touchCancel', function (e) {
      _this15.isTouchType = 'finger';

      try {
        over.apply(_this15, [e]);
      } catch (error) {
        _this15.elkLog.report('interaction', {
          extra_info: JSON.stringify({
            event: 'touchCancel',
            error: error.message,
            stack: error.stack
          })
        });
      }
    }); // 手指捏合

    af.on('pinch', function (evt) {
      _this15.isTouchType = 'finger';
      type = _this15.store.getType();

      if (type === 'zoom') {
        _this15.pinchScale.push(evt.zoom);
      }
    }); // 监听单击事件(onclick事件因为touch事件中阻止了默认行为)

    af.on('singleTap', function (e) {
      stopDefaultEvent(e);

      if (!_this15.isDrawEnable()) {
        return;
      }

      var eventLocation = _this15.getEventLocation(e, true);

      if (eventLocation.x == -1000000 && eventLocation.y == -1000000) {
        return;
      }

      if (_this15.store.getType() == 'mouse') {
        _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].sendMouseEvent(_this15.iframeDOM, {
          type: 'click',
          // 补一个click
          x: eventLocation.x,
          y: eventLocation.y,
          touch: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTouch(e)
        });
        return;
      }
    });
  }

  function stopDefaultEvent(e) {
    // 阻止默认事件
    if (e.preventDefault) {
      e.preventDefault();
    } else {
      e.returnValue = false;
    }
  }

  function down(e) {
    // 获取当前的涂鸦类型
    type = this.store.getType();
    color = this.store.getColor();
    thin = this.store.getThin();
    var self = this;
    stopDefaultEvent(e);

    if (!this.isDrawEnable()) {
      return;
    }

    var eventLocation = this.getEventLocation(e);
    inCanvas = true;
    onoff = true;
    isTouchUp = false; // 鼠标没有弹起

    if (eventLocation.x == -1000000 && eventLocation.y == -1000000) {
      return;
    } // 获取当前页的白板数据


    var fileInfo = this.getFileInfo(this.getCurrentFile());

    if (!fileInfo) {
      return;
    }

    if (type == 'mouse') {
      // this.nextStep();
      if (fileInfo.type === _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5PPT) {
        _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].sendMouseEvent(this.iframeDOM, {
          type: e.type,
          x: eventLocation.x,
          y: eventLocation.y,
          touch: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTouch(e)
        });
        return;
      } else if (fileInfo.fid === _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_GROUP) {
        // 如果是默认的白板分组
        this.nextBoard();
        return; // 选中的节点
        // let originZIndex = this.imageElementWrap.style.zIndex;
        // this.imageElementWrap.style.zIndex = 100;
        // let selectedEl = document.elementFromPoint(eventLocation.clientX, eventLocation.clientY);
        // if (selectedEl && selectedEl.dataset.imageElement) {
        //   let belongSeq = selectedEl.dataset.belongSeq;
        //   let imageElement = this.imageElementMapData['' + belongSeq];
        //   imageElement.focus();
        // } else {
        //   this.imageElementWrap.style.zIndex = originZIndex;
        // }
      } else if (fileInfo.type === _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.IMG) {
        // 如果是转图片方案的文件
        this.nextBoard();
        return;
      }
    } // 每次操作会影响 opData  从第一步起截止到目前的操作步数
    // 重置操作步骤,具体请看store.js说明


    this.store.resetOperation();
    cpx = -10;
    cpy = -10;
    oldx = startx = eventLocation.x;
    oldy = starty = eventLocation.y;
    this.dragStartX = eventLocation.clientX;
    this.dragStartY = eventLocation.clientY; // 类型是随便画

    if (type == 'line') {
      this.preLineTimestamp = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
      this.preLinePoint = {
        x: startx,
        y: starty
      };
      this.preSpeed = 0;
      this.preWidth = thin;
      this.pointCount = 0;
      this.ignorePointCount = 0;
      this.hasOptimizeStart = false;
      this.hasOptimizeEnd = true;
      this.store.collectRaserData().start(startx, starty, this.getToolType());
      this.updateCursor(); // 更新鼠标样式

      this.store.cancelSelect();

      if (!this.store.isHandwritingEnable()) {
        var lineWidth = Math.max(thin / 10000 * this.height, this.minLineWidth);
        ctx.beginPath();
        ctx.arc(startx / 10000 * this.width, starty / 10000 * this.height, lineWidth / 2, 0, Math.PI * 2, !0);
        ctx.fillStyle = color;
        ctx.fill();
        ctx.closePath();
      }

      this.store.collectLineData().start(startx, starty, this.store.isHandwritingEnable());
    } else if (type == 'eraser') {
      // 橡皮擦
      // 需要遍历全部的data 碰撞检测
      this.store.cancelSelect();
      this.store.collectEraserData(startx, starty);
    } else if (type == 'raser') {} else if (type == 'select') {
      // 判断是否要移动
      if (this.store.collectMoverData().beforeStart(startx, starty)) {
        this.isMoving = true;
      } else {
        // 框选
        // 不算入操作
        this.store.cancelSelect();
        this.store.collectSelectData().start(startx, starty);
      }
    } else if (type == 'pointselect') {
      // 判断是否要移动
      if (this.store.collectMoverData().beforeStart(startx, starty)) {
        this.isMoving = true;
      }
    } else if (type == 'inputtext') {
      // 文字输入
      inCanvas = false; // 

      onoff = false;
      isTouchUp = true; // 鼠标没有弹起

      if (this.textInputStatus === 1) {
        var component = this.textAreaFocusBlurStatus['focus'];
        component && component.dom && component.dom.blur();
        return;
      }

      var textAreaComponent; // 键盘输入
      // 获取点击的点XY坐标

      var ox = eventLocation.ox,
          oy = eventLocation.oy,
          x = eventLocation.x,
          y = eventLocation.y;
      var inputx = ox,
          inputy = oy;
      var inputItem = this.store.collectTextInputData().start(x, y);
      var fontSize = 12;
      var fontScale = this.store.getTextSize() / 10000 * self.height / 12;

      if (inputItem.text) {
        var textareaEl = document.getElementById("tic-textarea__".concat(inputItem.belongSeq));

        if (textareaEl) {
          textAreaComponent = this.textAreaComponentMap[inputItem.belongSeq];
        }
      } else {
        textAreaComponent = new _TextAreaComponent__WEBPACK_IMPORTED_MODULE_34__["default"]({
          boardId: this.getCurrentBoard(),
          board: this
        });
        textAreaComponent.createElement(this.textAreaBox);
      }

      textAreaComponent.initEvent({
        onfocus: function onfocus(component, dragOffsetX, dragOffsetY, scale) {
          self.textAreaFocusBlurStatus['focus'] = component; // 文字输入状态（focus态）

          self.textInputStatus = 1;
          self.store.updateDragDataFromTextTool(dragOffsetX, dragOffsetY, scale);
          self.draw();
        },
        oninput: function oninput(component, dragOffsetX, dragOffsetY, scale) {
          // 文字输入状态（focus态）
          self.textInputStatus = 1;
          var text = component.dom.value;
          self.store.collectTextInputData().inputting(component, component.textItem, text, component.dom.clientWidth + 12, component.dom.clientHeight);
          self.store.updateDragDataFromTextTool(dragOffsetX, dragOffsetY, scale);
          self.draw();
        },
        onblur: function onblur(component) {
          if (self.textAreaFocusBlurStatus['focus'] === component) {
            self.textAreaFocusBlurStatus['focus'] = null;
          } // 文字输入状态（blur态）


          self.textInputStatus = 0; // 失去焦点时候绘制全部数据到canvas上

          self.store.cancelSelect();
          var text;

          if (component.dom) {
            text = component.dom.value;
          }

          if (text) {
            self.store.collectTextInputData().draw(component, component.textItem, text, component.dom.clientWidth + 12, component.dom.clientHeight);
          } else {
            delete self.textAreaComponentMap[component.textItem.belongSeq];
            self.store.collectTextInputData().clearTask();
          }
        },
        onresize: function onresize(component) {
          if (component.textItem) {}
        }
      });
      self.textAreaComponentMap[inputItem.belongSeq] = textAreaComponent;

      if (textAreaComponent) {
        textAreaComponent.setBoardContainerSize(this.width, this.container.offsetWidth, this.height, this.container.offsetHeight);
        textAreaComponent.setTextItem(inputItem);
        textAreaComponent.setPosition(inputx, inputy);
        textAreaComponent.setFontSize(fontSize);
        textAreaComponent.setMaxSize();
        textAreaComponent.setFontScale(fontScale);
        textAreaComponent.setSize();
        var allow = textAreaComponent.focus(); // focus 会判断是否允许显示该text,如果不允许，则从数据结构中删除。

        if (!allow) {
          delete this.textAreaComponentMap[textAreaComponent.textItem.belongSeq];
          this.store.collectTextInputData().clearTask();
        }
      }
    } else if (type.indexOf('graph') > -1) {
      // 画图形
      // 算入操作
      this.store.cancelSelect();
      this.store.collectGraphData().start(startx, starty);
    } else if (type === 'zoom') {
      // 如果是缩放
      if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
        this.store.cancelSelect();
        this.store.collectDragData().start(e);
      } else {
        // 捏合前的比例
        this.beforePinchScale = this.getBoardScale();
      }
    }

    if (this.isMoving == true) {
      // 检测移动的时候是否有选择到涂鸦以及移动的时候点击是否在选中的范围
      if (this.store.collectMoverData().beforeStart(startx, starty)) {
        this.isMoving = true;
        this.store.collectMoverData().start(startx, starty);
      }
    }
  } // 鼠标或者手指滑动


  function mouseMove(e) {
    if (this.getToolType() === 11) {
      // 如果是文字输入功能，则不需要阻止默认行为（拖动鼠标选择功能）
      return;
    }

    stopDefaultEvent(e);

    if (!this.isDrawEnable()) {
      return;
    }

    type = this.store.getType();
    color = this.store.getColor();
    thin = this.store.getThin();
    var eventLocation = this.getEventLocation(e);

    if (eventLocation.x == -1000000 && eventLocation.y == -1000000) {
      return;
    }

    if (type == 'mouse') {
      // this.nextStep();
      _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].sendMouseEvent(this.iframeDOM, {
        type: e.type,
        x: eventLocation.x,
        y: eventLocation.y,
        touch: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTouch(e)
      });
      return;
    }

    var newx = eventLocation.x;
    var newy = eventLocation.y;
    var currentClientX = eventLocation.clientX;
    var currentClientY = eventLocation.clientY;

    if (onoff) {
      // 类型是随便画
      if (type == 'line') {
        try {
          var userData = this.store.userData[this.getCurrentBoard()][this.option.userId];
          var line = userData[userData.length - 1]; // 取出最后操作的数据

          if (line && !line.show) {
            // 如果线被隐藏了（比如对端用橡皮擦隐藏了）
            over.apply(this, [e]); // 结束上一条线

            down.apply(this, [e]); // 重走开始流程(变成一条新的线)

            return;
          }
        } catch (error) {}

        if (this.store.isHandwritingEnable()) {
          lineOptimization.apply(this, [newx, newy]);
        } else {
          var curLineTimestamp = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
          this.pointCount++;

          if (this.enableLineOptimization) {
            var distance = Math.sqrt(Math.pow(this.preLinePoint.x - newx, 2) + Math.pow(this.preLinePoint.y - newy, 2));
            var timeInterval = curLineTimestamp - this.preLineTimestamp;

            if (timeInterval < 20 || distance < 5) {
              this.ignorePointCount++;
              return;
            }
          }

          this.preLineTimestamp = curLineTimestamp;
          this.preLinePoint = {
            x: newx,
            y: newy
          };

          if (cpx >= 0 && cpy >= 0) {
            var endx = (cpx + newx) / 2;
            var endy = (cpy + newy) / 2;
            ctx.beginPath();
            ctx.moveTo(oldx / 10000 * this.width, oldy / 10000 * this.height);
            ctx.quadraticCurveTo(cpx / 10000 * this.width, cpy / 10000 * this.height, endx / 10000 * this.width, endy / 10000 * this.height);
            ctx.strokeStyle = color;
            ctx.lineWidth = Math.max(thin / 10000 * this.height, this.minLineWidth);
            ctx.lineCap = 'round';
            ctx.stroke();
            oldx = endx;
            oldy = endy;
          }

          cpx = newx;
          cpy = newy;
          this.store.collectLineData().draw(newx, newy, thin);
        }
      } else if (type == "eraser") {
        this.store.collectEraserData(newx, newy);
      } else if (type == 'raser') {} else if (type == 'select' && !this.isMoving) {
        // 框选
        this.store.collectSelectData().draw(newx, newy);
      } else if (type == 'pointselect') {//点选
        // 点选不需要操作
      } else if (type.indexOf('graph') > -1) {
        this.store.collectGraphData().draw(newx, newy);
      } else if (type === 'zoom') {
        // 如果是缩放
        if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
          // 如果是移动端
          this.store.collectDragData().draw(e, currentClientX, currentClientY, this.dragStartX, this.dragStartY);
          this.dragStartX = currentClientX;
          this.dragStartY = currentClientY;
          this.draw();
        } else {
          // 缩放操作
          if (this.pinchScale.length) {
            this.store.collectDragData().scaleDraw(this.beforePinchScale, this.pinchScale);
          } else {
            this.store.collectDragData().draw(e, currentClientX, currentClientY, this.dragStartX, this.dragStartY);
            this.dragStartX = currentClientX;
            this.dragStartY = currentClientY;
            this.draw();
          }
        }
      }

      if (this.isMoving) {
        this.store.collectMoverData().draw(newx, newy, oldx, oldy); // 更新数据

        oldx = newx;
        oldy = newy;
      }
    } else {
      if (type == 'line') {
        this.updateCursor(); // 更新鼠标样式
      }

      if (!isTouchUp) {
        // 如果没有弹起(画出画布后，重新从画布外划入)
        if (type == 'line') {
          down.apply(this, [e]); // 重走开始流程(变成一条新的线)
          // inCanvas = true;
          // onoff = true;
          // // 每次操作会影响 opData  从第一步起截止到目前的操作步数
          // // 重置操作步骤,具体请看store.js说明
          // this.store.resetOperation();
          // cpx = -10;
          // cpy = -10;
          // oldx = startx = eventLocation.x;
          // oldy = starty = eventLocation.y;
          // this.store.cancelSelect();
          // this.store.collectLineData().start(startx, starty, this.store.isHandwritingEnable());
          // let lineWidth = Math.max(thin / 10000 * this.height, this.minLineWidth);
          // ctx.beginPath();
          // ctx.arc(startx / 10000 * this.width, starty / 10000 * this.height, lineWidth / 2, 0, Math.PI * 2, !0);
          // ctx.fillStyle = color;
          // ctx.fill();
          // ctx.closePath();
        }
      }
    }

    if (type == 'raser' || type == 'line') {
      var needSend = isRaserValid.apply(this);
      this.store.collectRaserData().draw(newx, newy, this.getToolType(), onoff, needSend);
    }
  }

  function up(e) {
    stopDefaultEvent(e);

    if (!this.isDrawEnable()) {
      return;
    }

    type = this.store.getType();
    var eventLocation = this.getEventLocation(e);

    if (eventLocation.x == -1000000 && eventLocation.y == -1000000) {
      return;
    }

    isTouchUp = true; // 鼠标弹起状态

    onoff = false;

    if (type == 'mouse') {
      _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].sendMouseEvent(this.iframeDOM, {
        type: e.type,
        x: eventLocation.x,
        y: eventLocation.y,
        touch: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTouch(e)
      });
      return;
    }

    var newx = eventLocation.x;
    var newy = eventLocation.y; //重置控制点
    //cpx = -10;
    //cpy = -10;
    // 类型是随便画

    if (type == 'line') {
      if (!inCanvas) {
        // 如果鼠标移出到canvas外面松开鼠标，或者移动到canvas外面后又回来canvas上松开鼠标
        return;
      }

      console.log("line optimization: point count ".concat(this.pointCount, ", ignore count ").concat(this.ignorePointCount));

      if (this.store.isHandwritingEnable()) {
        this.hasOptimizeEnd = false;
        lineOptimization.apply(this, [newx, newy]);
      } else {
        ctx.beginPath();
        ctx.moveTo(oldx / 10000 * this.width, oldy / 10000 * this.height);
        ctx.lineTo(newx / 10000 * this.width, newy / 10000 * this.height); // ctx.l(cpx / 10000 * this.width, cpy / 10000 * this.height, endx / 10000 * this.width, endy / 10000 * this.height);

        ctx.strokeStyle = color;
        ctx.lineWidth = Math.max(thin / 10000 * this.height, this.minLineWidth);
        ctx.lineCap = 'round';
        ctx.stroke();
        this.store.collectLineData().end(newx, newy, thin, this.store.isHandwritingEnable());
      }

      this.store.collectRaserData().end(newx, newy, this.getToolType(), this.isTouchType !== 'finger');
    } else if (type == 'eraser') {
      this.store.collectEraserData(newx, newy);
    } else if (type == 'raser') {
      this.store.collectRaserData().end(newx, newy, this.getToolType(), this.isTouchType !== 'finger');
    } else if (type == 'select' && !this.isMoving) {
      if (!inCanvas) {
        // 如果鼠标移出到canvas外面松开鼠标，或者移动到canvas外面后又回来canvas上松开鼠标
        return;
      }

      this.store.collectSelectData().end(startx, starty, newx, newy);
    } else if (type == 'pointselect' && !this.isMoving) {
      console.time('pointselect');
      this.store.collectPointSelectData(newx, newy);
      console.timeEnd('pointselect');
    } else if (type.indexOf('graph') > -1) {
      this.store.collectGraphData().end(newx, newy);
    } else if (type === 'zoom') {
      // 如果是缩放，拖拽
      if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
        // PC,WEB
        this.store.collectDragData().end();
      } else {
        // 移动端
        this.store.collectDragData().touchEnd(this.pinchScale);
      }
    }

    if (this.isMoving) {
      this.isMoving = false;
      this.store.collectMoverData().end();
    }

    this.event.fire(this, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', this.store.canUndo());
    this.event.fire(this, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', this.store.canRedo());
  }

  function over(e) {
    stopDefaultEvent(e);

    if (!this.isDrawEnable()) {
      return;
    }

    var type = this.store.getType();
    var eventLocation = this.getEventLocation(e);

    if (eventLocation.x == -1000000 && eventLocation.y == -1000000) {
      return;
    }

    if (type == 'mouse') {
      // this.nextStep();
      _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].sendMouseEvent(this.iframeDOM, {
        type: e.type,
        x: eventLocation.x,
        y: eventLocation.y,
        touch: _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTouch(e)
      });
      return;
    }

    var newx = eventLocation.x;
    var newy = eventLocation.y;
    inCanvas = false; // 鼠标移出到canvas外面
    // 鼠标离开

    if (onoff == true) {
      // 正在画，要结束当前画画内容
      var thin;

      if (type == 'line') {
        thin = this.store.getThin();
        newx = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getEffectivePoint(newx, thin);
        newy = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getEffectivePoint(newy, thin);

        if (this.store.isHandwritingEnable()) {
          this.hasOptimizeEnd = false;
          lineOptimization.apply(this, [newx, newy]);
        } else {
          ctx.beginPath();
          ctx.moveTo(oldx / 10000 * this.width, oldy / 10000 * this.height);
          ctx.lineTo(newx / 10000 * this.width, newy / 10000 * this.height); // ctx.l(cpx / 10000 * this.width, cpy / 10000 * this.height, endx / 10000 * this.width, endy / 10000 * this.height);

          ctx.strokeStyle = color;
          ctx.lineWidth = Math.max(thin / 10000 * this.height, this.minLineWidth);
          ctx.lineCap = 'round';
          ctx.stroke();
          this.store.collectLineData().over(newx, newy, thin);
        }
      } else if (type == 'raser') {} else if (type == 'select' && !this.isMoving) {
        this.store.collectSelectData().end(startx, starty, newx, newy);
      } else if (type.indexOf('graph') > -1) {
        thin = this.store.getThin();
        newx = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getEffectivePoint(newx, thin);
        newy = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getEffectivePoint(newy, thin);
        this.store.collectGraphData().over(newx, newy);
      } else if (type === 'zoom') {
        // 如果是缩放，拖拽
        if (!_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isMobile()) {
          this.store.collectDragData().over();
        }
      }

      if (this.isMoving) {
        this.isMoving = false;
        this.store.collectMoverData().end();
      }

      onoff = false;
      this.event.fire(this, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', this.store.canUndo());
      this.event.fire(this, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', this.store.canRedo());
    } else {
      if (type == 'line') {
        this.updateCursor(); // 更新鼠标样式
      }
    }

    if (type == 'raser' || type == 'line') {
      raserStatistic.apply(this);
      this.store.collectRaserData().over(newx, newy, this.getToolType());
    }
  }

  function isRaserValid() {
    var curRaserTimestamp = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
    raserCount++;

    if (this.enableRaserOptimization) {
      var timeInterval = curRaserTimestamp - preRaserTimestamp;

      if (timeInterval < 20) {
        ignoreRaserCount++;
        return false;
      }
    }

    preRaserTimestamp = curRaserTimestamp;
    return true;
  }

  function raserStatistic() {
    console.log("raser statistic: count ".concat(raserCount, ", ignore ").concat(ignoreRaserCount));
    raserCount = 0;
    ignoreRaserCount = 0;
  }

  function lineOptimization(newx, newy) {
    // var eventLocation = this.getEventLocation(e);
    // var newx = eventLocation.x;
    // var newy = eventLocation.y;
    var curLineTimestamp = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
    this.pointCount++;
    var distance = Math.sqrt(Math.pow(this.preLinePoint.x - newx, 2) + Math.pow(this.preLinePoint.y - newy, 2));
    var timeInterval = curLineTimestamp - this.preLineTimestamp;

    if ((timeInterval < 20 || distance < 5) && this.hasOptimizeEnd) {
      this.ignorePointCount++;
      return;
    }

    var maxStep = distance * 0.1;
    var curSpeed = distance / timeInterval;
    var curWidth = thin;

    if (this.preSpeed != 0) {
      curWidth = Math.min(this.preSpeed / curSpeed * thin, thin);

      if (Math.abs(this.preWidth - curWidth) > maxStep) {
        if (this.preWidth < curWidth) {
          curWidth = this.preWidth + maxStep;
        } else {
          curWidth = this.preWidth - maxStep;
        }
      }
    }

    curWidth = Math.floor(curWidth);

    if (!this.hasOptimizeEnd) {
      // newx = Math.floor(newx + (newx - oldx) * curWidth / thin * 2);
      // newy = Math.floor(newy + (newy - oldy) * curWidth / thin * 2);
      // if (isNaN(newx) || isNaN(newy)) {
      //   debugger;
      //   newx = oldx;
      //   newy = oldy;
      // }
      if (newx < oldx) {
        newx = Math.floor(newx + Math.max(newx - oldx, -50) * curWidth / thin * 2);
      } else {
        newx = Math.floor(newx + Math.min(newx - oldx, 50) * curWidth / thin * 2);
      }

      if (newy < oldy) {
        newy = Math.floor(newy + Math.max(newy - oldy, -50) * curWidth / thin * 2);
      } else {
        newy = Math.floor(newy + Math.min(newy - oldy, 50) * curWidth / thin * 2);
      }

      if (isNaN(newx) || isNaN(newy)) {
        //debugger;
        newx = Math.floor(oldx);
        newy = Math.floor(oldy);
      } // console.log(`newx ${newx}, newy ${newy}, oldx ${oldx}, oldy ${oldy}`);

    }

    if (cpx >= 0 && cpy >= 0) {
      var endx = (cpx + newx) / 2;
      var endy = (cpy + newy) / 2;
      var step = 0.05;
      var bx = oldx;
      var by = oldy;

      for (var i = step; i < 1 + step; i = i + step) {
        var midx = Math.pow(1 - i, 2) * oldx + 2 * i * (1 - i) * cpx + Math.pow(i, 2) * endx;
        var midy = Math.pow(1 - i, 2) * oldy + 2 * i * (1 - i) * cpy + Math.pow(i, 2) * endy;
        var midw = this.preWidth + (curWidth - this.preWidth) * i;

        if (!this.hasOptimizeStart) {
          midw = Math.min(curWidth / 3 + curWidth * i, curWidth);
        }

        if (!this.hasOptimizeEnd) {
          midw = this.preWidth - this.preWidth * i;
        }

        ctx.beginPath();
        ctx.moveTo(bx / 10000 * this.width, by / 10000 * this.height);
        ctx.lineTo(midx / 10000 * this.width, midy / 10000 * this.height);
        ctx.strokeStyle = color;
        ctx.lineWidth = Math.max(midw / 10000 * this.height, this.minLineWidth);
        ctx.lineCap = 'round';
        ctx.stroke();
        bx = midx;
        by = midy;
      }

      oldx = endx;
      oldy = endy;

      if (!this.hasOptimizeStart) {
        this.hasOptimizeStart = true;
      }
    }

    cpx = newx;
    cpy = newy;
    this.preLineTimestamp = curLineTimestamp;
    this.preLinePoint = {
      x: newx,
      y: newy
    };
    this.preSpeed = curSpeed;
    this.preWidth = curWidth;

    if (!this.hasOptimizeEnd) {
      this.hasOptimizeEnd = true;
      this.store.collectLineData().end(newx, newy, curWidth, this.store.isHandwritingEnable()); // console.log(`end curWidth ${curWidth} newx ${newx}, newy ${newy}, oldx ${oldx}, oldy ${oldy}`);
    } else {
      this.store.collectLineData().draw(newx, newy, curWidth); // console.log(`draw curWidth ${curWidth} newx ${newx}, newy ${newy}, oldx ${oldx}, oldy ${oldy}`);
    }
  }

  function deleteContent(e) {
    if (!this.isDrawEnable()) {
      return;
    } // delete 键


    if (e.keyCode == 46) {
      var type = this.store.getType();

      if ((type == "select" || type == "pointselect") && !this.isMoving) {
        this.store.deleteSelectedData();
        this.event.fire(this, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', this.store.canUndo());
        this.event.fire(this, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', this.store.canRedo());
      }
    }
  }
};

Board.prototype.render = function () {
  // let nextInterval = Config.RENDER_INTERVAL;
  try {
    if (this.store.getNeedDraw() || this.store.getIncreasingDraw() || this.store.getPartDraw() || this.store.getLaserDraw()) {
      // let begin = util.getTimeStamp();
      this.draw(); // this.preRenderCost = util.getTimeStamp() - begin;
      // console.log(`${util.getTimeStamp()}====draw cost ${this.preRenderCost}, need draw ${this.store.getNeedDraw()}, part draw ${this.store.getPartDraw()}, ins draw ${this.store.getIncreasingDraw()}`);

      this.store.setIncreasingDraw(false);
      this.store.setPartDraw(false);
      this.store.setNeedDraw(false);
      this.store.setLaserDraw(false);
    } else {} // nextInterval = Config.RENDER_INTERVAL - this.preRenderCost;
    // if (nextInterval < 0) {
    //   nextInterval = Config.RENDER_INTERVAL / 2;
    // }

  } catch (error) {
    var stack = error.stack;
    var message = error.message;
    this.store.machineNotify('markdown', "\u767D\u677F\u6E32\u67D3\u9519\u8BEF\n              \n>version\uFF1A<font color=\"#ff0000\">".concat(_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VERSION, "</font>\n              \n>sdkAppId\uFF1A<font color=\"#ff0000\">").concat(this.option.sdkAppId, "</font>\n              \n>userId\uFF1A<font color=\"#ff0000\">").concat(this.option.userId, "</font>\n              \n>classId\uFF1A<font color=\"#ff0000\">").concat(this.option.classId, "</font>\n              \n>\u4FE1\u606F\uFF1A<font color=\"#ff0000\">").concat(message, "</font>\n              \n>\u5806\u6808\uFF1A<font color=\"#ff0000\">").concat(stack, "</font>"));
    console.error('drawerror', error.message);
    this.elkLog.report('drawerror', {
      boardid: this.store.getCurrentBoard(),
      extra_info: JSON.stringify({
        stack: stack,
        message: message
      })
    });
  } finally {// this.drawTimer = setTimeout(() => {
    //   if (this) {
    //     this.render();
    //   }
    // }, nextInterval);
  }
};

Board.prototype.getDrawWidth = function (startx, starty, curx, cury, timeInterval, width) {
  var maxSpeed = 2.0;
  var distance = Math.sqrt(Math.pow(startx - curx, 2) + Math.pow(starty - cury, 2));
  var speed = distance / timeInterval;
  speed = speed > maxSpeed ? maxSpeed : speed;
  var ratio = (maxSpeed - speed) / maxSpeed;
  var curWidth = width * ratio;
  console.log("thin==speed ".concat(speed));
  return curWidth;
};

Board.prototype.reportContainerSize = function () {
  if (this.container) {
    // 上报size
    this.elkLog.report('resize', {
      extra_info: JSON.stringify({
        width: this.container.clientWidth,
        height: this.container.clientHeight
      })
    });
  }
}; // window resize事件


Board.prototype.windowResizeListener = function () {
  var _this16 = this;

  var resizeTask = null;
  clearTimeout(resizeTask);
  resizeTask = setTimeout(function () {
    _this16.resize();
  }, 200);
  this.reportContainerSize();
}; // window Message事件


Board.prototype.windowMessageListener = function (e) {
  if (!e.data) {
    return;
  }

  var module = e.data.module;
  var cmd = e.data.cmd;
  var data = e.data.data;

  if (_model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_36__["default"].TIW_H5PPT === module) {
    var fileInfo;

    switch (cmd) {
      case 'init':
        try {
          var _JSON$parse = JSON.parse(data),
              title = _JSON$parse.title,
              count = _JSON$parse.count,
              url = _JSON$parse.url,
              width = _JSON$parse.width,
              height = _JSON$parse.height,
              slideStepData = _JSON$parse.slideStepData;

          var urlFid = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].parseQueryString(decodeURIComponent(url)).fid;
          var taskId = urlFid.replace('#', '');
          title = this.taskIdTitleMap[taskId] || title; // =========================== 如果是预加载的通知，则需要把预加载的节点给删掉

          var preIframe = document.querySelector('#preiframe-' + taskId);

          if (preIframe) {
            preIframe.remove();
          } // =========================== 如果是预加载的通知，则需要把预加载的节点给删掉
          // 如果不存在


          fileInfo = this.store.getFileInfo(urlFid);

          if (fileInfo && fileInfo.fid) {
            _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].setFid(this.iframeDOM, fileInfo.fid);
          } else {
            if (!this.isRenderFace) {
              // 如果是正常H5PPT加载（非首屏渲染）
              if (url && url.indexOf('?') > -1) {
                url = url.substring(0, url.indexOf('?'));
              }

              this.store.addH5PPTFile(urlFid, url, title, count, width, height, true, this.addFileNeedSwitchMap[urlFid]);
            }

            _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].setFid(this.iframeDOM, urlFid);
            fileInfo = this.store.getFileInfo(urlFid);
          }

          if (fileInfo) {
            fileInfo.slideStepData = slideStepData; // 部署信息
          } else {
            var files = JSON.parse(JSON.stringify(this.getGroup()));
            files.forEach(function (item) {
              delete item.boardInfoList;
            });
            this.elkLog.report('iframe_cmd_init', {
              action_result: -2,
              boardid: this.getCurrentBoard(),
              file_id: urlFid,
              extra_info: JSON.stringify({
                title: title,
                count: count,
                url: url,
                width: width,
                height: height,
                slideStepData: slideStepData,
                fileList: files
              })
            });
          }

          this.elkLog.report('iframe_cmd_init', {
            boardid: this.getCurrentBoard(),
            file_id: urlFid,
            extra_info: JSON.stringify({
              title: title,
              count: count,
              url: url,
              width: width,
              height: height,
              slideStepData: slideStepData
            })
          });

          if (fileInfo && fileInfo.slideStepData) {
            // 如果获取不到步数，则不抛gotoStep事件
            this.event.fire(this, 'TEB_GOTOSTEP', fileInfo.currentPageStep, fileInfo.slideStepData[fileInfo.currentPageIndex]);
          }
        } catch (error) {
          this.elkLog.report('iframe_cmd_init', {
            boardid: this.getCurrentBoard(),
            action_result: -1,
            extra_info: JSON.stringify({
              stack: error.stack,
              message: error.message
            })
          });
        }

        break;

      case 'slideStepChangeEvent':
        this.store.switchH5Board(data);
        fileInfo = this.getFileInfo(data.fid);

        if (fileInfo && fileInfo.slideStepData) {
          // 如果获取不到步数，则不抛gotoStep事件
          this.event.fire(this, 'TEB_GOTOSTEP', data.stepIndex, fileInfo.slideStepData[data.slideIndex + '']);
        }

        break;

      case 'assets_loading_error':
        // 资源加载失败
        this.elkLog.report('assets_loading_error', {
          boardid: this.getCurrentBoard(),
          extra_info: JSON.stringify(data)
        });
        break;

      case 'ppt_action':
        // 操作ppt协议
        this.elkLog.report('ppt_action', {
          boardid: this.getCurrentBoard(),
          extra_info: JSON.stringify(data)
        });
        this.store.pptAction(data);
        break;
    }
  } else if (_model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_36__["default"].TIW_H5WEB === module) {
    var id = e.data.id;

    switch (cmd) {
      case _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_35__["default"].TIW_H5WEB_DATA:
        this.store.h5WebAction(id, data);
        break;

      default:
        break;
    }
  }
}; // 修改颜色


Board.prototype.setColor = function (color) {
  this.store.setColor(color);
}; // 修改画笔粗细


Board.prototype.setThin = function (thin) {
  this.store.setThin(thin);
}; // 修文字输入大小


Board.prototype.setTextSize = function (textSize) {
  var component = this.textAreaFocusBlurStatus['focus'];
  this.store.setTextSize(textSize);

  if (this.textAreaFocusBlurStatus['focus']) {
    component.textItem.textSize = this.getTextSize();
    var fontScale = this.getTextSize() / 10000 * this.height / 12;
    component.setFontScale(fontScale);
    component.smartPaintText(); // 重新绘制

    this.store.collectTextInputData().draw(component, component.textItem, component.textItem.text, component.dom.clientWidth + 12, component.dom.clientHeight);
  }
}; // 获取文字大小


Board.prototype.getTextSize = function () {
  return this.store.getTextSize();
}; // 设置文字颜色


Board.prototype.setTextColor = function (textColor) {
  var component = this.textAreaFocusBlurStatus['focus'];
  this.store.setTextColor(textColor);

  if (this.textAreaFocusBlurStatus['focus']) {
    component.textItem.color = this.getTextColor();
    component.setTextStyle();
    this.store.collectTextInputData().draw(component, component.textItem, component.textItem.text, component.dom.clientWidth + 12, component.dom.clientHeight);
  }
}; // 获取文字颜色


Board.prototype.getTextColor = function () {
  return this.store.getTextColor();
}; // 修改画画类型
// 这个时候需要取消被选择的框


Board.prototype.setType = function (type) {
  // 主动失去焦点
  this.inputBlur();
  var types = ['MOUSE', 'LINE', 'ERASER', 'RASER', 'GRAPH-LINE', 'GRAPH-OVAL', 'GRAPH-RECT', 'GRAPH-OVAL-SOLID', 'GRAPH-RECT-SOLID', 'POINTSELECT', 'SELECT', 'INPUTTEXT', 'ZOOM', 'GRAPH-STRAIGHTLINE', 'GRAPH-ELLIPSE'];
  this.store.setType(_config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].BOARD_ACTION_TYPE[types[type]]);

  if (_config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].BOARD_ACTION_TYPE[types[type]] === 'inputtext') {
    this.textAreaBox.style.zIndex = 100;
  } else {
    this.textAreaBox.style.zIndex = 9;
  }

  this.updateCursor();
  this.store.setNeedDraw(true); // alderzhang: 重绘是为了更新H5元素对应iframe的pointer-events属性
}; // undo操作


Board.prototype.undo = function () {
  // 主动失去焦点
  this.inputBlur();
  this.store.undo();
}; // 能否回退


Board.prototype.canUndo = function () {
  return this.store.canUndo();
}; // process操作


Board.prototype.redo = function () {
  // 主动失去焦点
  this.inputBlur();
  this.store.redo();
}; // 能否恢复


Board.prototype.canRedo = function () {
  return this.store.canRedo();
}; //清空


Board.prototype.clear = function (clearBackground, clearSelectedOnly) {
  // 主动失去焦点
  this.inputBlur();
  this.store.clear(clearBackground, clearSelectedOnly);
};
/**
 * @description 清空白板所有涂鸦
 */


Board.prototype.clearAll = function () {
  // 主动失去焦点
  this.inputBlur();
  this.store.clearAll(); // 隐藏视频

  this.videoDiv.style.display = "none";
  this.resetVideoStatus();
  this.textAreaBox.innerHTML = '';
  this.imageElementWrap.innerHTML = '';
  this.webviewWrap.innerHTML = '';
};

Board.prototype.addBackgroundPic = function (boardId, url, needBroad) {
  this.store.addBackgroundPic(boardId, url, needBroad);
};

Board.prototype._setBackgroundImage = function (url, mode) {
  this.store._setBackgroundImage(url, mode);
};

Board.prototype.setBackgroundPic = function (boardId, url) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER;
  this.store.setBackgroundPic(boardId, url, position);
}; // 设置H5背景


Board.prototype.setBackgroundH5 = function (url) {
  this.store.setBackgroundH5(url);
};
/**
 * @description 设置当前页的背景图
 * @param {Number} position 图片相对于白板显示位置
 */


Board.prototype.updateCurrentFillMode = function () {
  var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_21__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER;
  this.store.updateCurrentFillMode(position);
};

Board.prototype.deleteBackgroundPic = function (boardId) {
  this.store.deleteBackgroundPic(boardId);
}; //  取消背景图


Board.prototype.cancelBackgroundPic = function () {
  this.store.cancelBackgroundPic();
};
/**
 * 取消全局背景色
 */


Board.prototype.clearGlobalBgColor = function () {
  this.store.clearGlobalBgColor();
}; //  清空被选择的区域


Board.prototype.cancelSelect = function () {
  this.store.cancelSelect();
};
/**
 * 设置是否可以画画
 */


Board.prototype.setDrawEnable = function (enabled) {
  this.store.setDrawEnable(enabled);
};

Board.prototype.setHandwritingEnable = function (enable) {
  this.store.setHandwritingEnable(enable);
};

Board.prototype.isHandwritingEnable = function () {
  return this.store.isHandwritingEnable();
}; // 增加file


Board.prototype.addFile = function (fid, urls, title, downloadUrl, ratio, needSwitch) {
  this.aegis.report('addFile', {
    module: 'board',
    fid: fid,
    downloadUrl: downloadUrl,
    needSwitch: needSwitch
  }); // 主动失去焦点

  this.inputBlur();
  return this.store.addFile(fid, urls, title, downloadUrl, ratio, true, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.IMG, needSwitch);
};
/**
 * 增加H5文件
 */


Board.prototype.addImagesFile = function (urls, title, needSwitch) {
  var _this17 = this;

  this.aegis.report('addImagesFile', {
    module: 'board',
    title: title,
    needSwitch: needSwitch
  }); // 主动失去焦点

  this.inputBlur();
  var fid = "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp());
  title = title || "imagesfile_".concat(fid);
  var ration = null;
  var isTranscodeFile = false;
  var input = JSON.stringify(urls); //使用数组作为字符串

  var t1 = new Date().getTime();
  var compressed = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].compress(input);
  var t2 = new Date().getTime();
  var compress_ratio = compressed.length * 100 / input.length;
  var elapse = t2 - t1;
  console.log("src len: ".concat(input.length, ", lz compressed len:").concat(compressed.length, ", compressRatio:").concat(compress_ratio, " elapse:").concat(elapse)); //对于压缩后的太长字符串，只发送5000。免IM限制，转成文件方式

  if (compressed && compressed.length > _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].IMAGESFILE_MAX_URL_LENGTH) {
    setTimeout(function () {
      _this17.event.fire(_this17, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_19__["default"].TEDU_BOARD_ERROR_DATA_TOO_LARGE, 'please try to split into two or more files, or try to use shorter url.');

      _this17.elkLog.report('images_file_url_too_large', {
        extra_info: JSON.stringify({
          urls: input,
          urls_len: input.length,
          compress_len: compressed.length,
          compress_ratio: compress_ratio,
          elapse: elapse
        })
      });
    }, 0);
    return '';
  }

  var downloadUrl = compressed;

  if (!this.store.isFileUrlExist(downloadUrl)) {
    var result = this.store.addFile(fid, urls, title, downloadUrl, ration, isTranscodeFile, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.IMAGESFILE, needSwitch);
    this.elkLog.report('add_images_file_start', {
      file_id: result,
      extra_info: JSON.stringify({
        urls: input,
        urls_len: input.length,
        compress_len: compressed.length,
        compress_ratio: compress_ratio,
        elapse: elapse
      })
    });
    return result;
  } else {
    // 重复创建
    var fileInfo = this.store.getFileInfoByUrl(downloadUrl);
    fid = fileInfo.fid;
    setTimeout(function () {
      _this17.event.fire(_this17, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__["default"].TEDU_BOARD_WARNING_IMAGESFILE_ALREADY_EXISTS, fid);

      _this17.elkLog.report('images_file_already_exists', {
        boardid: _this17.getCurrentBoard(),
        file_id: fid,
        extra_info: ''
      });
    }, 0);
    return fid;
  }
};
/**
 * 增加H5文件
 */


Board.prototype.addH5PPTFile = function (url, title, needSwitch) {
  var _this18 = this;

  this.aegis.report('addH5PPTFile', {
    module: 'board',
    url: url,
    title: title,
    needSwitch: needSwitch
  }); // 主动失去焦点

  this.inputBlur();
  var fid = "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp());
  this.addFileNeedSwitchMap[fid] = needSwitch; // 如果不存在

  if (!this.store.isFileUrlExist(url)) {
    var taskId = fid.replace('#', '');
    this.taskIdTitleMap[taskId] = title;

    if (url.indexOf('?') > -1) {
      url += '&page=0&step=0&fid=' + encodeURIComponent(fid);
    } else {
      url += '?page=0&step=0&fid=' + encodeURIComponent(fid);
    }

    var ifrm;
    ifrm = document.createElement("iframe");
    ifrm.id = "preiframe-".concat(taskId);
    ifrm.setAttribute('class', 'tx_board_pre_iframe'); // 预加载iframe

    ifrm.setAttribute('style', 'position:fixed;visibility:hidden;width:0px;height:0px;border:none;');
    document.body.appendChild(ifrm);
    this.isRenderFace = false;
    this.elkLog.report('iframe_pre_start_load', {
      file_id: fid,
      extra_info: url
    });
    var self = this;

    ifrm.onload = function () {
      console.log('transcodefile  onload');

      if (this.src == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ABOUTBLANK) {// 如果是空的页面，则不处理
      } else if (this.src) {
        _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].init(ifrm, {
          isFirstLoad: true
        });
        self.elkLog.report('iframe_pre_load_done', {
          file_id: fid,
          extra_info: this.src
        });
      }
    };

    ifrm.setAttribute("src", url);
    return fid;
  } else {
    // 重复创建
    if (url && url.indexOf('?') > -1) {
      url = url.substring(0, url.indexOf('?'));
    }

    var fileInfo = this.store.getFileInfoByUrl(url);
    fid = fileInfo.fid;
    setTimeout(function () {
      _this18.event.fire(_this18, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__["default"].TEDU_BOARD_WARNING_H5PPT_ALREADY_EXISTS, fid);

      _this18.elkLog.report('h5ppt_already_exists', {
        boardid: _this18.getCurrentBoard(),
        file_id: fid,
        extra_info: url
      });
    }, 0);
    return fid;
  }
};
/**
 * 增加视频文件
 */


Board.prototype.addVideoFile = function (url) {
  var _this19 = this;

  this.inputBlur();
  var fid = "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp()); // 如果不存在

  if (!this.store.isFileUrlExist(url)) {
    this.resetVideoStatus();
    this.stopSyncVideoStatus();
    this.videoStatus.fid = fid;
    this.videoStatus.url = url;
    this.videoStatus.format = this.getVideoFormat(url);
    this.videoStatus.type = this.getVideoType(url);
    this.videoStatus.actions.create = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.API;
    this.store.addVideoFile(fid, url, this.width, this.height, this.videoStatus.type);
    this.createVideo(fid, url);
    return fid;
  } else {
    // 重复创建
    var fileInfo = this.store.getFileInfoByUrl(url);
    fid = fileInfo.fid;
    setTimeout(function () {
      _this19.event.fire(_this19, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__["default"].TEDU_BOARD_WARNING_VIDEO_ALREADY_EXISTS, fid);

      _this19.elkLog.report('video_already_exists', {
        file_id: fid,
        extra_info: url
      });
    }, 0);
    return fid;
  }
};
/**
 * 增加点播视频文件
 */


Board.prototype.addVODFile = function (appId, vodId, extParam) {
  var _this20 = this;

  // 主动失去焦点
  this.inputBlur();
  var fid = "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp());
  var url = "".concat(appId, "_").concat(vodId, "_").concat(extParam != null ? "true" : "false"); // 如果不存在

  if (!this.store.isFileUrlExist(url)) {
    this.resetVideoStatus();
    this.stopSyncVideoStatus();
    this.videoStatus.fid = fid;
    this.videoStatus.url = url;
    this.videoStatus.type = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VODFILE;
    this.videoStatus.extParam = extParam;
    this.videoStatus.actions.create = _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].VIDEO_ACTION.API;
    this.store.addVideoFile(fid, url, this.width, this.height, this.videoStatus.type);
    this.createVodVideo(fid, url, extParam);
    return fid;
  } else {
    // 重复创建
    var fileInfo = this.store.getFileInfoByUrl(url);
    fid = fileInfo.fid;
    setTimeout(function () {
      _this20.event.fire(_this20, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__["default"].TEDU_BOARD_WARNING_VIDEO_ALREADY_EXISTS, fid);

      _this20.elkLog.report('video_already_exists', {
        file_id: fid,
        extra_info: url
      });
    }, 0);
    return fid;
  }
}; //增加H5


Board.prototype.addH5File = function (url) {
  var _this21 = this;

  this.aegis.report('addH5File', {
    module: 'board',
    url: url
  }); // 主动失去焦点

  this.inputBlur();
  var fid = "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp()); // 如果不存在

  if (!this.store.isFileUrlExist(url)) {
    var width = this.boardWrap.clientWidth;
    var height = this.boardWrap.clientHeight;
    this.store.addH5File(fid, url, width, height);
    return fid;
  } else {
    // 重复创建
    var fileInfo = this.store.getFileInfoByUrl(url);
    fid = fileInfo.fid;
    setTimeout(function () {
      _this21.event.fire(_this21, 'TEB_WARNING', _model_TEduBoardWarningCode__WEBPACK_IMPORTED_MODULE_18__["default"].TEDU_BOARD_WARNING_H5FILE_ALREADY_EXISTS, fid);

      _this21.elkLog.report('h5file_already_exists', {
        file_id: fid,
        extra_info: url
      });
    }, 0);
    return fid;
  }
}; // 删除文件file


Board.prototype.deleteFile = function (fid) {
  this.aegis.report('deleteFile', {
    module: 'board',
    fid: fid
  }); // 主动失去焦点

  this.inputBlur();
  return this.store.deleteFile(fid);
}; // 切换file


Board.prototype.switchFile = function (fid, boardId, setpIndex) {
  var _this22 = this;

  this.aegis.report('switchFile', {
    module: 'board',
    fid: fid,
    boardId: boardId,
    setpIndex: setpIndex
  });

  if (fid) {
    // 自己切换自己，不处理
    if (fid != this.store.getCurrentFile()) {
      clearTimeout(this.pptH5LoadTask);
      this.resetPPTIframe();
      this.backgroundIFrameManager.remove(this.boardBox);
      this.pptH5LoadTask = setTimeout(function () {
        _this22.store.switchFile(fid, boardId, setpIndex);
      }, 50); //正在播放视频或者直播流，则先暂停

      if (this.videoPlayer) {
        this.videoPlayer.pause();
      }
    }
  }
};

Board.prototype.getFileInfoList = function () {
  return this.store.getFileInfoList();
};

Board.prototype.getGroup = function () {
  return this.store.getGroup();
};

Board.prototype.getFileInfo = function (fid) {
  return this.store.getFileInfo(fid);
};

Board.prototype.getBoardInfoList = function (fid) {
  return this.store.getBoardInfoList(fid);
};

Board.prototype.getBoardByGroup = function (gid) {
  return this.store.getBoardByGroup(gid);
};

Board.prototype.clearFileDraws = function (fids) {
  // 主动失去焦点
  this.inputBlur();
  return this.store.clearFileDraws(fids);
};

Board.prototype.needLayout = function (width, height, top, left, scale, ratio) {
  width = Math.ceil(width);
  height = Math.ceil(height);
  left = Math.ceil(left);
  top = Math.ceil(top);
  scale = Math.ceil(scale);

  if (width != this.preLayout.width || height != this.preLayout.height || left != this.preLayout.left || top != this.preLayout.top || scale != this.preLayout.scale || ratio != this.preLayout.ratio) {
    this.preLayout.width = width;
    this.preLayout.height = height;
    this.preLayout.left = left;
    this.preLayout.top = top;
    this.preLayout.scale = scale;
    this.preLayout.ratio = ratio;
    return true;
  }

  return false;
}; // 重构layout


Board.prototype.layout = function (faceFileInfo) {
  // 获取外层容器的宽高
  var width = this.container.clientWidth;
  var height = this.container.clientHeight;

  if (width == 0 || height == 0) {
    return false;
  }

  var scale = 100,
      left = 50,
      top = 50,
      ratio; // 1. 获取当前白板缩放，偏移数据(scale, left, top)

  scale = this.store.getBoardScale();
  var dragData = this.store.getDragData();

  if (dragData) {
    left = dragData.xOffset;
    top = dragData.yOffset;
    scale = dragData.scale;
  } // 2. 从获取ratio/默认比例


  if (faceFileInfo) {
    ratio = faceFileInfo.ratio || this.store.getBoardRatio();
  } else {
    ratio = this.store.getBoardRatio();
  } // 白板宽高比例


  var _util$calcRatioWidthH = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].calcRatioWidthHeight(ratio, _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].RATIO),
      ratioWidth = _util$calcRatioWidthH.ratioWidth,
      ratioHeight = _util$calcRatioWidthH.ratioHeight;

  var scaleX = width / ratioWidth;
  var scaleY = height / ratioHeight;
  var minScale = Math.min(scaleX, scaleY);
  var baseWidth, baseHeight; // 一倍的宽高

  baseWidth = minScale * ratioWidth;
  baseHeight = minScale * ratioHeight;
  this.width = Math.ceil(baseWidth * scale / 100);
  this.height = Math.ceil(baseHeight * scale / 100);

  if (this.width % 2 === 1) {
    // 如果是奇数
    this.width += 1;
  }

  if (this.height % 2 === 1) {
    // 如果是奇数
    this.height += 1;
  }

  this.store.setContainerSize(width, height);
  this.store.setBoardSize(this.width, this.height);
  var maxLeft, minLeft, maxTop, minTop; // 定义可移动范围
  // 说明是白板是以水平方向为拖动

  if (this.width / this.height > width / height) {
    if (this.height > height) {
      maxTop = 50 + (this.height - height) / 2 / this.height * 100;
      minTop = 50 - (this.height - height) / 2 / this.height * 100;
    } else {
      maxTop = 50;
      minTop = 50;
    }

    maxLeft = 50 + (this.width - width) / 2 / this.width * 100;
    minLeft = 50 - (this.width - width) / 2 / this.width * 100;
  } else {
    maxTop = 50 + (this.height - height) / 2 / this.height * 100;
    minTop = 50 - (this.height - height) / 2 / this.height * 100;

    if (this.width > width) {
      maxLeft = 50 + (this.width - width) / 2 / this.width * 100;
      minLeft = 50 - (this.width - width) / 2 / this.width * 100;
    } else {
      maxLeft = 50;
      minLeft = 50;
    }
  }

  left = Math.min(maxLeft, Math.max(minLeft, left));
  top = Math.min(maxTop, Math.max(minTop, top));

  if (dragData) {
    this.store.dragDataList.updateDragData(this.getCurrentBoard(), {
      xOffset: left,
      yOffset: top
    });
  }

  var dpr = window.devicePixelRatio || window.webkitDevicePixelRatio || window.mozDevicePixelRatio || 1;
  var canvasWidth, canvasHeight;

  if (width / height > this.width / this.height) {
    // 以高度为对齐（高度已经撑满了容器）
    if (width > this.width) {
      // 容器宽度大于白板宽度
      canvasWidth = this.width;
      canvasHeight = this.width * ratioHeight / ratioWidth;
    } else if (width < this.width) {
      // 容器宽度小于白板宽度
      canvasWidth = width;
      canvasHeight = width * ratioHeight / ratioWidth;
    } else {
      canvasWidth = this.width;
      canvasHeight = this.height;
    }
  } else {
    // 以宽度为对齐（宽度已经撑满了容器）
    if (height > this.height) {
      // 容器高度大于白板高度
      canvasWidth = this.height * ratioWidth / ratioHeight;
      canvasHeight = this.height;
    } else if (height < this.height) {
      // 容器高度小于白板高度
      canvasWidth = height * ratioWidth / ratioHeight;
      canvasHeight = height;
    } else {
      canvasWidth = this.width;
      canvasHeight = this.height;
    }
  }

  var offsetLeft = this.width * (left - 50) / 100;
  var offsetTop = this.height * (top - 50) / 100;
  var outerStyle = "position:relative !important;left: ".concat(this.container.clientWidth / 2, "px !important;top: ").concat(this.container.clientHeight / 2, "px !important;-webkit-transform: translateX(-50%) translateY(-50%) !important;transform: translateX(-50%) translateY(-50%) !important;overflow:hidden !important;width:").concat(this.width, "px !important;height:").concat(this.height, "px !important");
  var innerStyle = "position:absolute !important;left: ".concat(left, "% !important;top:").concat(top, "% !important;-webkit-transform: translateX(-50%) translateY(-50%) !important;transform: translateX(-50%) translateY(-50%) !important;width:").concat(this.width, "px !important;height:").concat(this.height, "px !important;cursor:").concat(this.boardBox.style.cursor, ";");
  var canvasStyle = "z-index:10 !important;position:absolute !important;left:0 !important;top:0 !important;margin-left:".concat((this.width - canvasWidth) / 2, "px !important;margin-top:").concat((this.height - canvasHeight) / 2, "px !important;line-height:1 !important;width:").concat(canvasWidth, "px !important;height:").concat(canvasHeight, "px !important;"); // 设置最外层宽高，偏移

  this.boardWrap && this.boardWrap.setAttribute('style', outerStyle); // 设置第二层宽高，偏移

  this.boardBox && this.boardBox.setAttribute('style', innerStyle); // webview容器

  this.webviewWrap && this.webviewWrap.setAttribute('style', innerStyle); // 图片元素容器

  this.imageElementWrap && this.imageElementWrap.setAttribute('style', innerStyle + 'z-index:7;');
  this.cursorLayerWrap && this.cursorLayerWrap.setAttribute('style', innerStyle + 'z-index:0;user-select:none;-webkit-user-select:none;');

  if (this.getToolType() === 11) {
    this.textAreaBox && this.textAreaBox.setAttribute('style', innerStyle + 'z-index:100;overflow:hidden;');
  } else {
    this.textAreaBox && this.textAreaBox.setAttribute('style', innerStyle + 'z-index:9;overflow:hidden;');
  }

  var progressStype = "z-index:200 !important; display:".concat(this.progress.style.display, "; position:absolute !important;left: 50% !important;top: 50% !important;-webkit-transform: translateX(-50%) translateY(-50%) !important;transform: translateX(-50%) translateY(-50%) !important;overflow:hidden !important;");
  this.progress && this.progress.setAttribute('style', progressStype);
  this.bgDiv && this.bgDiv.setAttribute('width', this.width);
  this.bgDiv && this.bgDiv.setAttribute('height', this.height);
  this.iframeDOM && this.iframeDOM.setAttribute('style', "position: absolute !important;top: 0 !important;left: 0 !important;width:".concat(this.width, "px !important;height:").concat(this.height, "px !important;border:none !important;z-index:8 !important;"));

  if (this.videoStatus.isLoaded) {
    this.videoDiv.setAttribute('style', "z-index:20; position:absolute; top:0; left:0; height:".concat(canvasHeight, "px; width:").concat(canvasWidth, "px; display:block"));
  }

  if (this.h5Iframe) {
    this.h5Iframe.layout(canvasWidth, canvasHeight);
  }

  this.updateCursor();
  var needLay = this.needLayout(width, height, top, left, scale, ratio);

  if (this.laserCanvas && needLay) {
    this.laserCanvas.setAttribute('width', canvasWidth * dpr);
    this.laserCanvas.setAttribute('height', canvasHeight * dpr);
    var laserCanvasStyle = "z-index:15 !important;position:absolute !important;left:0 !important;top:0 !important;margin-left:".concat((this.width - canvasWidth) / 2, "px !important;margin-top:").concat((this.height - canvasHeight) / 2, "px !important;line-height:1 !important;width:").concat(canvasWidth, "px !important;height:").concat(canvasHeight, "px !important;cursor:").concat(this.laserCanvas.style.cursor); // 设置激光笔canvas的宽高

    this.laserCanvas.setAttribute('style', laserCanvasStyle);
    var laserCtx = this.laserCanvas.getContext('2d');
    laserCtx.translate(((canvasWidth - baseWidth) / 2 - (scale / 100 - 1) * baseWidth / 2 + offsetLeft) * dpr, ((canvasHeight - baseHeight) / 2 - (scale / 100 - 1) * baseHeight / 2 + offsetTop) * dpr);
    laserCtx.scale(dpr, dpr);
  }

  if (this.el && needLay) {
    this.el.setAttribute('style', canvasStyle);
    this.el.setAttribute('width', canvasWidth * dpr);
    this.el.setAttribute('height', canvasHeight * dpr);
    var ctx = this.el.getContext('2d');
    ctx.translate(((canvasWidth - baseWidth) / 2 - (scale / 100 - 1) * baseWidth / 2 + offsetLeft) * dpr, ((canvasHeight - baseHeight) / 2 - (scale / 100 - 1) * baseHeight / 2 + offsetTop) * dpr);
    ctx.scale(dpr, dpr);
  }

  return needLay;
};
/**
 * 渲染激光笔
 */


Board.prototype.drawLaser = function (laser) {
  // let begin = util.getTimeStamp();
  this.maxLaserSeq = laser.seq;
  var laserCtx = this.laserCanvas && this.laserCanvas.getContext('2d');
  var floatNumber = 5; // 浮动数字（在electron中出现边界残留的问题）

  laserCtx.clearRect(0 - floatNumber, 0 - floatNumber, this.width + floatNumber * 2, this.height + floatNumber * 2); // console.log(`${begin}====laser.action ${laser.action}`);

  if (laser.action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION) {
    try {
      if (laser.toolType == 1) {
        // 涂鸦
        laserCtx.drawImage(this.penIcon, laser.location.x / 10000 * this.width - (_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ICONS['1'].offsetX || 0), laser.location.y / 10000 * this.height - (_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ICONS['1'].offsetY || 0));
      } else if (laser.toolType == 3) {
        // 激光笔
        laserCtx.drawImage(this.laserIcon, laser.location.x / 10000 * this.width - (_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ICONS['3'].offsetX || 0), laser.location.y / 10000 * this.height - (_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ICONS['3'].offsetY || 0));
      } else {// console.log(`${begin}====laser.action not found`);
      }
    } catch (error) {// console.log(`${begin}====laser.action draw error`);
    }
  } else {} // console.log(`${begin}====laser.action action error`);
    // let cost = util.getTimeStamp() - begin;
    // console.log(`${util.getTimeStamp()}====draw laser cost ${cost}`);

};
/**
 *
 * @param {*} ctx
 * @param {*} lines
 */


Board.prototype.drawLine = function (ctx, data) {
  var _this23 = this;

  var line = null;

  if (data.lines[0].timestamp && this.fpsOptimization && !this.store.getNeedDraw()) {
    //新版本才有timestamp字段
    var drawIndex = data.drawIndex;

    if (this.store.getPartDraw()) {
      //全局绘制从当前index开始绘制，暂时不启用。因requestAnimationFrame切换tab不工作，必须全局绘制
      line = new _Line__WEBPACK_IMPORTED_MODULE_33__["default"]('', data);
      line.lines = [];

      for (var index = 0; index < drawIndex; index++) {
        line.lines.push(data.lines[index]);
      }
    } else {
      if (drawIndex == data.lines.length) {
        return;
      }

      line = new _Line__WEBPACK_IMPORTED_MODULE_33__["default"]('', data);
      line.lines = []; //添加两个前置点

      if (drawIndex - 2 >= 0) {
        line.lines.push(data.lines[drawIndex - 2]);
      }

      if (drawIndex - 1 >= 0) {
        line.lines.push(data.lines[drawIndex - 1]);
      }
    }

    if (drawIndex < data.lines.length) {
      //如果渲染耗时长（手机性能/手机当前负载高），加速消费
      var drawCount = Math.ceil((this.preRenderCost + 1) / (_config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].RENDER_INTERVAL * 0.75));

      while (drawCount > 0 && drawIndex < data.lines.length) {
        var point = data.lines[drawIndex];
        line.lines.push(point);
        data.drawIndex = ++drawIndex;
        drawCount--;
      }

      if (drawIndex < data.lines.length) {
        setTimeout(function () {
          _this23.store.setIncreasingDraw(true);
        }, 0);
      }
    }
  } else {
    data.drawIndex = data.lines.length;
    line = data;
  }

  if (line.lines.length == 0) {
    return;
  }

  if (line.writing) {
    if (line.lines.length == 1) {
      //笔锋只有一个点不画
      return;
    }

    if (line.lines.length == 2) {
      if (line.lines[0].x == line.lines[1].x && line.lines[0].y == line.lines[1].y) {
        // 判断两个点是不是一样的（是一样的就画点）
        //首位点相同
        // ctx.arc(items.lines[0].x / 10000 * this.width, items.lines[0].y / 10000 * this.height, ctx.lineWidth / 2, 0, Math.PI * 2, !0);
        // ctx.fill();
        // ctx.closePath();
        return;
      } else if (line.lines[1].action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_MOVE_ACTION) {
        //等待第三个点画曲线
        return;
      }
    }

    var hasOptimizeEnd = true;
    var hasOptimizeStart = true;
    var thin = line.thin;
    var color = line.color;
    var oldx = 0;
    var oldy = 0;

    if (line.lines[0].action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_START_ACTION) {
      oldx = line.lines[0].x;
      oldy = line.lines[0].y;
    } else {
      oldx = (line.lines[0].x + line.lines[1].x) / 2;
      oldy = (line.lines[0].y + line.lines[1].y) / 2;
    }

    for (var _index = 1; _index < line.lines.length - 1; _index++) {
      var ctlp = line.lines[_index];
      var cpx = ctlp.x;
      var cpy = ctlp.y;
      var newp = line.lines[_index + 1];
      var newx = newp.x;
      var newy = newp.y;
      var curw = newp.w;
      var prew = ctlp.w;
      var prep = line.lines[_index - 1];

      if (prep.action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_START_ACTION) {
        hasOptimizeStart = false;
      }

      if (newp.action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_END_ACTION) {
        hasOptimizeEnd = false;
      }

      if (!hasOptimizeEnd) {
        if (newx < oldx) {
          newx = Math.floor(newx + Math.max(newx - oldx, -50) * curw / thin * 2);
        } else {
          newx = Math.floor(newx + Math.min(newx - oldx, 50) * curw / thin * 2);
        }

        if (newy < oldy) {
          newy = Math.floor(newy + Math.max(newy - oldy, -50) * curw / thin * 2);
        } else {
          newy = Math.floor(newy + Math.min(newy - oldy, 50) * curw / thin * 2);
        }

        if (isNaN(newx) || isNaN(newy)) {
          newx = oldx;
          newy = oldy;
        }
      }

      if (cpx >= 0 && cpy >= 0) {
        var endx = (cpx + newx) / 2;
        var endy = (cpy + newy) / 2;
        var step = 0.05;
        var bx = oldx;
        var by = oldy;

        for (var i = step; i < 1 + step; i = i + step) {
          var midx = Math.pow(1 - i, 2) * oldx + 2 * i * (1 - i) * cpx + Math.pow(i, 2) * endx;
          var midy = Math.pow(1 - i, 2) * oldy + 2 * i * (1 - i) * cpy + Math.pow(i, 2) * endy;
          var midw = prew + (curw - prew) * i;

          if (!hasOptimizeStart) {
            midw = Math.min(curw / 3 + curw * i, curw);
          }

          if (!hasOptimizeEnd) {
            midw = prew - prew * i;
          }

          ctx.beginPath();
          ctx.moveTo(bx / 10000 * this.width, by / 10000 * this.height);
          ctx.lineTo(midx / 10000 * this.width, midy / 10000 * this.height);
          ctx.strokeStyle = color;
          ctx.lineWidth = Math.max(midw / 10000 * this.height, this.minLineWidth);
          ctx.lineCap = 'round';
          ctx.stroke();
          bx = midx;
          by = midy;
        }

        oldx = endx;
        oldy = endy;
      }

      if (!hasOptimizeStart) {
        hasOptimizeStart = true;
      }

      if (!hasOptimizeEnd) {
        hasOptimizeEnd = true;
      }
    }
  } else {
    var lineWidth = Math.max(line.thin / 10000 * this.height, this.minLineWidth);
    ctx.lineWidth = lineWidth;
    ctx.lineCap = 'round';
    ctx.strokeStyle = line.color;
    ctx.fillStyle = line.color;
    ctx.beginPath();

    if (line.lines.length == 1) {
      // 只有一个点，只能画点
      if (line.lines[0].action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_START_ACTION) {
        ctx.arc(line.lines[0].x / 10000 * this.width, line.lines[0].y / 10000 * this.height, ctx.lineWidth / 2, 0, Math.PI * 2, !0);
        ctx.fill();
        ctx.closePath();
      }

      return;
    }

    if (line.lines.length == 2) {
      // 在iOS上有个坑 （moveto和Lineto到同一个点画不出来）
      if (line.lines[0].x == line.lines[1].x && line.lines[0].y == line.lines[1].y) {
        // 判断两个点是不是一样的（是一样的就画点）
        //两个点相同
        ctx.arc(line.lines[0].x / 10000 * this.width, line.lines[0].y / 10000 * this.height, ctx.lineWidth / 2, 0, Math.PI * 2, !0);
        ctx.fill();
        ctx.closePath();
        return;
      } else {
        //首尾点不同
        if (line.lines[0].action == 1 && line.lines[1].action == 3) {
          //只有两个点
          ctx.moveTo(line.lines[0].x / 10000 * this.width, line.lines[0].y / 10000 * this.height);
          ctx.lineTo(line.lines[1].x / 10000 * this.width, line.lines[1].y / 10000 * this.height);
        } else if (line.lines[1].action == 2) {
          //等待第三个点画曲线
          return;
        }
      }
    }

    if (line.lines[0].action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_START_ACTION) {
      var _oldx = line.lines[0].x;
      var _oldy = line.lines[0].y;
      ctx.moveTo(_oldx / 10000 * this.width, _oldy / 10000 * this.height);
    } else {
      var _oldx2 = (line.lines[0].x + line.lines[1].x) / 2;

      var _oldy2 = (line.lines[0].y + line.lines[1].y) / 2;

      ctx.moveTo(_oldx2 / 10000 * this.width, _oldy2 / 10000 * this.height);
    }

    for (var _index2 = 1; _index2 < line.lines.length - 1; _index2++) {
      var ctrp = line.lines[_index2];
      var _newp = line.lines[_index2 + 1];
      var tox = (ctrp.x + _newp.x) / 2 / 10000 * this.width;
      var toy = (ctrp.y + _newp.y) / 2 / 10000 * this.height;
      ctx.quadraticCurveTo(ctrp.x / 10000 * this.width, ctrp.y / 10000 * this.height, tox, toy);
    }

    var lastp = line.lines[line.lines.length - 1];

    if (lastp.action == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].PROTOCOL_ACTION.LINE_END_ACTION) {
      ctx.lineTo(lastp.x / 10000 * this.width, lastp.y / 10000 * this.height);
    }

    ctx.stroke();
  }
};
/**
 * 获取白板是否允许涂鸦
 * 是否允许涂鸦，true 表示白板可以涂鸦，false 表示白板不能涂鸦
 */


Board.prototype.isDrawEnable = function () {
  return this.store.isDrawEnable();
};

Board.prototype.getGlobalBackgroundColor = function () {
  return this.store.getGlobalBackgroundColor();
};
/**
 * 获取当前的白板的背景色
 */


Board.prototype.getBackgroundColor = function () {
  return this.store.getBackgroundColor();
};

Board.prototype.getToolType = function () {
  var type = this.store.getType();
  var types = ['MOUSE', 'LINE', 'ERASER', 'RASER', 'GRAPH-LINE', 'GRAPH-OVAL', 'GRAPH-RECT', 'GRAPH-OVAL-SOLID', 'GRAPH-RECT-SOLID', 'POINTSELECT', 'SELECT', 'INPUTTEXT', 'ZOOM'];

  var findKey = function findKey(value) {
    var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {
      return a === b;
    };
    return Object.keys(_config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].BOARD_ACTION_TYPE).find(function (k) {
      return compare(_config_Constant__WEBPACK_IMPORTED_MODULE_14__["default"].BOARD_ACTION_TYPE[k], value);
    });
  };

  var key = findKey(type);
  return types.indexOf(key);
};

Board.prototype.getBrushColor = function () {
  return this.store.getColor();
};

Board.prototype.getBrushThin = function () {
  return this.store.getThin();
};

Board.prototype.setDataSyncEnable = function (enable) {
  this.store.setDataSyncEnable(enable);
};

Board.prototype.isDataSyncEnable = function () {
  return this.store.isDataSyncEnable();
};

Board.prototype.setAccessibleUsers = function (users) {
  this.store.setAccessibleUsers(users);
};
/**
 * 设置输入文字字体
 * @param {Number}
 */


Board.prototype.setTextFontFamily = function (typeFace) {
  this.store.setTextFontFamily(typeFace);
};
/**
 * 返回文字输入字体
 * @returns {String} 返回文字输入字体
 */


Board.prototype.getTextFontFamily = function () {
  return this.store.getTextFontFamily();
};
/**
 * 设置文字样式 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；
 * @param {Number} fontStyle 默认0
 */


Board.prototype.setTextFontStyle = function (fontStyle) {
  this.store.setTextFontStyle(fontStyle);
};
/**
 * 返回文字样式
 * @returns {String} 返回文字样式
 */


Board.prototype.getTextFontStyle = function () {
  return this.store.getTextFontStyle();
};
/**
 * 设置当前白板页宽高比
 * @returns {String} 设置当前白板页宽高比
 */


Board.prototype.setBoardRatio = function (ratio) {
  // 主动失去焦点
  this.inputBlur();
  this.store.setBoardRatio(this.store.getCurrentBoard(), ratio);
  this.draw();
};
/**
 * d2.23 获取当前白板缩放比
 * @return 白板缩放比
 */


Board.prototype.getBoardRatio = function () {
  return this.store.getBoardRatio() || this.option.ratio;
};
/**
 * 设置当前白板缩放比
 * @param {String} textFace 默认 sans-serif,serif,monospace
 */


Board.prototype.setBoardScale = function (scale) {
  // 主动失去焦点
  this.inputBlur();
  this.store.setBoardScale(scale);
  this.draw();
};
/**
 * d2.23 获取当前白板缩放比
 * @return 白板缩放比
 */


Board.prototype.getBoardScale = function () {
  return this.store.getBoardScale();
};
/**
 * d2.27 设置文件显示模式
 * @param enable 是否启用数据同步
 */


Board.prototype.setBoardContentFitMode = function (mode) {
  this.store.setBoardContentFitMode(mode);
};
/**
 * 获取文件平铺模式
 * @returns {*} 返回文件平铺模式
 */


Board.prototype.getBoardContentFitMode = function () {
  return this.store.getBoardContentFitMode();
};
/**
 * 设置直线样式
 * @param {Object} style 直线样式
 */


Board.prototype.setLineStyle = function (style) {
  this.store.setLineStyle(style);
};
/**
 * 获取直线样式
 * @returns {Object} 返回直线样式
 */


Board.prototype.getLineStyle = function () {
  return this.store.getLineStyle();
};
/**
 * 设置椭圆绘制模式
 * @param {*} mode 绘制模式
 */


Board.prototype.setOvalDrawMode = function (mode) {
  this.store.setOvalDrawMode(mode);
};
/**
 * 获取椭圆绘制模式
 * @returns {*} 返回绘制模式
 */


Board.prototype.getOvalDrawMode = function () {
  return this.store.getOvalDrawMode();
};
/**
 * 同步远端时间戳
 * @param {*} 用户Id
 * @param {*} 时间戳
 */


Board.prototype.syncRemoteTime = function (userId, timestamp) {
  this.checkUserTime(userId);
  this.userTime[userId].avTimeOffset = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp() - timestamp;
};

Board.prototype.checkUserTime = function (userId) {
  if (!this.userTime[userId]) {
    this.userTime[userId] = {
      avTimeOffset: 0,
      imTimeOffset: 0
    };
  }
};
/**
 * 获取同步时间戳
 * @return {*} 时间戳
 */


Board.prototype.getSyncTime = function () {
  return _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp();
}; // 修改6


Board.prototype.updateCursor = function () {
  if (!this.boardBox) {
    return;
  }

  var type = this.getToolType();
  var icon = this.store.getCursorIcons()[type];

  if (icon) {
    var cursor = "";

    if (icon.hasOwnProperty("cursor")) {
      if (type === 1 || type === 3) {
        // 如果是画笔和激光笔
        if (icon.url) {
          // 如果有设置自定义图标
          cursor = 'url(https://res.qcloudtiw.com/board/icons/none.png) 0 0, none'; // 则隐藏默认图标
        } else {
          cursor = icon["cursor"];
        }
      } else {
        if (icon["cursor"] == 'url') {
          cursor = "url(".concat(icon.url, ") ").concat(icon.offsetX || 0, " ").concat(icon.offsetY || 0, ", auto");
        } else {
          cursor = icon["cursor"];
        }
      }
    }

    if (cursor) {
      this.boardBox.style.cursor = cursor;
      this.boardBox.style.webkitTransform = 'translateX(-50%) translateY(-50%) !important';
      this.laserCanvas.style.cursor = cursor;
      this.textAreaBox.style.cursor = cursor;
    }
  } else {
    this.boardBox.style.cursor = "auto";
    this.laserCanvas.style.cursor = 'auto';
    this.textAreaBox.style.cursor = "auto";
  }
};

Board.prototype.pptIframeOnLoad = function () {
  var src = this.iframeDOM.src; // 如果是空白页

  if (src == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].ABOUTBLANK) {// 啥都不做
  } else if (src) {
    // 首屏渲染
    var urlFid = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].parseQueryString(decodeURIComponent(src)).fid;
    this.elkLog.report('iframe_load_done', {
      boardid: this.getCurrentBoard(),
      file_id: urlFid,
      extra_info: src
    });
    this.store.setNeedDraw(true); // 改为局部渲染后, 要调用一下
    // 同步一次postmessage的source

    _H5Control__WEBPACK_IMPORTED_MODULE_16__["default"].init(this.iframeDOM, {
      isFirstLoad: true
    });
  } // 触发预加载


  this.store.preloadBoard();
};

Board.prototype.inputBlur = function () {
  // 如果是输入态，则主动失去焦点
  if (this.textInputStatus === 1) {
    // this.keyboardinput && this.keyboardinput.blur();
    var component = this.textAreaFocusBlurStatus['focus'];
    component && component.dom && component.dom.blur();
  }
};

Board.prototype.getThumbnailImages = function (fid) {
  var file = this.getFileInfo(fid);
  var images = [];

  if (file) {
    if (file.fid === _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].COMMON_GROUP) {
      return images;
    }

    var url = file.downloadURL;

    if (!url) {
      return images;
    }

    if (file.type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5FILE || file.type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.VOD || file.type == _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.LIVE) {
      return images;
    } else if (file.type === _config_Config__WEBPACK_IMPORTED_MODULE_13__["default"].FILE_TYPE.H5PPT) {
      var thumbnailUrl = '';
      var arr = url.match('.*/([0-9a-zA-Z-]+)_tiw/h5/.*');

      if (arr && arr.length > 1) {
        // 走cam配置的转码规则
        thumbnailUrl = url.substring(0, url.indexOf('_tiw/h5')) + '_tiw/thumbnail';
      } else {
        var taskId = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].extractTaskId(url);
        thumbnailUrl = "https://thumbnail.qcloudtiw.com/".concat(taskId);
      }

      for (var _i2 = 0; _i2 < file.pageCount; _i2++) {
        images.push("".concat(thumbnailUrl, "/").concat(_i2 + 1, ".jpg"));
      }
    } else {
      // 以 / 结尾的后台转码
      if (url.endsWith('/')) {
        var _thumbnailUrl = '';

        var _arr = url.match('.*/([0-9a-zA-Z-]+)_tiw/picutre/.*');

        if (_arr && _arr.length > 1) {
          // 走cam配置的转码规则
          _thumbnailUrl = url.substring(0, url.indexOf('_tiw/picutre')) + '_tiw/thumbnail' + '/';
        } else {
          _thumbnailUrl = url;
        }

        for (var i = 0; i < file.pageCount; i++) {
          images.push("".concat(_thumbnailUrl).concat(i + 1, ".jpg"));
        }
      } else if (_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].isCosUrl(url)) {
        var previewBaseUrl = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].fileDownLoadUrlToPreviewUrl(url);

        for (var _i3 = 0; _i3 < file.pageCount; _i3++) {
          images.push("".concat(previewBaseUrl).concat(_i3 + 1));
        }
      }
    }

    return images;
  } else {
    return [];
  }
};

Board.prototype.createTranscode = function (data) {
  return this.store.createTranscode(data);
};

Board.prototype.describeTranscode = function (data) {
  return this.store.describeTranscode(data);
};

Board.prototype.setCursorIcon = function (toolType, cursorIcon) {
  this.store.setCursorIcon(toolType, cursorIcon);
  this.updateCursorIcons();
};

Board.prototype.addImageElement = function (url) {
  this.store.addImageElement(url);
};
/**
 * @memberof TEduBoard
 * @fn Boolean addAckData(String data)
 * @brief 确认数据是否发送成功
 */


Board.prototype.addAckData = function (data) {
  this.store.addSendAckData(data);
};
/**
 * @memberof TEduBoard
 * @fn Boolean syncAndReload()
 * @brief 同步本地发送失败的数据到远端并刷新本地数据
 * 
 * 接口用途：此接口主要用于网络恢复后，同步本地数据到远端，拉取远端数据到本地
 * 调用时机：在网络恢复后调用
 * 使用限制：如果历史数据还没有加载完成，则不允许重复调用，否则回调告警 TEDU_BOARD_WARNING_ILLEGAL_OPERATION
 * @warning reload等同于重新加载历史数据，会触发白板初始化时除onTEBInit之外的所有回调。
 */
// TEduBoard.prototype.syncAndReload = function () {
//   // 如果历史数据还没有加载完成，则不允许操作
//   if (!this.historySyncDone) {
//     this.event.fire(this, 'TEB_WARNING', TEduBoardWarningCode.TEDU_BOARD_WANNING_ILLEGAL_OPERATION, 'syncAndReload invalid while load history');
//     return;
//   }
//   this.historySyncDone = false;
//   this.board.syncAndReload();
// }


Board.prototype.syncAndReload = function () {
  this.store.syncAndReload();
};

Board.prototype.refresh = function () {
  //h5ppt
  this.resetPPTIframe(); //背景图片

  this.resetBackgroundImage(); //h5web

  this.resetH5IFrame(); //视频

  this.resetVideoStatus(); //图片元素

  this.removeImageElement(true);
  this.store.setNeedDraw(true);
  this.event.fire(this, 'TEB_REFRESH');
};

Board.prototype.snapshot = function (param) {
  var _this24 = this;

  var html2canvsUrl = 'https://res.qcloudtiw.com/board/third/html2canvas/html2canvas.min.js';

  if (window.html2canvas) {
    this.innerSnapshot(param);
  } else {
    this.loadJS(html2canvsUrl, function () {
      _this24.innerSnapshot(param);
    });
  }
};

Board.prototype.innerSnapshot = function (param) {
  var _this25 = this;

  if (window.html2canvas) {
    // iframe
    var iframes = [];
    var videos = [];
    var canvas = [];
    window.html2canvas(this.container, {
      allowTaint: true,
      useCORS: true,
      ignoreElements: function ignoreElements(element) {
        var tagName = element.tagName.toLocaleLowerCase();

        if (tagName === 'video') {
          // video涉及到跨域问题
          if (_this25.videoDiv.style.display !== 'none' && element.style.display !== 'none' && element.src) {
            videos.push(element);
          }

          return true;
        } else if (tagName === 'canvas') {
          // canvas独立的移动缩放策略
          if (element.style.display !== 'none') {
            canvas.push(element);
          }

          return true;
        } else if (tagName === 'iframe') {
          // iframe涉及到跨域问题
          if (element.style.display !== 'none' && element.src) {
            iframes.push(element);
          }

          return true;
        }

        return false;
      }
    }).then(function (canvas) {
      // 尺寸参数
      var scale = window.devicePixelRatio;
      var sx = 0,
          sy = 0;
      var swidth = 0,
          sheight = 0;
      var dx = 0,
          dy = 0;
      var dwidth = 0,
          dheight = 0;
      var width = _this25.container.clientWidth * scale;
      var height = _this25.container.clientHeight * scale; // 创建画布

      var retCanvas = document.createElement("canvas");
      retCanvas.width = width;
      retCanvas.height = height;
      var context = retCanvas.getContext("2d"); // 绘制背景图片/背景颜色/文本/图片元素

      context.drawImage(canvas, 0, 0, width, height); // 视频截图

      videos.forEach(function (video) {
        context.drawImage(video, 0, 0, width, height);
      }); // iframe截图

      var pros = [];
      iframes.forEach(function (iframe) {
        var pro = new Promise(function (resolve, reject) {
          var hasAck = {
            ack: false
          };

          var messageListener = function messageListener(e) {
            if (e.data.data && e.data.data.src === iframe.src) {
              if (e.data.cmd === _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_35__["default"].TIW_H5WEB_ACK) {
                hasAck.ack = true;
                iframe.contentWindow.postMessage({
                  module: _model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_36__["default"].TIW_H5WEB,
                  cmd: _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_35__["default"].TIW_H5WEB_SNAPSHOT,
                  data: {
                    src: iframe.src
                  }
                }, '*');
              } else if (e.data.cmd === _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_35__["default"].TIW_H5WEB_SNAPSHOT) {
                window.removeEventListener('message', messageListener);
                var dataUrl = e.data.data.dataUrl;

                if (iframe && dataUrl) {
                  var image = new Image();

                  image.onload = function () {
                    resolve({
                      iframe: iframe,
                      image: image
                    });
                  };

                  image.src = dataUrl;
                } else {
                  resolve({
                    iframe: iframe,
                    image: null
                  });
                }
              }
            }
          }; // 发送确认消息是否集成 jssdk


          window.addEventListener('message', messageListener);
          iframe.contentWindow.postMessage({
            module: _model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_36__["default"].TIW_H5WEB,
            cmd: _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_35__["default"].TIW_H5WEB_SYNC,
            data: {
              src: iframe.src
            }
          }, '*');
          setTimeout(function () {
            if (!hasAck.ack) {
              resolve({
                iframe: iframe,
                image: null
              });
              window.removeEventListener('message', messageListener);
            }
          }, 200);
        });
        pros.push(pro);
      });
      Promise.all(pros).then(function (results) {
        results.forEach(function (result) {
          var iframe = result.iframe;
          var image = result.image;

          if (iframe && image) {
            sx = (_this25.boardBox.clientWidth - _this25.container.clientWidth) / 2 * scale - (_this25.boardBox.offsetLeft - _this25.boardBox.clientWidth / 2) * scale;
            dx = sx < 0 ? -sx : 0;
            sx = sx < 0 ? 0 : sx;
            sy = (_this25.boardBox.clientHeight - _this25.container.clientHeight) / 2 * scale - (_this25.boardBox.offsetTop - _this25.boardBox.clientHeight / 2) * scale;
            dy = sy < 0 ? -sy : 0;
            sy = sy < 0 ? 0 : sy;
            swidth = _this25.boardBox.clientWidth > _this25.container.clientWidth ? _this25.container.clientWidth : _this25.boardBox.clientWidth;
            swidth = swidth * scale;
            sheight = _this25.boardBox.clientHeight > _this25.container.clientHeight ? _this25.container.clientHeight : _this25.boardBox.clientHeight;
            sheight = sheight * scale;
            dwidth = swidth;
            dheight = sheight;
            context.drawImage(image, sx, sy, swidth, sheight, dx, dy, dwidth, dheight);
          }
        }); // 绘制涂鸦

        sx = (_this25.el.clientWidth - _this25.container.clientWidth) / 2 * scale;
        dx = sx < 0 ? -sx : 0;
        sx = sx < 0 ? 0 : sx;
        sy = (_this25.el.clientHeight - _this25.container.clientHeight) / 2 * scale;
        dy = sy < 0 ? -sy : 0;
        sy = sy < 0 ? 0 : sy;
        swidth = _this25.el.clientWidth > _this25.container.clientWidth ? _this25.container.clientWidth : _this25.el.clientWidth;
        swidth = swidth * scale;
        sheight = _this25.el.clientHeight > _this25.container.clientHeight ? _this25.container.clientHeight : _this25.el.clientHeight;
        sheight = sheight * scale;
        dwidth = swidth;
        dheight = sheight;
        context.drawImage(_this25.el, sx, sy, swidth, sheight, dx, dy, dwidth, dheight);
        var dataUrl = retCanvas.toDataURL();

        _this25.event.fire(_this25, 'TEB_SNAPSHOT', {
          image: dataUrl,
          userData: param ? param.userData : ''
        });
      }); // // 尺寸参数
      // let scale = window.devicePixelRatio;
      // let x = this.el.offsetLeft * scale;
      // let y = this.el.offsetTop * scale;
      // let width = this.el.clientWidth * scale;
      // let height = this.el.clientHeight * scale;
      // // 创建画布
      // let retCanvas = document.createElement("canvas");
      // retCanvas.width = width;
      // retCanvas.height = height;
      // let context = retCanvas.getContext("2d");
      // // 绘制背景图片/背景颜色/文本/图片元素
      // context.drawImage(canvas, x, y, width, height, 0, 0, width, height);
      // // 绘制涂鸦
      // context.drawImage(this.el, 0, 0, width, height, 0, 0, width, height);
      // // 绘制视频
      // if (this.videoDiv) {
      //   if (this.videoDiv.style.display === 'block') {
      //     let videoTags = this.videoDiv.getElementsByTagName('video');
      //     let videoTag = videoTags[videoTags.length - 1];
      //     videoTag.setAttribute("crossOrigin",'Anonymous');
      //     context.drawImage(videoTag, 0, 0, width, height);
      //   }
      // }
      // // 绘制H5网页/H5PPT
      // if (this.iframeDOM) {
      //   this.iframeDOM.contentWindow.postMessage({
      //     module: TEduBoardIFrameModule.TIW_H5WEB,
      //     cmd: TEduBoardH5WebEvent.TIW_H5WEB_SNAPSHOT,
      //     data: TEduBoardH5WebEvent.TIW_H5WEB_SNAPSHOT
      //   }, '*')
      // }
      // let dataUrl = retCanvas.toDataURL();
      // let retDom = document.getElementById("html2Image");
      // retDom.setAttribute('style', `width:${this.el.clientWidth/2}px; height:${this.el.clientHeight/2}px; border: 4px solid #00FF00; `);
      // retDom.src = dataUrl;
    });
  }
};

Board.prototype.resetPPTIframe = function () {
  this.iframeDOM && this.iframeDOM.remove();
  this.iframeDOM = _PptIFrame__WEBPACK_IMPORTED_MODULE_29__["default"].createElement({
    sdkAppId: this.option.sdkAppId,
    userId: this.option.userId,
    progressBarUrl: this.progressBarUrl
  });
  this.store.setIframeDom(this.iframeDOM);
  this.iframeDOM.onload = this.pptIframeOnLoad.bind(this);
  this.boardBox.appendChild(this.iframeDOM);
};

Board.prototype.resetH5IFrame = function () {
  this.h5Iframe && (this.h5Iframe.src = "");
};

Board.prototype.resetBackgroundImage = function () {
  this.img && (this.img.src = "");
};

Board.prototype.destroy = function () {
  this.elkLog.report('destroy');
  this.store.destroy();
  this.store = null; // this.drawTimer && clearTimeout(this.drawTimer);

  this.drawTimer && clearInterval(this.drawTimer); // window.cancelAnimationFrame(this.render.bind(this));

  window.removeEventListener('message', this.windowMessageListenerBind, false);
  window.removeEventListener('resize', this.windowResizeListenerBind, false);
  document.body.removeEventListener("mouseup", this.mouseupUpdateCursor, false);
  window.removeEventListener('mouseup', this.mouseupUpdateCursor, false);
  document.body.removeEventListener("keydown", this.keydownBodyEvent, false);
  this.container && (this.container.innerHTML = '');
  document.removeEventListener(this.visibilityChangeName, this.visibilityChangeBind);
};

Board.prototype.addH5Element = function (url) {
  this.store.addH5Element(url);
};

Board.prototype.renderH5WebElement = function (item) {
  if (this.store.elementMap.get(String(item.belongSeq)) && item.show) {
    item.setBoardSize(this.width, this.height);
    item.setElementSize();
    item.renderTo(this.webviewWrap, this.store.getType() === 'mouse');
  } else {
    item.remove();
  }
};

Board.prototype.removeH5WebElement = function () {
  var notMatchElements = this.webviewWrap.querySelectorAll(":not([data-bid=\"".concat(this.getCurrentBoard(), "\"])"));

  for (var index = 0; index < notMatchElements.length; index++) {
    notMatchElements[index].remove();
  }

  var elements = this.webviewWrap.querySelectorAll("[data-bid=\"".concat(this.getCurrentBoard(), "\"]"));

  for (var _index3 = 0; _index3 < elements.length; _index3++) {
    if (!this.store.elementMap.get(String(elements[_index3].dataset.belongSeq))) {
      elements[_index3].remove();
    }
  }

  elements = this.webviewWrap.querySelectorAll("[data-bid=\"".concat(this.getCurrentBoard(), "\"]"));

  if (elements.length) {
    // 如果还有元素
    this.webviewWrap.style.zIndex = 200;
  } else {
    // r如果没有元素了
    delete this.webviewWrap.style.zIndex;
  }
};

Board.prototype.addElement = function (params) {
  return this.store.addElement(params);
};

Board.prototype.removeElement = function (id) {
  return this.store.removeElement(id);
};
/**
 * 申请文件转码
 */


Board.prototype.applyFileTranscode = function (fileObj, config) {
  this.store.applyFileTranscode(fileObj, config);
};
/**
 * 申请文件转码
 */


Board.prototype.addTranscodeFile = function (result, needSwitch) {
  this.elkLog.report('addTranscodeFile', {
    extra_info: JSON.stringify({
      result: result,
      needSwitch: needSwitch
    })
  });
  var fid = "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_15__["default"].getTimeStamp());

  if (!result.pages || result.pages == 0) {
    return;
  }

  if (result.url.endsWith('/')) {
    var picUrls = [];

    for (var i = 0; i < result.pages; i++) {
      picUrls.push("".concat(result.url).concat(i + 1, ".jpg"));
    }

    try {
      var width = result.resolution.split('x')[0];
      var height = result.resolution.split('x')[1];
      var number = _util_util__WEBPACK_IMPORTED_MODULE_15__["default"].maxCommonDivisor(width, height);
      var ratio = "".concat(width / number, ":").concat(height / number);
      return this.addFile(fid, picUrls, result.title, result.url, ratio, needSwitch);
    } catch (error) {
      return this.addFile(fid, picUrls, result.title, result.url, null, needSwitch);
    }
  } else if (result.url.endsWith('.html')) {
    return this.addH5PPTFile(result.url, result.title, needSwitch);
  }
};

Board.prototype.loadJS = function (url, callback) {
  var script = document.createElement('script');
  script.type = 'text/javascript';

  if (script.readyState) {
    // IE
    script.onreadystatechange = function () {
      if (script.readyState == 'loaded' || script.readyState == 'complete') {
        script.onreadystatechange = null;
        callback();
      }
    };
  } else {
    //其他浏览器
    script.onload = function () {
      callback();
    };
  }

  script.src = url;
  document.getElementsByTagName('head')[0].appendChild(script);
};

Board.prototype.setFileScale = function (fid, scale) {
  this.store.setFileScale(fid, scale);
};

Board.prototype.getFileScale = function (fid) {
  return this.store.getFileScale(fid);
};

/* harmony default export */ __webpack_exports__["default"] = (Board);

/***/ }),

/***/ "./src/board/CompositionEvent.js":
/*!***************************************!*\
  !*** ./src/board/CompositionEvent.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CompositionEvent =
/*#__PURE__*/
function () {
  function CompositionEvent() {
    _classCallCheck(this, CompositionEvent);
  }

  _createClass(CompositionEvent, [{
    key: "onCompositionstart",
    value: function onCompositionstart() {
      // 当前的 this 是this.keyboardinput
      // 调用输入法，加锁
      this.compositionLock = true;
    }
  }, {
    key: "onCompositionupdate",
    value: function onCompositionupdate() {// 当前的 this 是this.keyboardinput
      // 通过输入法输入字符
      // oninput同样可监测此变化
      // 故此处不做任何操作
    }
  }, {
    key: "onCompositionend",
    value: function onCompositionend() {
      // 当前的 this 是this.keyboardinput
      // 完成输入，关闭输入法，解锁
      this.compositionLock = false;
      this.compositionEndCallback && this.compositionEndCallback();
    }
  }]);

  return CompositionEvent;
}();

/* harmony default export */ __webpack_exports__["default"] = (CompositionEvent);

/***/ }),

/***/ "./src/board/Event.js":
/*!****************************!*\
  !*** ./src/board/Event.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_0__);


function Event() {}

Event.prototype.on = function (name, cb) {
  this._cbs = this._cbs || {};
  (this._cbs[name] || (this._cbs[name] = [])).unshift(cb);
  return this;
};
/**
 *
 * @param  {String}   name
 * @param  {Function} cb
 * @return {Event}
 */


Event.prototype.off = function (name, cb) {
  this._cbs = this._cbs || {};
  if (!name) return this._cbs = {};
  if (!cb) return delete this._cbs[name];
  var cbs = this._cbs[name] || [];
  var i;

  while (cbs && ~(i = cbs.indexOf(cb))) {
    cbs.splice(i, 1);
  }

  return this;
};
/**
 * @param  {String} name
 * @return {Event}
 */


Event.prototype.fire = function () {
  var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
  var name = arguments.length > 1 ? arguments[1] : undefined;
  this._cbs = this._cbs || {};
  var cbs = this._cbs[name];

  if (cbs) {
    //var args = [].slice.call(arguments, 1);
    var l = cbs.length;

    for (var _len = arguments.length, data = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      data[_key - 2] = arguments[_key];
    }

    while (l--) {
      cbs[l].apply(scope, [].concat(data));
    }
  }

  return this;
};

/* harmony default export */ __webpack_exports__["default"] = (Event);

/***/ }),

/***/ "./src/board/Graph.js":
/*!****************************!*\
  !*** ./src/board/Graph.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
// const util = require('../util/util');
 // 固定图形

function Graph(user, option) {
  this.user = user;
  this.type = 'graph';
  this.graph = option.graph; // line:直线 circle:圆 rect: 矩形

  this.seq = option.seq; // seq 唯一编号

  this.show = option.show; // 是否展示

  this.status = 'begin'; // 图形的状态

  this.select = false; // 是否被选了

  this.time = _util_util__WEBPACK_IMPORTED_MODULE_0__["default"].getTimeStamp();
  this.color = option.color;
  this.thin = option.thin;
  this.solid = option.solid || false; // 是否实心

  this.style = option.style; // 样式
  // 记录开始点与结束点

  this.startPoint = {
    x: option.beginPoint.x,
    y: option.beginPoint.y,
    seq: option.beginPoint.seq
  };
  this.endPoint = {
    x: option.endPoint.x,
    y: option.endPoint.y,
    seq: option.endPoint.seq
  };
}

/* harmony default export */ __webpack_exports__["default"] = (Graph);

/***/ }),

/***/ "./src/board/GroupTemplate.js":
/*!************************************!*\
  !*** ./src/board/GroupTemplate.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var GroupTemplate =
/*#__PURE__*/
function () {
  function GroupTemplate() {
    _classCallCheck(this, GroupTemplate);
  }

  _createClass(GroupTemplate, [{
    key: "getTemplate",
    value: function getTemplate() {
      return "<canvas style=\"z-index:10;position:absolute; top:0; left:0;line-height:1;\"></canvas>\n    <canvas style=\"z-index:15;position:absolute; top:0; left:0;line-height:1;\"></canvas>\n    <div id=\"tic_video_wrap\" style=\"z-index:20;position:absolute; top:0; left:0; display:none;\"></div>\n    <div class=\"tic_board__imagewrap\" style=\"position:absolute;z-index:7;width:100%;height:100%;\"></div>\n    <div class=\"tic_board_textbox\" style=\"position:absolute;z-index:10;width:100%;height:100%;\"></div>\n    <div class=\"tic_cursorlayer__wrap\" style=\"position:absolute;z-index:0;width:100%;height:100%;\"></div>\n    <div class=\"tiw_board_webview_wrap\" style=\"position:absolute;z-index:0;width:100%;height:100%;\"></div>\n    <div class=\"tx_board_canvas_box\" style=\"position: absolute;\">\n      <img src=\"".concat(_config_Config__WEBPACK_IMPORTED_MODULE_0__["default"].defaultLoadingImage, "\" width=\"48\" height=\"48\" class=\"tic_board_bg_progress\" style=\"display:none;position:absolute;left: 50%;top: 50%;-webkit-transform: translateX(-50%) translateY(-50%);transform: translateX(-50%) translateY(-50%);\" />\n      <img class=\"tic_board_img_bg\" style=\"display:none; position:absolute; top:0; left:0;z-index:5;\" />\n      <div class=\"tic_board_bg\" style=\"z-index:4;position:absolute; top:0; left:0;\"></div>\n      <textarea maxlength=\"").concat(_config_Config__WEBPACK_IMPORTED_MODULE_0__["default"].TEXT_MAX_LENGTH, "\" style=\"display:none;\" rows=\"1\"></textarea>\n    </div>");
    }
  }]);

  return GroupTemplate;
}();

/* harmony default export */ __webpack_exports__["default"] = (GroupTemplate);

/***/ }),

/***/ "./src/board/H5Control.js":
/*!********************************!*\
  !*** ./src/board/H5Control.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  postMessage: function postMessage(iframeDom, data) {
    iframeDom && iframeDom.contentWindow && iframeDom.contentWindow.postMessage(data, '*');
  },
  init: function init(iframeDom, data) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'init',
      data: data
    }, '*');
  },
  // 获取总页数
  count: function count(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'count'
    }, '*');
  },
  // 获取当前页索引
  getCurrentSlideIndex: function getCurrentSlideIndex(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'current_slide_index'
    }, '*');
  },
  // 获取当前步数索引
  getCurrentStepIndex: function getCurrentStepIndex(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'current_step_index'
    }, '*');
  },
  // 获取当前页的动画总步数
  getCurrentStepCount: function getCurrentStepCount(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'current_step_count'
    }, '*');
  },
  // 下一页（新版本不使用）
  nextPage: function nextPage(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'next_page'
    }, '*');
  },
  // 上一页（新版本不使用）
  prevPage: function prevPage(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'prev_page'
    }, '*');
  },
  // 下一步
  gotoNextStep: function gotoNextStep(iframeDom, data) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'next_step_new',
      data: data
    }, '*');
  },
  // 上一步
  gotoPreviousStep: function gotoPreviousStep(iframeDom, data) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'prev_step_new',
      data: data
    }, '*');
  },
  // 跳转到到指定页(暂时不用)
  gotoSlide: function gotoSlide(iframeDom, slideIndex, autoStart) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'goto_slide',
      data: {
        slideIndex: slideIndex,
        autoStart: autoStart
      }
    }, '*');
  },
  // 跳转到指定页指定步
  gotoTimestamp: function gotoTimestamp(iframeDom, slideIndex, stepIndex, autoStart, timeOffset) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'goto_timestamp',
      data: {
        slideIndex: slideIndex,
        stepIndex: stepIndex,
        autoStart: autoStart,
        timeOffset: timeOffset
      }
    }, '*');
  },
  // 跳转到指定页指定步
  gotoTimestampNew: function gotoTimestampNew(iframeDom, params) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'goto_timestamp_new',
      data: {
        slideIndex: params.slideIndex,
        stepIndex: params.stepIndex,
        resetStep: params.resetStep,
        usePrevNextStepMethod: params.usePrevNextStepMethod,
        isPassive: params.isPassive
      }
    }, '*');
  },
  clearIframeCache: function clearIframeCache(iframeDom) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'clear_cache'
    }, '*');
  },
  // 设置fid
  setFid: function setFid(iframeDom, fid) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'set_fid',
      data: fid
    }, '*');
  },
  pptAction: function pptAction(iframeDom, data) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'ppt_action',
      data: data
    }, '*');
  },
  // 发送鼠标消息
  sendMouseEvent: function sendMouseEvent(iframeDom, data) {
    this.postMessage(iframeDom, {
      module: 'tx_board_postmessage',
      cmd: 'mouse_event',
      data: data
    }, '*');
  }
});

/***/ }),

/***/ "./src/board/H5IFrame.js":
/*!*******************************!*\
  !*** ./src/board/H5IFrame.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var H5IFrame =
/*#__PURE__*/
function () {
  function H5IFrame(src) {
    _classCallCheck(this, H5IFrame);

    this.src = src;
    this.dom = null;
    this.isRepeatLoad = false; // 是否重复加载
  } // 创建iframe节点


  _createClass(H5IFrame, [{
    key: "createElement",
    value: function createElement(container, url, onloadCallback) {
      var dom = this.remove(container, url);

      if (dom) {
        this.dom = dom;
        this.isRepeatLoad = true; // 重复加载 (在同一个url上进行涂鸦)
      } else {
        this.isRepeatLoad = false; // 第一次加载

        this.dom = document.createElement('iframe');
        this.dom.classList.add('tic_board_h5_file');
        this.dom.style.display = 'none';
        this.dom.style.border = 'none';
        this.dom.style.position = 'absolute';
        this.dom.style.top = 0;
        this.dom.style.left = 0;
        this.dom.style.zIndex = 25;
        this.dom.src = url;
        this.dom.scrolling = 'auto';

        this.dom.onload = function () {
          onloadCallback && onloadCallback();
        };

        container.appendChild(this.dom);
      }
    }
  }, {
    key: "render",
    value: function render(beforeRenderCallback) {
      if (!this.isRepeatLoad) {
        // 不是重复加载
        beforeRenderCallback && beforeRenderCallback();
      }

      this.dom.style.display = 'block';
    }
  }, {
    key: "layout",
    value: function layout(width, height) {
      if (this.dom) {
        this.dom.width = width;
        this.dom.height = height;
      }
    }
  }, {
    key: "remove",
    value: function remove(container, url) {
      var currentIframe = null;
      var oldIFrame = container.getElementsByClassName('tic_board_h5_file');

      for (var i = 0, len = oldIFrame.length; i < len; i++) {
        var iframe = oldIFrame[i]; // 如果有url, 且当前的页面的iframe，则不删除

        var src = iframe.getAttribute('src'); // 注意iframe.src 与 iframe.getAttribute('src')不同 https://music.qq.com  https://music.qq.com/

        if (url && (src == url || src == encodeURI(url))) {
          currentIframe = iframe;
        } else {
          iframe.remove();
        }
      }

      return currentIframe;
    }
  }]);

  return H5IFrame;
}();

/* harmony default export */ __webpack_exports__["default"] = (H5IFrame);

/***/ }),

/***/ "./src/board/InputText.js":
/*!********************************!*\
  !*** ./src/board/InputText.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
// const util = require('../util/util');
 // 文字输入

function InputText(user, option) {
  this.user = user;
  this.type = 'inputtext';
  this.seq = option.belongSeq; // seq 唯一编号

  this.belongSeq = option.belongSeq;
  this.scale = 1; // 激光笔的状态  正在用 1 以及 结束了 0

  this.color = 0;
  this.typeFace = "";
  this.textSize = 0;
  this.fontStyle = 0;
  this.time = _util_util__WEBPACK_IMPORTED_MODULE_0__["default"].getTimeStamp();
  this.text = "";
  this.show = true; // 是否展示

  this.textWidth = 0; // 字体所占空间的宽度

  this.textHeight = 0; // 字体所占空间的高度

  this.location = {
    x: option.x,
    y: option.y
  };
}

/* harmony default export */ __webpack_exports__["default"] = (InputText);

/***/ }),

/***/ "./src/board/Line.js":
/*!***************************!*\
  !*** ./src/board/Line.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");

// const util = require('../util/util');
 // 随便画画

function Line(user, option) {
  // 开始画线之后 颜色、粗细等参数是不会变的
  // 开始画线的action 作为传参
  this.user = user; // line属于的user

  this.type = 'line'; // 类型为 画线

  this.seq = option.belongSeq; // seq 唯一编号,标注这条线的

  this.belongSeq = option.belongSeq; // belongSeq 这条线的所属

  this.show = option.show; // 是否展示

  this.status = 'begin'; // 线的状态  线的状态是没用的

  this.select = false; // 是否被选了

  this.color = option.color;
  this.time = option.time || _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.thin = option.thin;
  this.writing = option.writing;
  this.startSeq = option.belongSeq;
  this.endSeq = 0;
  this.drawIndex = 0; //下一次渲染索引
  // 每一个点  {x, y, seq}

  this.lines = [{
    action: option.action,
    x: option.x,
    y: option.y,
    w: option.w,
    belongSeq: option.belongSeq,
    seq: option.seq,
    timestamp: option.timestamp
  }]; // 拟合曲线（平滑)

  this.fitCurve = []; // 线所在矩形区域的边界

  this.border = {
    maxX: option.x,
    maxY: option.y,
    minX: option.x,
    minY: option.y
  };
}

Line.prototype.setBorder = function (x, y) {
  if (x + this.thin > this.border.maxX) {
    this.border.maxX = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getEffectivePoint(x + this.thin, this.thin);
  }

  if (x - this.thin < this.border.minX) {
    this.border.minX = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getEffectivePoint(x - this.thin, this.thin);
  }

  if (y + this.thin > this.border.maxY) {
    this.border.maxY = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getEffectivePoint(y + this.thin, this.thin);
  }

  if (y - this.thin < this.border.minY) {
    this.border.minY = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getEffectivePoint(y - this.thin, this.thin);
  }
};

Line.prototype.sort = function () {
  // 给lines排序
  this.lines.sort(function (a, b) {
    return a.seq - b.seq;
  });
};

/* harmony default export */ __webpack_exports__["default"] = (Line);

/***/ }),

/***/ "./src/board/Operation.js":
/*!********************************!*\
  !*** ./src/board/Operation.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// 操作的对象  user应该就是本地对象了
function Operation(user, option) {
  this.user = user; // 画画类型

  this.type = option.type; // 操作的seqs  是个数字或者数组

  this.seq = option.seq;
}

/* harmony default export */ __webpack_exports__["default"] = (Operation);

/***/ }),

/***/ "./src/board/PptIFrame.js":
/*!********************************!*\
  !*** ./src/board/PptIFrame.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var PptIFrame =
/*#__PURE__*/
function () {
  function PptIFrame() {
    _classCallCheck(this, PptIFrame);
  }

  _createClass(PptIFrame, null, [{
    key: "createElement",
    // 创建iframe节点
    value: function createElement(param) {
      var dom = document.createElement('iframe');
      dom.classList.add('tic_iframe_H5');
      dom.style.border = 'none';
      dom.style.display = 'none';
      dom.scrolling = 'no'; // dom.setAttribute('allow', 'autoplay');
      // dom.setAttribute('autoplay', '1');

      dom.setAttribute('name', JSON.stringify({
        sdkAppId: param.sdkAppId,
        userId: param.userId,
        version: _config_Config__WEBPACK_IMPORTED_MODULE_0__["default"].VERSION,
        progressBarUrl: param.progressBarUrl
      }));
      return dom;
    }
  }]);

  return PptIFrame;
}();

/* harmony default export */ __webpack_exports__["default"] = (PptIFrame);

/***/ }),

/***/ "./src/board/Raser.js":
/*!****************************!*\
  !*** ./src/board/Raser.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// 激光笔
function Raser(user, option) {
  this.action = option.action;
  this.user = user;
  this.type = 'raser';
  this.seq = option.seq; // seq 唯一编号

  this.color = option.color;
  this.radius = option.radius;
  this.timestamp = option.timestamp;
  this.location = {
    x: option.x,
    y: option.y
  };
  this.toolType = option.toolType || 3; // 1 涂鸦 3 激光笔
}

/* harmony default export */ __webpack_exports__["default"] = (Raser);

/***/ }),

/***/ "./src/board/Select.js":
/*!*****************************!*\
  !*** ./src/board/Select.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// 选择框
// 默认是点选 pointselect  点选不需要重绘
// 当某一个滑动距离变大时 认为变成了 框选 select  需要重绘
function Select(user, option) {
  this.user = user;
  this.type = 'select';
  this.seq = Math.floor(Math.random() * 100); // seq 唯一编号

  this.show = true; // 是否展示框选

  this.color = option.color;
  this.startInfo = {
    x: option.startx,
    y: option.starty
  };
  this.location = {
    x: option.x,
    y: option.y
  };
}

/* harmony default export */ __webpack_exports__["default"] = (Select);

/***/ }),

/***/ "./src/board/Store.js":
/*!****************************!*\
  !*** ./src/board/Store.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.object.keys */ "./node_modules/core-js/modules/es6.object.keys.js");
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es7.array.includes */ "./node_modules/core-js/modules/es7.array.includes.js");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es6.string.includes */ "./node_modules/core-js/modules/es6.string.includes.js");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");
/* harmony import */ var core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es7_object_values__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es7.object.values */ "./node_modules/core-js/modules/es7.object.values.js");
/* harmony import */ var core_js_modules_es7_object_values__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_object_values__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es6.string.starts-with */ "./node_modules/core-js/modules/es6.string.starts-with.js");
/* harmony import */ var core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
/* harmony import */ var core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_iterator__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");
/* harmony import */ var core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_iterator__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es6_map__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es6.map */ "./node_modules/core-js/modules/es6.map.js");
/* harmony import */ var core_js_modules_es6_map__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_map__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _config_Constant__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../config/Constant */ "./src/config/Constant.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _util_Seq__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../util/Seq */ "./src/util/Seq.js");
/* harmony import */ var _Operation__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./Operation */ "./src/board/Operation.js");
/* harmony import */ var _Line__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./Line */ "./src/board/Line.js");
/* harmony import */ var _InputText__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./InputText */ "./src/board/InputText.js");
/* harmony import */ var _Graph__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./Graph */ "./src/board/Graph.js");
/* harmony import */ var _Select__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./Select */ "./src/board/Select.js");
/* harmony import */ var _Raser__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./Raser */ "./src/board/Raser.js");
/* harmony import */ var _net_Request__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../net/Request */ "./src/net/Request.js");
/* harmony import */ var _net_Heartbeat__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../net/Heartbeat */ "./src/net/Heartbeat.js");
/* harmony import */ var _net_Report__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../net/Report */ "./src/net/Report.js");
/* harmony import */ var _H5Control__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./H5Control */ "./src/board/H5Control.js");
/* harmony import */ var _model_BoardInfoModel__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../model/BoardInfoModel */ "./src/model/BoardInfoModel.js");
/* harmony import */ var _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../model/TEduBoardErrorCode */ "./src/model/TEduBoardErrorCode.js");
/* harmony import */ var _model_TEduBoardContentFitMode__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../model/TEduBoardContentFitMode */ "./src/model/TEduBoardContentFitMode.js");
/* harmony import */ var _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../model/TEduBoardLineType */ "./src/model/TEduBoardLineType.js");
/* harmony import */ var _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../model/TEduBoardTextStyle */ "./src/model/TEduBoardTextStyle.js");
/* harmony import */ var _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../model/TEduBoardArrowType */ "./src/model/TEduBoardArrowType.js");
/* harmony import */ var _model_DragModel__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../model/DragModel */ "./src/model/DragModel.js");
/* harmony import */ var _model_DragDataList__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../model/DragDataList */ "./src/model/DragDataList.js");
/* harmony import */ var _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../model/TEduBoardOvalDrawMode */ "./src/model/TEduBoardOvalDrawMode.js");
/* harmony import */ var _model_TEduBoardImageElement__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../model/TEduBoardImageElement */ "./src/model/TEduBoardImageElement.js");
/* harmony import */ var _event_TEduEvent__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../event/TEduEvent */ "./src/event/TEduEvent.js");
/* harmony import */ var _component_TEduBoardH5WebElement__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../component/TEduBoardH5WebElement */ "./src/component/TEduBoardH5WebElement.js");
/* harmony import */ var _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../model/TEduBoardImageFitMode */ "./src/model/TEduBoardImageFitMode.js");
/* harmony import */ var _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../model/TEduBoardElementType */ "./src/model/TEduBoardElementType.js");
/* harmony import */ var _cos_FileCos__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../cos/FileCos */ "./src/cos/FileCos.js");























function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }































function Store(options) {
  var _this = this;

  this.event = options.event;
  this.aegis = options.aegis;
  this.elkLog = options.elkLog;
  this.options = JSON.parse(JSON.stringify(options));
  this.maxSeq = 0; //最大白板翻页的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxSeq的直接丢弃

  this.maxAddTextSeq = 0; //最大文字输入的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxAddTextSeq的直接丢弃

  this.maxMoveSeq = 0; //最大移动缩放的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxMoveSeq的直接丢弃

  this.maxVideoSeq = 0; //最大Video的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxSeq的直接丢弃

  this.maxImageElementSeq = 0; // //最大imageelement的seq 用来解决各端同步收到IM消息顺序不对的问题和本地远端同时移动的问题，小于maxSeq的直接丢弃

  this.seqFilter = {};
  this.laserData = [];
  this.request = new _net_Request__WEBPACK_IMPORTED_MODULE_32__["default"](options);
  this.report = new _net_Report__WEBPACK_IMPORTED_MODULE_34__["default"](this.request, this.elkLog);
  this.report.setCallback(function (datas, error) {
    if (!error) {
      _this.addReportAckData(datas);
    }
  });
  this.report.setPreCallback(function (datas) {
    _this.addReportAckData(datas, false);
  }); // 默认权限是0

  this.permissions = 0; // 默认为空表示可以访问所有用户涂鸦

  this.accessibleUsers = [];

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isUndefined(options.syncHistroyEnable) || _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isNull(options.syncHistroyEnable)) {
    this.syncHistroyEnable = true;
  } else {
    this.syncHistroyEnable = options.syncHistroyEnable;
  }

  this.identifier = options.tlsData.identifier; // 课堂ID

  this.classId = options.classId;
  this.user = options.tlsData.identifier; // data：所有的对象  按照开始时间 排序

  this.data = {};
  this.progressEnable = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROGRESS_ENABLE; // 操作data

  this.opData = {};
  this.opIndex = {}; // userData 所有的用户的对象， 具体的对象和data里面是同一个

  this.userData = {}; // 背景图

  this.backgroundPic = {}; // 背景颜色

  this.backgroundColor = {}; // PPT动画文件预加载状态

  this.pptFilePreloaded = {}; // 白板比例

  this.boardRatio = {};
  this.dragDataList = new _model_DragDataList__WEBPACK_IMPORTED_MODULE_43__["default"](); // 白板放大，拖动数据

  this.scale = this.options.scale || _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].SCALE;
  this.ratio = this.options.ratio || _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO; // 白板的分辨率

  this.currentGroup = null;
  this.currentBoard = null;
  this.boardList = [];
  this.groups = [];
  this.drawEnable = true;
  this.enableHandwriting = false; // 画笔颜色

  this.color = 0; // 画笔粗细

  this.thin = 0; // 文字输入字体

  this.typeFace = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].TEXT_FONT_FAMILY; // 文字输入文字大小

  this.textSize = 0; // 文字输入文字颜色

  this.textColor = ''; // 文字输入样式  0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；

  this.fontStyle = _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_40__["default"].TEDU_BOARD_TEXT_STYLE_NORMAL; // 涂鸦平滑级别

  this.smoothLevel = 0; // 数据同步开关

  this.dataSyncEnable = false; // 预加载深度

  this.preloadDepth = 0; // 全局背景色

  this.globalBackgroundColor = 0; // 直线样式

  this.lineStyle = {
    lineType: _model_TEduBoardLineType__WEBPACK_IMPORTED_MODULE_39__["default"].TEDU_BOARD_LINE_TYPE_SOLID,
    startArrowType: _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_41__["default"].TEDU_BOARD_ARROW_TYPE_NONE,
    endArrowType: _model_TEduBoardArrowType__WEBPACK_IMPORTED_MODULE_41__["default"].TEDU_BOARD_ARROW_TYPE_NONE
  }; // 椭圆样式

  this.ovalDrawMode = _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_44__["default"].TEDU_BOARD_OVAL_DRAW_MODE_FIX_START;
  this.ovalCenterPoint = null; // 当前的状态   line:随便画线  eraser: 橡皮擦  raser: 激光笔  pointselect: 点选  select: 选择框  move: 拖拽  graph-line:直线
  // graph-circle:圆   graph-rect:矩形

  this.type = _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BOARD_ACTION_TYPE.LINE; // 无背景图的时候  是否透明

  this.transparent = false; // 当前操作的seq

  this.seq = 0; // 当前被选择的元素列表

  this.selectedList = []; // 选择之后 拖拽时展示的总区域   点选为当前元素的外区域  框选为所有被选中的图形的总区域

  this.selectArea = {}; // 用于计算seq

  this.gSeq = 0; // 白板ID的Seq

  this.boardIdSeq = 0;
  this.belongLineSeq = 0; //画线条的时候，用来标注移动过程中是属于什么哪条线段的
  // 对外发送的白板实时数据

  this.realTimeData = []; // report失败

  this.reportAckDatas = {}; // send失败

  this.sendAckDatas = {};
  this.beforeMoveType = ''; // 记录由move之前的状态 （点选/框选）

  this.containerWidth = 0; // 白板所在容器的宽度（id节点的宽度）

  this.containerHeight = 0; // 白板所在容器的高度（id节点的高度）

  this.boardWidth = 0;
  this.boardHeight = 0;
  this.boardContentFitMode = 0;
  this.imageTimeout = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].IMAGE_TIMEOUT; // 30s 默认图片加载超时时间

  this.faceData = []; // 白板首页数据

  this.textInputTask = null; // 文本定时器（老师在输入过程中，是有im同步的，但输入没有完成，此时还不会报到后台，学生这时候进房，历史数据没有）

  this.lastInputActionData = null; // 文本输入最后发送的im实时数据

  this.transcodeIntervalMap = {}; //文件转码定时查询任务定时器

  this.taskIdUserDataMap = {}; // 文件转码的taskid的userdata对于关系

  this.drawRaserTask = null; // 渲染激光笔和铅笔图标的任务

  this.sendInterval = null; // 实时消息定时发送任务

  this.fileMessageCosInfo = {
    bucket: null,
    appid: null,
    region: null
  };
  this.elementMap = new Map();
  this.fileCos = null;
  this.cosData = {
    appid: null,
    bucket: null
  }; // cos信息

  this.heartbeat = new _net_Heartbeat__WEBPACK_IMPORTED_MODULE_33__["default"]({
    newEnterId: this.options.newEnterId,
    classId: this.classId,
    request: this.request,
    log: this.elkLog
  }); ///////////////////////////////
  ////////////////////////////////
  ///////////////////
  ///////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////
  //////////////////////////////////////
  //////////////////////////
  ////////////////////////////////////////////////////////
  //////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////
  /////
  ///////////////////////////
  ////////////////////////////////
  //////////////////////////////////////
  ////////
  ///////////

  this.applyPermissions(); ////////////

  this.initInterval();
}

Store.prototype.initFont = function () {
  var _this2 = this;

  this.request.requestFont().then(function (res) {
    _this2.setNeedDraw(true);
  }).catch(function () {
    _this2.setNeedDraw(true);
  });
};
/**
 * 名单的鉴权
 */


Store.prototype.applyPermissions = function () {
  var _this3 = this;

  this.aegis.report('applyPermissions');
  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
  this.request.applyPermissions().then(function (res) {
    _this3.permissions = 0;

    if (res.data.error_code === 0) {
      // 接口返回无误
      var endTime = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();

      if (res.data.level) {
        // 且sdkappid鉴权能够通过
        // 如果有单调递增时间方法
        if (window.performance && window.performance.now) {
          _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].performanceNow = window.performance.now(); // 记录初始值

          _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].serverTime = res.data.server_time + Math.floor((endTime - startTime) / 2); // 毫秒级的时间 Math.floor((endTime - startTime) / 2) 网络延迟
        } else {
          // 如果没有单调递增时间
          _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].localTime = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(); // 毫秒级的时间

          _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].serverTime = res.data.server_time + Math.floor((endTime - startTime) / 2); // 毫秒级的时间 Math.floor((endTime - startTime) / 2) 网络延迟

          _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].localServerTimeDiff = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].localTime - _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].serverTime; // 毫秒级的时间
        }

        _this3.cosData = {
          appid: res.data.cos_appid,
          bucket: res.data.cos_bucket
        };
        _this3.fileMessageCosInfo.bucket = res.data.file_message.bucket;
        _this3.fileMessageCosInfo.appid = res.data.file_message.appid;
        _this3.fileMessageCosInfo.region = res.data.file_message.region;
        _this3.fileCos = new _cos_FileCos__WEBPACK_IMPORTED_MODULE_50__["default"](Object.assign({
          sdkAppId: _this3.options.sdkAppId
        }, _this3.options.cosData, _this3.cosData), _this3.request, _this3.event, _this3.elkLog);
        _this3.permissions = res.data.level;

        _this3.request.setPermissions(_this3.permissions);

        _this3.setDefaultBoard();

        _this3.initData(_this3.options); // 白板SDK鉴权通过


        _this3.elkLog.report('verify_sdk', {
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
          extra_info: JSON.stringify({
            permissions: _this3.permissions,
            server_time: res.data.server_time
          })
        });

        if (_this3.syncHistroyEnable && _this3.classId) {
          _this3.syncHistroyData();
        } else if (!_this3.syncHistroyEnable && _this3.classId) {
          // 如果不拉取历史数据
          setTimeout(function () {
            _this3.event.fire(_this3, 'TEB_HISTROYDATA_SYNCCOMPLETED');
          }, 200);
        } // 白板SDK鉴权通过触发init


        _this3.event.fire(_this3, 'TEB_INIT'); // 鉴权通过，则进行心跳上报


        _this3.heartbeat.start();

        _this3.setNeedDraw(true);

        return;
      } else {
        // 明确白板服务到期
        _this3.event.fire(_this3, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_AUTH, 'please purchase the service first');

        _this3.elkLog.report('verify_sdk', {
          action_result: res.data.error_code,
          action_info: JSON.stringify(res.data),
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
          extra_info: JSON.stringify({
            permissions: _this3.permissions
          })
        });
      }
    } else if (res.data.error_code !== undefined && res.data.error_code != 0) {
      _this3.event.fire(_this3, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_RUNTIME, res.data.error_msg);

      _this3.elkLog.report('verify_sdk', {
        action_result: res.data.error_code,
        action_info: JSON.stringify(res.data),
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
        extra_info: JSON.stringify({
          permissions: _this3.permissions,
          message: res.data.error_msg
        })
      });
    } else if (res.data.ErrorCode !== undefined) {
      // SSO超时，目前不进行SSO鉴权，可能存在SSO超时的情况
      if (res.data.ErrorCode === 60008) {
        _this3.event.fire(_this3, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_AUTH_TIMEOUT, 'the request has timed out. please try again');
      } else {
        _this3.event.fire(_this3, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_RUNTIME, res.data.ErrorMsg);
      }

      _this3.elkLog.report('verify_sdk', {
        action_result: res.data.ErrorCode,
        action_info: JSON.stringify(res.data),
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
        extra_info: JSON.stringify({
          permissions: _this3.permissions
        })
      });
    } else {
      _this3.event.fire(_this3, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_RUNTIME, 'server error');

      _this3.elkLog.report('verify_sdk', {
        action_result: -9999,
        action_info: JSON.stringify(res.data),
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
        extra_info: JSON.stringify({
          permissions: _this3.permissions
        })
      });
    }

    _this3.permissions = 0;

    _this3.request.setPermissions(_this3.permissions);
  }, function (error) {
    _this3.permissions = 0;

    _this3.request.setPermissions(_this3.permissions);

    _this3.event.fire(_this3, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_AUTH_TIMEOUT, 'the request has timed out. please try again');

    _this3.elkLog.report('verify_sdk', {
      action_result: -9998,
      action_info: JSON.stringify(error),
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify({
        permissions: _this3.permissions
      })
    });
  });
};
/**
 * 白板是否可见
 */


Store.prototype.setVisible = function (visible) {
  this.heartbeat.setVisible(visible);
};
/**
 * 创建文件白板新的ID
 */


Store.prototype.createBoardIdForFile = function (fid, uid, timestamp, pageCount, platform, fileType) {
  var seq = 1;
  var boards = [];

  for (var i = 0; i < pageCount; i++) {
    // 其他白板的boardID为 pc/web/ios/android_uid_当前时间戳（秒）_seq_fid
    var id = '';

    if (fileType === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.VOD) {
      // 如果是mp4,这里相当于是打了一个补丁
      id = "".concat(platform, "_").concat(uid, "_").concat(Math.floor(fid.replace('#', '') / 1000), "_").concat(seq++, "_").concat(fid);
    } else {
      id = "".concat(platform, "_").concat(uid, "_").concat(timestamp, "_").concat(seq++, "_").concat(fid);
    }

    boards.push(id);
  }

  return boards;
};
/**
 * 创建默认白板新的ID
 */


Store.prototype.createBoardId = function () {
  var groupId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentGroup;
  var timestamp = arguments.length > 1 ? arguments[1] : undefined;
  this.aegis.report('createBoardId'); // 默认白板的boardID为 #DEFAULT

  if (this.boardIdSeq == 0) {
    this.boardIdSeq++;
    return _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD; // 默认的白板
  }

  if (groupId === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {// 如果是默认分组
  } else {} // 其他白板的boardID为 pc/web/ios/android_uid_当前时间戳（秒）_seq_fid


  return "".concat(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, "_").concat(this.identifier, "_").concat(timestamp || _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getSecondTime(), "_").concat(this.boardIdSeq++, "_").concat(groupId);
};
/**
 * 初始化定时任务
 */


Store.prototype.initInterval = function () {
  var _this4 = this;

  this.sendInterval = setInterval(function () {
    if (_this4.realTimeData.length > 0) {
      _this4.sendRequest();
    }
  }, 200);
};

Store.prototype.resetData = function () {
  this.aegis.report('resetData'); // data：所有的对象  按照开始时间 排序

  this.data = {}; // 操作data

  this.opData = {};
  this.opIndex = {}; // userData 所有的用户的对象， 具体的对象和data里面是同一个

  this.userData = {}; // 背景图

  this.backgroundPic = {}; // 背景颜色

  this.backgroundColor = {};
  this.currentGroup = null;
  this.currentBoard = null;
  this.boardList = [];
  this.groups = []; // 当前操作的seq

  this.seq = 0;
  this.maxSeq = 0; //最大白板翻页的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxSeq的直接丢弃

  this.maxAddTextSeq = 0; //最大文字输入的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxAddTextSeq的直接丢弃

  this.maxMoveSeq = 0; //最大移动缩放的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxMoveSeq的直接丢弃

  this.maxVideoSeq = 0; //最大Video的seq 用来解决各端同步收到IM消息顺序不对的问题，小于maxSeq的直接丢弃

  this.maxImageElementSeq = 0; // //最大imageelement的seq 用来解决各端同步收到IM消息顺序不对的问题和本地远端同时移动的问题，小于maxSeq的直接丢弃

  this.seqFilter = {}; // 当前被选择的元素列表

  this.selectedList = []; // 选择之后 拖拽时展示的总区域   点选为当前元素的外区域  框选为所有被选中的图形的总区域

  this.selectArea = {}; // 用于计算seq

  this.gSeq = 0; // 白板ID的Seq

  this.boardIdSeq = 0;
  this.belongLineSeq = 0; //画线条的时候，用来标注移动过程中是属于什么哪条线段的
  // 对外发送的白板实时数据

  this.realTimeData = [];
  this.beforeMoveType = ''; // 记录由move之前的状态 （点选/框选）

  this.setDefaultBoard();
};

Store.prototype.initData = function (options) {
  var _this5 = this;

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isUndefined(options.drawEnable) || _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isNull(options.drawEnable)) {
    options.drawEnable = true;
  }

  this.setDrawEnable(options.drawEnable);
  this.setProgressEnable(options.progressEnable); // 设置是否显示资源加载进度条

  this.setColor(options.brushColor); // 设置颜色

  this.setThin(options.brushThin); // 设置线条粗细

  this.setTextFontFamily(options.textFamily); // 设置文字字体

  this.setTextSize(options.textSize); // 设置文字大小

  this.setTextColor(options.textColor); // 设置文字颜色

  this.setTextFontStyle(options.textStyle); // 设置文本样式

  this.setSmoothLevel(options.smoothLevel); // 设置涂鸦平滑级别

  this.setDataSyncEnable(options.dataSyncEnable); // 设置是否启用数据同步

  this.setPreloadDepth(options.preloadDepth); // 设置预加载深度

  this.setBoardContentFitMode(options.boardContentFitMode, false); // 设置内容填充方式，不上报

  this.setImageTimeout(options.imageTimeout || _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].IMAGE_TIMEOUT); // 10s 默认图片加载超时时间

  var types = ['MOUSE', 'LINE', 'ERASER', 'RASER', 'GRAPH-LINE', 'GRAPH-OVAL', 'GRAPH-RECT', 'GRAPH-OVAL-SOLID', 'GRAPH-RECT-SOLID', 'POINTSELECT', 'SELECT', 'INPUTTEXT', 'ZOOM'];

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isUndefined(options.toolType) || _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isNull(options.toolType)) {
    options.toolType = 1; // 画笔
  }

  this.setType(_config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BOARD_ACTION_TYPE[types[options.toolType]]); // 设置要画的类型（线条|直线|图形）

  this.setGlobalBackgroundColor(options.globalBackgroundColor, true); // 设置全局颜色,不上报

  this.setTransparent(options.transparent); // 设置无背景图时，是否透明

  this.setSelectArea(); // 设置选中的区域

  setTimeout(function () {
    _this5.event.fire(_this5, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', _this5.canRedo());

    _this5.event.fire(_this5, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', _this5.canUndo());
  }, 500);
};
/**
 * 增加白板，支持单个白板或者一个白板数组
 * @param {String|Array} boardId
 * @param {Array} urls 只会存在于上传文件类型，且接口不对外暴露
 */


Store.prototype.addBoard = function (boardId) {
  var _this6 = this;

  var needReport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var boards = [];

  if (Array.isArray(boardId)) {
    boards = boardId;
  } else {
    if (!boardId) {
      return;
    }

    boards = [boardId];
  }

  var fileBoardDataMap = {};
  boards.forEach(function (board, index) {
    _this6.userData[board] = {};
    _this6.userData[board][_this6.identifier] = [];
    _this6.data[board] = [];
    _this6.opData[board] = [];
    _this6.opIndex[board] = 0;
    _this6.backgroundColor[board] = _this6.globalBackgroundColor;
    _this6.backgroundPic[board] = {
      url: '',
      user: board === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD ? _this6.identifier : _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Uid(board),
      show: true,
      mode: _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER,
      type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE
    };

    if (_this6.boardList.indexOf(board) === -1) {
      _this6.boardList.push(board);
    }

    var fid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(board);

    if (!fileBoardDataMap[fid]) {
      fileBoardDataMap[fid] = [];
    }

    fileBoardDataMap[fid].push(board);
  });

  for (var f in fileBoardDataMap) {
    this.event.fire(this, 'TEB_ADDBOARD', fileBoardDataMap[f], f);
  }

  this.sortBoard(); // 上报创建白板的数据

  needReport && this.report.reportCreateBoards(this.currentBoard, boards);
  return this.boardList;
};

Store.prototype.findLine = function (boardId, user, action) {
  // this.aegis.report('findLine', {
  //   boardId,
  //   user,
  //   action
  // });
  var userData = this.userData[boardId][user];
  var line;

  for (var i = 0, len = userData.length; i < len; i++) {
    var element = userData[i];

    if (element.type === 'line' && element.seq == action.belongSeq) {
      // 并是同一根线条
      line = element;
      break;
    }
  }

  return line;
};
/**
 * 返回是否需要draw
 */


Store.prototype.setNeedDraw = function () {
  var needDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (this.needDraw != needDraw) {
    // this.aegis.report('setNeedDraw', {
    //   increasingDraw
    // });
    console.log('setNeedDraw', needDraw);
    this.needDraw = needDraw;
  }
};
/**
 * 返回是否需要draw
 */


Store.prototype.getNeedDraw = function () {
  return this.needDraw;
};
/**
 * 增量绘制
 */


Store.prototype.setIncreasingDraw = function () {
  var increasingDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (this.increasingDraw != increasingDraw) {
    // this.aegis.report('setIncreasingDraw', {
    //   increasingDraw
    // });
    console.log('setIncreasingDraw', increasingDraw);
    this.increasingDraw = increasingDraw;
  }
};

Store.prototype.getIncreasingDraw = function () {
  return this.increasingDraw;
};
/**
 * 局部绘制，如乱序，所有线段从当前drawIndex绘制
 */


Store.prototype.setPartDraw = function () {
  var partDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (this.partDraw != partDraw) {
    // this.aegis.report('setPartDraw', {
    //   partDraw
    // });
    console.log('setPartDraw', partDraw);
    this.partDraw = partDraw;
  }
};

Store.prototype.getPartDraw = function () {
  return this.partDraw;
};

Store.prototype.setLaserDraw = function () {
  var draw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  if (this.laserDraw != draw) {
    // this.aegis.report('setLaserDraw', {
    //   draw
    // });
    console.log('setLaserDraw', draw);
    this.laserDraw = draw;
  }
};

Store.prototype.getLaserDraw = function () {
  return this.laserDraw;
};
/**
 * 返回白板列表
 * @returns {Array} 返回白板列表
 */


Store.prototype.getBoardList = function () {
  return this.boardList;
};
/**
 * 返回白板背景图片列表
 * @returns {Array} 返回白板背景图片列表
 */


Store.prototype.getBoardPicList = function () {
  return this.backgroundPic;
};

Store.prototype.setDefaultBoard = function () {
  this.aegis.report('setDefaultBoard'); // 设置默认的白板分组

  this.currentGroup = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP;
  var timestamp = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getSecondTime();
  this.addGroup(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP, this.user, null, 1, 0, timestamp, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG, 0); // 设置默认的白板分组

  this.currentBoard = this.createBoardId();
  this.addBoard(this.currentBoard, false);
  this.setBackgroundColor(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(this.globalBackgroundColor), true); // 设置当前白板颜色, 不上报

  delete this.setDefaultBoard; // 然后删除该方法
};

Store.prototype.removeBoard = function (boardIds) {
  this.aegis.report('removeBoard', {
    boardIds: boardIds
  });

  if (!Array.isArray(boardIds)) {
    boardIds = [boardIds];
  }

  var deleteBoards = []; // 要删除的白板

  var deleteFids = []; // 要删除的文件

  var currentChange = false; // 当前白板页是否有删除

  var fileBoardDataMap = {}; // 删除的文件数据

  for (var i = 0, len = boardIds.length; i < len; i++) {
    var item = boardIds[i]; // 默认的白板不能删除

    if (item === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD) {
      console.log('默认白板页不能删除');
      continue;
    }

    var index; // 白板在要删除的列表中,则删除

    if ((index = this.boardList.indexOf(item)) > -1) {
      deleteBoards.push(item);
      var fid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(item);

      if (!fileBoardDataMap[fid]) {
        fileBoardDataMap[fid] = [];
      }

      fileBoardDataMap[fid].push(item);
      delete this.userData[item];
      delete this.data[item];
      delete this.opData[item];
      delete this.opIndex[item];
      delete this.backgroundColor[item];
      delete this.backgroundPic[item]; // 如果要删除的页是当前页

      if (item == this.currentBoard) {
        currentChange = true;
        var boards = this.getBoardByGroup(this.currentGroup);
        var indexInGroup = boards.indexOf(item);

        if (indexInGroup === 0) {
          this.currentBoard = boards[indexInGroup + 1];
        } else {
          this.currentBoard = boards[indexInGroup - 1];
        }

        if (!this.currentBoard) {
          // 白板下面完全删除了, 则删除白板文件，同时当前白板页为默认分组下的页
          var defaultBoards = this.getBoardByGroup(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP);
          this.currentBoard = defaultBoards[this.getFileInfo(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP).currentPageIndex];
        }
      } // 先删除


      this.boardList.splice(index, 1); // 得到当前页和要删除的页，然后分别更新所在页在文件的index,pageCount
      // 1. 更新要删除的页

      var deleteFid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(item); // 获取要删除页所在的文件

      var deleteFidBoards = this.getBoardByGroup(deleteFid);
      var file = this.getFileInfo(deleteFid);

      if (deleteFidBoards.length === 0) {
        // 如果文件所有页都没有，则删除文件
        if (file) {
          this.deleteGroup(deleteFid);
          deleteFids.push(deleteFid);
        }
      } else {
        if (file) {
          file.pageCount = file.pageCount - 1; // 总页数-1

          if (file.pageCount === file.currentPageIndex) {
            // 如果当前页index 与 总页数相当于，则说明是删除了最后一页，当前index前移
            file.currentPageIndex = file.currentPageIndex - 1;
          }

          this.updateFileInfo(file);
        }
      }
    }
  } // 2. 更新当前页


  var currentFid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(this.currentBoard);
  var currentFidBoards = this.getBoardByGroup(currentFid);
  file = this.getFileInfo(currentFid);

  if (file) {
    file.pageCount = currentFidBoards.length; // 总页数

    file.currentPageIndex = currentFidBoards.indexOf(this.currentBoard); // 当前页所在的索引

    this.updateFileInfo(file);
  }

  this.currentGroup = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(this.currentBoard); // 如果有删除了白板，则触发删除白板事件

  for (var f in fileBoardDataMap) {
    this.event.fire(this, 'TEB_DELETEBOARD', fileBoardDataMap[f], f);
  } // 如果当前页发送改变，则触发switch白板


  if (currentChange) {
    this.event.fire(this, 'TEB_GOTOBOARD', this.currentBoard, _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(this.currentBoard));
  }

  this.setNeedDraw(true);
  return {
    deleteBoards: deleteBoards,
    deleteFids: deleteFids
  };
};
/**
 * 删除白板，支持单个白板或者一个白板数组
 * @param {String|Array} boardId
 * @param {String} fid 文件id
 * @returns {Array} 删除的白板数组
 */


Store.prototype.deleteBoard = function () {
  var boardId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentBoard;
  var fid = arguments.length > 1 ? arguments[1] : undefined;
  this.aegis.report('deleteBoard', {
    boardId: boardId,
    fid: fid
  });

  var _ref = this.removeBoard(boardId) || [],
      deleteBoards = _ref.deleteBoards,
      deleteFids = _ref.deleteFids;

  if (deleteBoards.length) {
    var bgUrl = this.backgroundPic[this.currentBoard] ? this.backgroundPic[this.currentBoard].url : '';
    bgUrl && this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
      "url": bgUrl,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "mode": this.backgroundPic[this.currentBoard].mode,
      "type": this.backgroundPic[this.currentBoard].type,
      "cleanBoard": 0
    });
    var deleteFiles = [];

    if (fid) {
      if (deleteFids.indexOf(fid) > -1) {
        deleteFiles = deleteFids;
      } else {
        deleteFiles.push(fid);
      }
    } else {
      deleteFiles = deleteFids;
    }

    var boards = this.getBoardByGroup(this.currentGroup);
    var index = boards.indexOf(this.currentBoard);
    var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.SWITCH_ACTION,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": seq,
      "toBoardId": this.currentBoard,
      "deleteBoards": deleteFiles.length ? [] : deleteBoards,
      // 如果是删除文件，则不传白板id
      "deleteFiles": deleteFiles.length ? deleteFiles : [],
      // 要删除的文件id
      "page": index,
      "step": 0
    });
    this.maxSeq = seq; // 本地操作后也记录最大seq，保证其他端操作不影响

    this.sendRequest();
    this.report.reportDeleteBoard(deleteBoards, this.currentBoard);
    var file = this.getFileInfo(this.currentGroup);
    file.currentPageIndex = index;
    file.currentPageStep = 0;
    file.pageCount = boards.length;
    this.report.reportAddFile(file); // 上报翻页信息

    this.report.reportSwitchBoard({
      boardId: this.currentBoard,
      fid: file.fid,
      url: file.downloadURL,
      type: file.type,
      page: file.currentPageIndex,
      step: file.currentPageStep,
      ratio: file.ratio,
      scale: file.scale
    });
  }

  return deleteBoards;
};
/**
 * 获取白板组
 * @returns {Array} 返回白板组
 */


Store.prototype.getGroup = function () {
  return this.groups;
};

Store.prototype.getFileInfoList = function () {
  var _this7 = this;

  var groups = Object.assign([], this.groups);
  groups.forEach(function (item) {
    var boardInfoList = [];
    var boardIds = _this7.getBoardByGroup(item.fid) || [];
    boardIds.forEach(function (boardId) {
      var boardInfo = new _model_BoardInfoModel__WEBPACK_IMPORTED_MODULE_36__["default"](boardId, _this7.backgroundPic[boardId], _this7.backgroundColor[boardId]);
      boardInfoList.push(boardInfo);
    });
    item.boardInfoList = boardInfoList;
  });
  return groups;
};

Store.prototype.getBoardInfoList = function (fid) {
  var _this8 = this;

  var boardInfoList = [];
  var boardIds = this.getBoardByGroup(fid) || [];
  boardIds.forEach(function (boardId) {
    var boardInfo = new _model_BoardInfoModel__WEBPACK_IMPORTED_MODULE_36__["default"](boardId, _this8.backgroundPic[boardId], _this8.backgroundColor[boardId]);
    boardInfoList.push(boardInfo);
  });
  return boardInfoList;
};
/**
 * 获取指定的文件信息
 */


Store.prototype.getFileInfo = function () {
  var fid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentGroup;
  var file = null;
  var groups = this.getGroup();

  for (var i = 0, len = groups.length; i < len; i++) {
    var group = groups[i];

    if (fid === group.fid) {
      file = group;
      break;
    }
  }

  return file;
};
/**
 * 根据分组ID，返回该组下所有白板
 */


Store.prototype.getBoardByGroup = function () {
  var fid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentGroup;
  var boards = [];
  var mach = "_".concat(fid);

  for (var index = 0; index < this.boardList.length; index++) {
    var board = this.boardList[index];

    if (fid === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP && board === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD) {
      boards.push(board);
    } else {
      if (board.indexOf(mach) > -1) {
        boards.push(board);
      }
    }
  }

  return boards; // var boards = [];
  // boards = this.boardList.filter((item) => {
  //   // 如果是默认分组，则默认白板也返回·
  //   if (fid === Config.COMMON_GROUP && item === Config.COMMON_DEFAULT_BOARD) {
  //     return true;
  //   }
  //   return item.indexOf(`_${fid}`) > -1;
  // })
  // return boards;
};
/**
 * 增加白板组(不上报，临时解决办法，参数太长了不在addGroup上加了，直接弄了一个新方法出来)
 * @param {String} group
 * @returns {Array} 返回白板组
 */


Store.prototype.addGroupNotReport = function (fid, title, uid, downloadUrl, pageCount, currentPageIndex, timestamp) {
  var platform = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM;
  var type = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG;
  var currentPageStep = arguments.length > 9 ? arguments[9] : undefined;
  var ratio = arguments.length > 10 ? arguments[10] : undefined;
  var scale = arguments.length > 11 ? arguments[11] : undefined;
  var isTranscodeFile = arguments.length > 12 ? arguments[12] : undefined;
  var status = arguments.length > 13 ? arguments[13] : undefined;
  var progress = arguments.length > 14 ? arguments[14] : undefined;
  this.aegis.report('addGroupNotReport', {
    fid: fid,
    uid: uid,
    pageCount: pageCount,
    currentPageIndex: currentPageIndex,
    currentPageStep: currentPageStep
  });
  var isExist = false; // 是否已经存在

  for (var i = 0, len = this.groups.length; i < len; i++) {
    var group = this.groups[i];

    if (group.fid == fid) {
      isExist = true;
      break;
    }
  }

  if (isExist) {
    // 如果已经存在了, 且不是默认分组（默认分组在同步历史消息中会来更新页码，所以需要）
    return this.groups;
  }

  var fileObj = {
    fid: fid,
    title: title || fid,
    downloadURL: downloadUrl,
    pageCount: pageCount,
    currentPageIndex: currentPageIndex,
    currentPageStep: currentPageStep,
    uid: uid,
    timestamp: timestamp,
    platform: platform,
    ratio: ratio,
    type: type,
    scale: scale,
    status: status,
    progress: progress
  };
  this.groups.push(fileObj); // 如果是转码文件

  if (isTranscodeFile) {
    this.event.fire(this, 'TEB_ADDTRANSCODEFILE', fid);
  } else {
    if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
      this.event.fire(this, 'TEB_ADDFILE', fid);
    } else if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMAGESFILE) {
      this.event.fire(this, 'TEB_ADDIMAGESFILE', fid);
      this.elkLog.report('add_images_file_event_peer', {
        extra_info: JSON.stringify({
          fid: fid
        })
      });
    } else {
      this.event.fire(this, 'TEB_ADDH5PPTFILE', fid);
    }
  }
};
/**
 * 增加白板组
 * @param {String} group
 * @returns {Array} 返回白板组
 */


Store.prototype.addGroup = function (fid, title, uid, downloadUrl, pageCount, currentPageIndex, timestamp) {
  var platform = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM;
  var type = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG;
  var currentPageStep = arguments.length > 9 ? arguments[9] : undefined;
  var ratio = arguments.length > 10 ? arguments[10] : undefined;
  var scale = arguments.length > 11 ? arguments[11] : undefined;
  var isTranscodeFile = arguments.length > 12 ? arguments[12] : undefined;
  this.aegis.report('addGroup', {
    fid: fid,
    uid: uid,
    pageCount: pageCount,
    currentPageIndex: currentPageIndex,
    currentPageStep: currentPageStep
  });
  var isExist = false; // 是否已经存在

  for (var i = 0, len = this.groups.length; i < len; i++) {
    var group = this.groups[i];

    if (group.fid == fid) {
      isExist = true;
      break;
    }
  }

  if (isExist) {
    // 如果已经存在了, 且不是默认分组（默认分组在同步历史消息中会来更新页码，所以需要）
    return this.groups;
  }

  var fileObj = {
    fid: fid,
    title: title || fid,
    downloadURL: downloadUrl,
    pageCount: pageCount,
    currentPageIndex: currentPageIndex,
    currentPageStep: currentPageStep,
    uid: uid,
    timestamp: timestamp,
    platform: platform,
    ratio: ratio,
    type: type,
    scale: scale,
    isTranscodeFile: !!isTranscodeFile,
    progress: 0,
    status: 0 // // 默认分组不上报

  };

  if (fid && fid !== _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
    this.report.reportAddFile(fileObj);
  }

  this.groups.push(fileObj); // 如果是转码文件

  if (isTranscodeFile) {
    this.event.fire(this, 'TEB_ADDTRANSCODEFILE', fid);
  } else {
    if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
      this.event.fire(this, 'TEB_ADDFILE', fid);
    } else if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMAGESFILE) {
      this.event.fire(this, 'TEB_ADDIMAGESFILE', fid);
      this.elkLog.report('add_images_file_event_myself', {
        extra_info: JSON.stringify({
          fid: fid
        })
      });
    } else {
      this.event.fire(this, 'TEB_ADDH5PPTFILE', fid);
    }
  }
};
/**
 * 删除分组，同时删除分组下的白板
 * 但不能删除默认的白板组
 * @param {String} groupId 分组ID
 * @returns {Boolean} true 删除白板组成功，false 删除白板组失败
 */


Store.prototype.deleteGroup = function (groupId) {
  var needReport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  this.aegis.report('deleteGroup', {
    groupId: groupId,
    needReport: needReport
  });

  if (groupId === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
    // 如果是默认的分组，则不允许删除
    console.error('不允许删除默认的白板分组');
    return [];
  }

  var index = -1; //

  for (var i = 0, len = this.groups.length; i < len; i++) {
    var group = this.groups[i];

    if (group.fid == groupId) {
      index = i;
      break;
    }
  }

  if (index > -1) {
    this.groups.splice(index, 1);
    _H5Control__WEBPACK_IMPORTED_MODULE_35__["default"].clearIframeCache(this.iframeDom); // 情况iframe的缓存信息
  }

  needReport && this.report.reportDeleteFile(groupId);
  return this.getBoardByGroup(groupId);
};

Store.prototype.setDrawEnable = function (enable) {
  this.drawEnable = !!enable;
  this.elkLog.report('call_method', {
    extra_info: JSON.stringify({
      method: 'setDrawEnable',
      data: this.drawEnable
    })
  });
};

Store.prototype.isDrawEnable = function (enable) {
  return this.drawEnable;
};
/**
 * 设置线条|图形的颜色
 * @param {Number} color 数字颜色
 */


Store.prototype.setColor = function (color) {
  this.aegis.report('setColor', {
    color: color
  });

  if (!color) {
    // 包括undefined和null
    color = _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].COLOR.RED;
  }

  this.cancelSelect();

  if (typeof color === 'number') {
    this.color = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(color);
  } else if (typeof color === 'string' && color.indexOf('#') == 0 && (color.length === 4 || color.length === 7)) {
    this.color = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].hexToRgba(color);
  } else if (typeof color === 'string' && color.startsWith('rgba(')) {
    // 如果是rgba
    this.color = color;
  }
};
/**
 * 返回当前的颜色
 * @returns {String} 返回当前的颜色 rgba值
 */


Store.prototype.getColor = function () {
  return this.color;
};
/**
 * 设置线条的粗细
 * @param {Number} thin 默认100
 */


Store.prototype.setThin = function (thin) {
  if (!thin) {
    thin = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].THIN;
  }

  this.cancelSelect();
  this.thin = Math.floor(thin);
};
/**
 * 返回当前线条的粗细
 * @returns {String} 返回当前线条的粗细
 */


Store.prototype.getThin = function () {
  return this.thin;
};
/**
 * 设置涂鸦平滑级别
 * @param smoothLevel 平滑级别，取值0～1之间的浮点数，0表示不启用平滑，默认0.1
 */


Store.prototype.setSmoothLevel = function (smoothLevel) {
  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isUndefined(smoothLevel) || _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isNull(smoothLevel)) {
    smoothLevel = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].SMOOTH_LEVEL;
  }

  smoothLevel = Math.max(0, Math.min(1, smoothLevel));
  this.smoothLevel = smoothLevel;
};
/**
 * 返回当前涂鸦平滑级别
 * @returns {Number} 返回当前涂鸦平滑级别
 */


Store.prototype.getSmoothLevel = function () {
  return this.smoothLevel;
};
/**
 * 设置文字大小
 * @param {Number} size 默认12px
 */


Store.prototype.setTextSize = function (size) {
  if (!size) {
    size = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].TEXT_SIZE;
  }

  this.cancelSelect();
  this.textSize = size;
};
/**
 * 返回文字大小
 * @returns {String} 返回文字大小
 */


Store.prototype.getTextSize = function () {
  return this.textSize;
};
/**
 * 设置文本颜色
 * @param {Number} textColor 文本颜色
 */


Store.prototype.setTextColor = function (textColor) {
  if (!textColor) {
    textColor = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].TEXT_COLOR;
  }

  this.cancelSelect();

  if (typeof textColor === 'number') {
    this.textColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(textColor);
  } else if (typeof textColor === 'string' && textColor.indexOf('#') == 0 && (textColor.length === 4 || textColor.length === 7)) {
    this.textColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].hexToRgba(textColor);
  } else if (typeof textColor === 'string' && textColor.startsWith('rgba(')) {
    // 如果是rgba
    this.textColor = textColor;
  }
};
/**
 * 返回当前的文字颜色
 * @returns {String} 返回当前的文字颜色 rgba值
 */


Store.prototype.getTextColor = function () {
  return this.textColor;
};
/**
 * 设置输入文字字体
 * @param {Number} size 默认12px
 */


Store.prototype.setTextFontFamily = function (typeFace) {
  // if (!typeFace) {
  //   typeFace = Config.TEXT_FONT_FAMILY;
  // }
  // this.cancelSelect();
  // this.typeFace = typeFace;
  this.typeFace = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].TEXT_FONT_FAMILY;
};
/**
 * 返回文字输入字体
 * @returns {String} 返回文字输入字体
 */


Store.prototype.getTextFontFamily = function () {
  return this.typeFace; // 安卓测试使用"DroidSansMono"字体
};
/**
 * 设置文字样式 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；
 * @param {Number} size 默认12px
 */


Store.prototype.setTextFontStyle = function (fontStyle) {
  if (!fontStyle) {
    fontStyle = _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_40__["default"].TEDU_BOARD_TEXT_STYLE_NORMAL;
  }

  this.cancelSelect();
  this.fontStyle = fontStyle;
};
/**
 * 返回文字输入字体
 * @returns {String} 返回文字输入字体
 */


Store.prototype.getTextFontStyle = function () {
  return this.fontStyle;
};
/**
 * 设置数据同步开关
 * @param enable 是否启用数据同步
 */


Store.prototype.setDataSyncEnable = function () {
  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].DATA_SYNC_ENABLE;
  this.aegis.report('setDataSyncEnable', {
    enable: enable
  });
  this.request.setReportEnable(enable);
  this.dataSyncEnable = enable;
  this.elkLog.report('call_method', {
    extra_info: JSON.stringify({
      method: 'setDataSyncEnable',
      data: enable
    })
  });
};
/**
 * 检查是否启用了数据同步
 * @returns {boolean} 是否启用了数据同步
 */


Store.prototype.isDataSyncEnable = function () {
  return this.dataSyncEnable;
};
/**
 * 设置允许操作哪些用户绘制的图形（"操作"指擦除、清空等）
 * @param users 指定允许操作的用户集，为[]或null表示不加限制
 */


Store.prototype.setAccessibleUsers = function (users) {
  this.aegis.report('setAccessibleUsers', {
    users: users
  });

  if (users) {
    this.accessibleUsers = users;
  } else {
    this.accessibleUsers = [];
  }
};
/**
 * 设置是否显示资源加载进度条
 * @param enable 是否显示资源加载进度条
 */


Store.prototype.setProgressEnable = function () {
  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROGRESS_ENABLE;
  this.progressEnable = enable;
};
/**
 * 检查是否显示资源加载进度条
 * @returns {boolean} 是否显示资源加载进度条
 */


Store.prototype.isProgressEnable = function () {
  return this.progressEnable;
};
/**
 * 设置预加载深度
 * @param depth 预加载深度，默认为5（预加载前后五页白板）
 */


Store.prototype.setPreloadDepth = function () {
  var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PRELOAD_DEPTH;
  this.preloadDepth = depth;
};
/**
 * 设置要画的线条或者图形（涂鸦类型）
 * 如果设置的类型不在白板支持范围内，则设置为线条
 * @param {String} type
 */


Store.prototype.setType = function (type) {
  var values = Object.values(_config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BOARD_ACTION_TYPE);
  this.cancelSelect();

  if (values.indexOf(type) > -1) {
    this.type = type;
  } else {
    this.type = _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BOARD_ACTION_TYPE.LINE;
  }

  this.elkLog.report('call_method', {
    extra_info: JSON.stringify({
      method: 'setType',
      data: type
    })
  });
};
/**
 * 获取当前涂鸦的类型
 * @returns {String} 涂鸦类型
 */


Store.prototype.getType = function () {
  return this.type;
};
/**
 * 设置无背景图时，是否透明
 * @param {Boolean} transparent 默认 false
 */


Store.prototype.setTransparent = function () {
  var transparent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  this.transparent = transparent;
};
/**
 * 获取无背景图时，是否透明
 * @returns {String} 是否透明
 */


Store.prototype.getTransparent = function () {
  return this.transparent;
};
/**
 * 设置背景颜色
 * @param {Number} color 数字颜色，默认白色
 * @param {*} noSend 不发送和不上报，用户主动改变的才需要上报和发送， 对外的接口只能是上报的，只有内部的才不上报
 */


Store.prototype.setBackgroundColor = function () {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].COLOR.WHITE;
  var noSend = arguments.length > 1 ? arguments[1] : undefined;
  this.aegis.report('setBackgroundColor', {
    color: color
  });
  var boardId = this.currentBoard;

  if (_typeof(color) === "object") {
    boardId = color['boardId'];
    color = color['color'];
  }

  var numberColor = 0;

  if (typeof color === 'number') {
    this.backgroundColor[boardId] = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(color);
    numberColor = color;
  } else if (typeof color === 'string' && color.indexOf('#') == 0 && (color.length === 4 || color.length === 7)) {
    this.backgroundColor[boardId] = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].hexToRgba(color);
    numberColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].hexToRgba(color));
  } else if (typeof color === 'string' && color.startsWith('rgba(')) {
    // 如果是rgba
    this.backgroundColor[boardId] = color;
    numberColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(color);
  }

  this.setNeedDraw(true);

  if (!noSend) {
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_COLOR_ACTION,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "color": numberColor,
      "isGlobal": 0
    });
    this.report.reportSetBoardBgColor(boardId, numberColor);
  }
};
/**
 * 获取当前的白板的背景色
 */


Store.prototype.getBackgroundColor = function () {
  return this.backgroundColor[this.getCurrentBoard()];
};
/**
 * 设置选择的区域
 * @param {Number} x x坐标
 * @param {Number} y y坐标
 * @param {Number} width 选取范围的宽度
 * @param {Number} height 选取范围的高度
 */


Store.prototype.setSelectArea = function () {
  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  this.selectArea = {
    x: x,
    y: y,
    width: width,
    height: height
  };
};
/**
 * 获取选取范围
 */


Store.prototype.getSelectArea = function () {
  return this.selectArea;
};
/**
 * 获取当前白板
 */


Store.prototype.getCurrentBoard = function () {
  return this.currentBoard;
};
/**
 * 获取当前白板所处的分组/文件
 */


Store.prototype.getCurrentFile = function () {
  return this.currentGroup;
};
/**
 * 获取白板原始数据
 */


Store.prototype.getData = function () {
  return this.data;
};
/**
 * 获取首页数据
 */


Store.prototype.getFaceData = function () {
  var fileInfo, backgroundColor, currentPic;
  var currentBoardData = this.getCurrentBoardData();
  var switchBoardData = this.faceData.pop();

  if (switchBoardData && switchBoardData.content && switchBoardData.content.fid) {
    var content = switchBoardData.content;

    if (content.type === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
      fileInfo = {
        downloadURL: content.url,
        currentPageIndex: content.page,
        currentPageStep: content.step,
        type: content.type,
        fid: content.fid,
        ratio: content.ratio
      };
      var url = '';

      if (content.url) {
        url = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].fileDownLoadUrlToPreviewUrl(content.url);

        if (url.endsWith('/')) {
          url += content.page + 1 + '.jpg';
        } else {
          url += content.page + 1;
        }
      }

      currentPic = {
        mode: 0,
        show: true,
        type: 0,
        url: url
      };
    } else if (content.type === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT) {
      fileInfo = {
        downloadURL: content.url,
        currentPageIndex: content.page,
        currentPageStep: content.step,
        type: content.type,
        fid: content.fid,
        ratio: content.ratio
      };
      currentPic = {
        mode: 0,
        show: true,
        type: 0,
        url: ''
      };
    }
  }

  this.faceData = [];
  return {
    fileInfo: fileInfo,
    backgroundColor: currentBoardData.backgroundColor,
    currentPic: currentPic,
    data: currentBoardData.data
  };
};
/**
 * 获取当前白板的所有数据
 */


Store.prototype.getCurrentBoardData = function () {
  return {
    data: this.data[this.currentBoard],
    userData: this.userData[this.currentBoard],
    opData: this.opData[this.currentBoard],
    opIndex: this.opIndex[this.currentBoard],
    backgroundPic: this.backgroundPic[this.currentBoard],
    backgroundColor: this.backgroundColor[this.currentBoard],
    ratio: this.boardRatio[this.currentBoard],
    scale: this.getBoardScale()
  };
};
/**
 * 获取当前白板的背景图片信息
 * @returns {Object} 背景图片信息
 */


Store.prototype.getCurrentBoardPic = function () {
  return this.backgroundPic[this.currentBoard];
};
/**
 * 获取当前白板的背景颜色信息
 * @returns {String} 返回当前白板的背景颜色
 */


Store.prototype.getCurrentBoardColor = function () {
  return this.backgroundColor[this.currentBoard];
};
/**
 * 获取当前选中的line和graph
 * @returns {Array} 返回当前选中的line和graph
 */


Store.prototype.getSelectList = function () {
  return this.selectedList;
};
/**
 * 清空白板
 * @param {boolean} clearBackground 是否清空背景图片和背景颜色
 * @param clearSelectedOnly 是否只清空选中部分图形
 */


Store.prototype.clearBoard = function (clearBackground, clearSelectedOnly, accessAllUser) {
  this.aegis.report('clearBoard', {
    clearBackground: clearBackground,
    clearSelectedOnly: clearSelectedOnly,
    accessAllUser: accessAllUser
  });

  if (!this.currentBoard) {
    return;
  }

  if (clearSelectedOnly) {
    var type = this.getType();

    if (type === "select" || type === "pointselect") {
      this.deleteSelectedData();
      this.event.fire(this, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', this.canUndo());
      this.event.fire(this, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', this.canRedo());
    }
  } else {
    if (!accessAllUser && this.accessibleUsers && this.accessibleUsers.length > 0) {
      //只针对指定用户的涂鸦做清空操作
      this.deleteBoardData();
    } else {
      // this.data[this.currentBoard] = [];
      for (var index = 0, len = this.data[this.currentBoard].length; index < len; index++) {
        var item = this.data[this.currentBoard][index];

        if (item.type === 'imageElement') {
          // 如果是图片元素
          item.remove();
        } else if (item.type === 'inputtext') {
          // 文字输入
          var textareaEl = document.getElementById("tic-textarea__".concat(item.belongSeq));

          if (textareaEl) {
            textareaEl.value = '';
            textareaEl.blur();
            textareaEl.remove();
          }
        } else if (item.type === 'element') {
          item.remove();
        }
      } // 清空当前白板的数据


      this.data[this.currentBoard] = [];
      this.opData[this.currentBoard] = [];
      this.opIndex[this.currentBoard] = 0; // this.userData[this.currentBoard] = {};

      for (var userId in this.userData[this.currentBoard]) {
        this.userData[this.currentBoard][userId] = [];
      }

      this.userData[this.currentBoard][this.identifier] = [];

      if (clearBackground) {
        if (this.getCurrentFile() === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
          // 如果是默认白板文件，才运行清空背景图片
          this.backgroundPic[this.currentBoard] = {
            show: false,
            mode: _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER,
            url: '',
            type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
            user: ''
          };
        }

        this.backgroundColor[this.currentBoard] = this.globalBackgroundColor;
      }
    }

    this.cancelSelect();
  }

  this.setNeedDraw(true);
}; //清空


Store.prototype.clear = function (clearBackground, clearSelectedOnly) {
  this.aegis.report('clear', {
    clearBackground: clearBackground,
    clearSelectedOnly: clearSelectedOnly
  });

  if (clearSelectedOnly) {
    //只清空选中涂鸦
    this.clearBoard(false, true);
  } else {
    if (this.accessibleUsers && this.accessibleUsers.length > 0) {
      //只针对指定用户的涂鸦做清空操作
      this.clearBoard(false, false);
    } else {
      //全部清空
      if (clearBackground) {
        //同时清空背景
        this.clearBoard(true, false);
        this.addRealtimeData({
          action: 101,
          seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq()
        });
        this.report.reportClear(this.currentBoard);
      } else {
        //不清空背景
        this.clearBoard(false, false);
        this.addRealtimeData({
          action: 102,
          seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq()
        });
        this.report.reportClearDraws(this.currentBoard);
      }
    }
  }
};
/**
 * 清空文件涂鸦数据
 */


Store.prototype.clearFileDrawData = function (fids) {
  var _this9 = this;

  this.aegis.report('clearFileDrawData', {
    fids: fids
  });
  fids.forEach(function (fid) {
    var boards = _this9.getBoardByGroup(fid) || [];
    boards.forEach(function (board) {
      for (var index = 0, len = _this9.data[board].length; index < len; index++) {
        var item = _this9.data[board][index];

        if (item.type === 'imageElement') {
          // 如果是图片元素
          item.remove();
        } else if (item.type === 'inputtext') {
          // 文字输入
          var textareaEl = document.getElementById("tic-textarea__".concat(item.belongSeq));

          if (textareaEl) {
            textareaEl.value = '';
            textareaEl.blur();
            textareaEl.remove();
          }
        }
      } // 变量初始化


      _this9.data[board] = [];
      _this9.opData[board] = [];
      _this9.opIndex[board] = 0;
      _this9.userData[board] = {};
      _this9.userData[board][_this9.identifier] = [];
    });
  });
  this.cancelSelect();
  this.setNeedDraw(true);
};
/**
 * 清空文件涂鸦
 * @param {Array} fids 文件ID
 */


Store.prototype.clearFileDraws = function (fids) {
  var _this10 = this;

  this.aegis.report('clearFileDraws', {
    fids: fids
  });

  if (!fids) {
    return;
  }

  if (!Array.isArray(fids)) {
    fids = [fids];
  }

  this.clearFileDrawData(fids);
  var boards = [];
  fids.forEach(function (fid) {
    boards = boards.concat(_this10.getBoardByGroup(fid));
  });
  this.addRealtimeData({
    action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.FILE_CLEAR_ACTION,
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    fids: fids
  });
  this.report.reportClearDraws(boards);
};
/**
 * @description 清空白板所有涂鸦
 */


Store.prototype.clearAll = function () {
  this.aegis.report('clearAll');
  this.report.reportCleanAll();
  this.addRealtimeData({
    action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RESET_DATA_ACTION,
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq()
  });
  this.sendRequest();
  this.resetData();
};
/**
 *
 * @param {String/Array} boardIds
 * @param {String/Array} urls
 * @param {Boolean} needReport 是否需要上报
 */


Store.prototype.addBackgroundPic = function (_ref2) {
  var _this11 = this;

  var boardIds = _ref2.boardIds,
      urls = _ref2.urls,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE : _ref2$type,
      _ref2$needReport = _ref2.needReport,
      needReport = _ref2$needReport === void 0 ? true : _ref2$needReport,
      _ref2$position = _ref2.position,
      position = _ref2$position === void 0 ? _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER : _ref2$position;
  this.aegis.report('addBackgroundPic', {
    boardIds: boardIds,
    urls: urls,
    type: type,
    needReport: needReport,
    position: position
  });
  var boards = [];
  var bgUrls = [];

  if (Array.isArray(boardIds)) {
    if (!Array.isArray(urls) || boardIds.length != urls.length) {
      // 如果boardIds是数组，urls必须为数组， 且长度必须相等
      return false;
    } else {
      boards = boardIds;
      bgUrls = urls;
    }
  } else {
    // 如果是字符串
    if (Array.isArray(urls)) {
      // 如果boardIds字符串，urls必须为字符串
      return false;
    } else {
      boards = [boardIds];
      bgUrls = [urls];
    }
  }

  var reportMsg = [];
  this.cancelSelect();
  boards.forEach(function (boardId, index) {
    if (boardId === _this11.currentBoard) {
      // 如果修改的是当前的白板
      needReport && _this11.addRealtimeData({
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
        "url": encodeURI(bgUrls[index]),
        "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        "mode": position,
        "type": type,
        "cleanBoard": 0
      });
    }

    if (!_this11.data[boardId]) {
      _this11.addBoard(boardId);
    }

    _this11.backgroundPic[boardId].url = bgUrls[index];
    _this11.backgroundPic[boardId].show = true;
    _this11.backgroundPic[boardId].mode = position;
    _this11.backgroundPic[boardId].type = type;
    reportMsg.push({
      type: 'image',
      seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      content: {
        fid: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(boardId),
        boardId: boardId,
        url: bgUrls[index],
        updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        type: type,
        mode: position
      }
    });
  });
  needReport && this.report.reportImages(reportMsg);
  this.setNeedDraw(true);
};

Store.prototype.setBackgroundPic = function (boardId, url) {
  var position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER;
  this.aegis.report('setBackgroundPic', {
    boardId: boardId,
    url: url,
    position: position
  });
  var fid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(boardId);

  if (!url || fid != _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
    // 如果是文件，则不允许设置背景图片和背景H5
    return;
  }

  this.cancelSelect();
  this.addBackgroundPic({
    boardIds: boardId || this.currentBoard,
    urls: url,
    type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
    needReport: false,
    position: position
  });
  this.sendRequest(boardId, [{
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
    "url": url,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "mode": position,
    "type": _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
    "cleanBoard": 0
  }]);
  this.report.reportImage(boardId || this.currentBoard, url, position);
};

Store.prototype.setBackgroundH5 = function (url) {
  this.aegis.report('setBackgroundH5', {
    url: url
  });

  if (!url || this.currentGroup != _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
    // 如果是文件，则不允许设置背景图片和背景H5
    return;
  }

  this.cancelSelect();
  this.addBackgroundPic({
    boardIds: this.currentBoard,
    urls: url,
    type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.H5,
    needReport: false
  });
  this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
    "url": url,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "mode": _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER,
    type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.H5,
    "cleanBoard": 0
  });
  this.report.reportImage(this.currentBoard, url, _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER, _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.H5);
};
/**
 * @description 设置当前页的背景图
 * @param {Number} position 图片相对于白板显示位置
 */


Store.prototype.updateCurrentFillMode = function (position) {
  this.aegis.report('updateCurrentFillMode', {
    position: position
  });
  var imageInfo = this.backgroundPic[this.currentBoard];

  if (imageInfo && imageInfo.url) {
    this.setBackgroundPic(this.currentBoard, imageInfo.url, position);
  }
};

Store.prototype.deleteBackgroundPic = function (boardId) {
  this.aegis.report('deleteBackgroundPic', {
    boardId: boardId
  });
  this.cancelSelect();
  this.backgroundPic[boardId].show = false;
  this.setNeedDraw(true);
}; //  取消背景图


Store.prototype.cancelBackgroundPic = function () {
  this.aegis.report('cancelBackgroundPic');
  this.cancelSelect();
  this.deleteBackgroundPic(this.currentBoard);
  this.img.style.display = 'none';
  this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.DELETE_BG_IMG_ACTION,
    "seq": this.getSeq()
  }); // 清空

  this.report.reportImage(this.currentBoard, '', 0);
}; //  取消全局背景色


Store.prototype.clearGlobalBgColor = function () {
  this.aegis.report('clearGlobalBgColor');
  this.setGlobalBackgroundColor(this.options.globalBackgroundColor);
};

Store.prototype.updateVideo = function (fid, status, progress) {
  var isSync = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var file = this.getFileInfo(fid);

  if (file == null) {
    return;
  } // 取消选区


  this.cancelSelect();

  if (status >= 0) {
    file.status = status;
  }

  if (progress >= 0) {
    file.progress = progress;
  }

  var timestamp = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
  file.timestamp = timestamp;

  if (isSync) {
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.VIDEO_EVENT_ACTION,
      "time": timestamp,
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "fid": fid,
      "status": file.status,
      "progress": file.progress
    });
    this.sendRequest();
    this.report.reportAddFile(file);
  }
};
/**
 * 要跳转的页数索引（也包含切换动画步骤）
 */


Store.prototype.switchPage = function () {
  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  this.aegis.report('switchPage', {
    index: index
  });
  var boardId = null;
  var boards = [];
  boards = this.getBoardByGroup(this.getCurrentFile());
  index = Math.min(index, boards.length - 1);
  boardId = boards[index];
  return this.switchBoard(boardId);
};

Store.prototype.switchH5Board = function (_ref3) {
  var fid = _ref3.fid,
      slideIndex = _ref3.slideIndex,
      stepIndex = _ref3.stepIndex,
      resetStep = _ref3.resetStep,
      usePrevNextStepMethod = _ref3.usePrevNextStepMethod;
  this.aegis.report('switchH5Board', {
    fid: fid,
    slideIndex: slideIndex,
    stepIndex: stepIndex,
    resetStep: resetStep,
    usePrevNextStepMethod: usePrevNextStepMethod
  }); // 取消选区

  this.cancelSelect();
  var boards = this.getBoardByGroup(fid);
  var file = this.getFileInfo(fid);
  var boardId = boards[slideIndex];
  var isPageNumberChange = false; // 页数是否有变化

  if (boardId !== this.currentBoard) {
    // 如果两个白板id不等
    isPageNumberChange = true; //页数发送变化
  } // 当前白板


  this.currentBoard = boardId; // 当前分组

  this.currentGroup = fid; // 如果页数和步数已经相同了，则不发消息了（isprint会触发多次， slideStepChangeEvent 会触发多次）

  if (file.currentPageIndex === slideIndex && file.currentPageStep == Math.max(0, stepIndex)) {
    return boardId;
  }

  file.currentPageIndex = slideIndex;
  file.currentPageStep = Math.max(0, stepIndex); // -1 表示重置

  file.pageCount = boards.length;
  var bgUrl = this.backgroundPic[this.currentBoard] ? this.backgroundPic[this.currentBoard].url : '';
  bgUrl && this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
    "url": bgUrl,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "mode": this.backgroundPic[this.currentBoard].mode,
    "type": this.backgroundPic[this.currentBoard].type,
    "cleanBoard": 0
  });
  var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
  this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.SWITCH_ACTION,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": seq,
    "toBoardId": boardId,
    "deleteBoards": [],
    "deleteFiles": [],
    "page": file.currentPageIndex,
    "step": stepIndex,
    "resetStep": resetStep,
    "usePrevNextStepMethod": usePrevNextStepMethod
  });
  this.maxSeq = seq; // 本地操作后也记录最大seq，保证其他端操作不影响

  this.sendRequest();
  this.report.reportSwitchBoard({
    boardId: boardId,
    fid: file.fid,
    url: file.downloadURL,
    type: file.type,
    page: file.currentPageIndex,
    step: file.currentPageStep,
    ratio: file.ratio,
    scale: file.scale
  });
  this.report.reportAddFile(file);
  isPageNumberChange && this.event.fire(this, 'TEB_GOTOBOARD', boardId, fid);
  this.setNeedDraw(true);
  return boardId;
};

Store.prototype.switchBoard = function (boardId) {
  this.aegis.report('switchBoard', {
    boardId: boardId
  }); // 取消选区

  this.cancelSelect(); // 如果boardId存在，且不在列表中，则返回切换失败

  if (boardId && !this.data[boardId]) {
    console.error('没有这一页白板');
    return false;
  }

  if (!boardId) {
    // 如果没有传boardId，则是新增
    boardId = this.createBoardId();
    this.addBoard(boardId);
  } // 当前白板


  this.currentBoard = boardId; // 当前分组

  this.currentGroup = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(boardId);
  var boards = this.getBoardByGroup(this.currentGroup);
  var file = this.getFileInfo(this.currentGroup);
  var index = boards.indexOf(boardId);
  var step = file.currentPageStep;
  file.currentPageIndex = index;
  file.currentPageStep = step;
  file.pageCount = boards.length;
  var bgUrl = this.backgroundPic[this.currentBoard] ? this.backgroundPic[this.currentBoard].url : '';
  bgUrl && this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_IMG_ACTION,
    "url": bgUrl,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "mode": this.backgroundPic[this.currentBoard].mode,
    "type": this.backgroundPic[this.currentBoard].type,
    "cleanBoard": 0
  });
  var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
  this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.SWITCH_ACTION,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": seq,
    "toBoardId": boardId,
    "deleteBoards": [],
    "deleteFiles": [],
    "page": file.currentPageIndex,
    "step": step
  });
  this.maxSeq = seq; // 本地操作后也记录最大seq，保证其他端操作不影响

  this.sendRequest();
  this.report.reportSwitchBoard({
    boardId: boardId,
    fid: file.fid,
    url: file.downloadURL,
    type: file.type,
    page: file.currentPageIndex,
    step: file.currentPageStep,
    ratio: file.ratio,
    scale: file.scale
  });
  this.report.reportAddFile(file);
  this.event.fire(this, 'TEB_GOTOBOARD', this.currentBoard, _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(this.currentBoard));
  this.setNeedDraw(true);
  return boardId;
};
/**
 * 设置全局背景颜色
 * @param {*} color color 数字颜色，默认白色
 * @param {*} noSend 不发送和不上报，用户主动改变的才需要上报和发送， 对外的接口只能是上报的，只有内部的才不上报
 */


Store.prototype.setGlobalBackgroundColor = function (color, noSend) {
  var _this12 = this;

  this.aegis.report('setGlobalBackgroundColor', {
    color: color,
    noSend: noSend
  });

  if (!color) {
    color = _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].COLOR.WHITE;
  }

  var numberColor = 0;

  if (typeof color === 'number') {
    this.globalBackgroundColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(color);
    numberColor = color;
  } else if (typeof color === 'string' && color.indexOf('#') == 0 && (color.length === 4 || color.length === 7)) {
    this.globalBackgroundColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].hexToRgba(color);
    numberColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].hexToRgba(color));
  } else if (typeof color === 'string' && color.startsWith('rgba(')) {
    // 如果是rgba
    this.globalBackgroundColor = color;
    numberColor = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(color);
  } // 遍历修改


  this.boardList.forEach(function (boardId) {
    _this12.backgroundColor[boardId] = _this12.globalBackgroundColor;
  });
  this.setNeedDraw(true);

  if (!noSend) {
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.UPDATE_BG_COLOR_ACTION,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "color": numberColor,
      "isGlobal": 1
    });
    this.report.reportGlobalBgColor(numberColor);
  }
};

Store.prototype.getGlobalBackgroundColor = function () {
  return this.globalBackgroundColor;
};

Store.prototype.preloadBoard = function () {
  // 针对PPT动画的预加载
  var boardList = [];

  for (var i = 0; i < this.groups.length; ++i) {
    var fileInfo = this.groups[i];

    if (fileInfo.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
      // 组合白板列表
      var fileBoardList = this.getBoardByGroup(fileInfo.fid);
      boardList = boardList.concat(fileBoardList);
    } else if (fileInfo.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5) {
      var preloaded = this.pptFilePreloaded[fileInfo.fid];

      if (!preloaded) {
        if (fileInfo.fid === this.currentGroup) {
          // 当前PPT动画已加载过，做标记并忽略
          this.pptFilePreloaded[fileInfo.fid] = true;
          continue;
        }

        var loadUrl = fileInfo.downloadURL + "?page=".concat(fileInfo.currentPageIndex, "&step=").concat(fileInfo.currentPageStep, "&fid=").concat(encodeURIComponent(fileInfo.fid));

        (function (url, delay) {
          setTimeout(function () {
            var ifrm = document.createElement("iframe");
            ifrm.setAttribute('style', 'position:fixed;visibility:hidden;width:0px;height:0px;border:none;');
            document.body.appendChild(ifrm);

            ifrm.onload = function () {
              setTimeout(function () {
                // 延时100ms再remove
                ifrm.remove();
              }, 100); // console.log('++++++++++++++++++++++++ ppt load end', this.src);
            };

            ifrm.setAttribute("src", url); // console.log('++++++++++++++++++++++++ ppt load start', url);
          }, delay);
        })(loadUrl, 1000);

        this.pptFilePreloaded[fileInfo.fid] = true;
      }
    }
  }

  if (boardList.length === 0) {
    return;
  } // 针对白板的预加载


  var boardIndex = boardList.indexOf(this.currentBoard);

  for (var _i = -this.preloadDepth; _i < this.preloadDepth; ++_i) {
    var preloadIndex = boardIndex + _i;

    if (preloadIndex < 0 || preloadIndex >= boardList.length) {
      continue;
    }

    var boardId = boardList[preloadIndex];
    var preloadPic = this.backgroundPic[boardId]; // 拿到背景信息

    if (preloadPic && !preloadPic.preloaded && preloadPic.url !== undefined && preloadPic.url !== '') {
      if (_i === 0) {
        // 当前页面已加载过，做标记并忽略
        preloadPic.preloaded = true;
        continue;
      }

      if (preloadPic.type === _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE) {
        // 图片背景
        (function (url, delay) {
          setTimeout(function () {
            var img = new Image();

            img.onload = function () {// console.log('++++++++++++++++++++++++ img load end', this.src);
            };

            img.onabort = function () {// console.log('++++++++++++++++++++++++ img load above', this.src);
            };

            img.onerror = function () {// console.log('++++++++++++++++++++++++ img load error', this.src);
            };

            img.src = url; // console.log('++++++++++++++++++++++++ img load start', url);
          }, delay);
        })(preloadPic.url, (Math.abs(_i) - 1) * 200);
      } else if (preloadPic.type === _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.H5) {
        // H5背景
        (function (url, delay) {
          setTimeout(function () {
            var ifrm = document.createElement("iframe");
            ifrm.setAttribute('style', 'position:fixed;visibility:hidden;width:0px;height:0px;border:none;');
            document.body.appendChild(ifrm);

            ifrm.onload = function () {
              ifrm.remove(); // console.log('++++++++++++++++++++++++ h5 load end', this.src);
            };

            ifrm.setAttribute("src", url); // console.log('++++++++++++++++++++++++ h5 load start', url);
          }, delay);
        })(preloadPic.url, (Math.abs(_i) - 1) * 200);
      }

      preloadPic.preloaded = true;
    }
  }
}; // -------------------------------------  采集白板数据  --------------------------------------------------------------------

/**
 * 重置操作步骤
 * 如 opData 记录了 [第一步，第二步，第三步，第四步，第五步]，
 * 而此时opIndex则回退到了 第三步，此时再进行新的涂鸦操作，则舍弃第四步，第五步的操作
 */


Store.prototype.resetOperation = function () {
  this.opData[this.currentBoard] = this.opData[this.currentBoard].slice(0, this.opIndex[this.currentBoard]);
};
/**
 * 采集划线的数据
 */


Store.prototype.collectLineData = function () {
  var _this13 = this;

  var self = this;
  return {
    /**
     * 鼠标按下，画线开始
     * @param {*} startX
     * @param {*} startY
     */
    start: function start(startX, startY) {
      var writing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // this.lastLineTimestamp = util.getTimeStamp();
      // this.lastLinePoint = {
      //   x: startX,
      //   y: startY
      // };
      var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
      var time = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
      _this13.belongLineSeq = seq;
      var line = new _Line__WEBPACK_IMPORTED_MODULE_27__["default"](_this13.identifier, {
        action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_START_ACTION,
        color: _this13.color,
        thin: _this13.thin,
        x: startX,
        y: startY,
        w: _this13.thin,
        writing: writing,
        show: true,
        seq: seq,
        belongSeq: seq,
        time: time,
        timestamp: time
      });
      line.drawIndex = line.lines.length;

      _this13.userData[_this13.currentBoard][_this13.identifier].push(line);

      _this13.data[_this13.currentBoard].push(line);

      _this13.opData[_this13.currentBoard].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](_this13.identifier, {
        seq: line.seq,
        type: _this13.type
      }));

      _this13.opIndex[_this13.currentBoard]++;
      var actionData = {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_START_ACTION,
        // begin画线
        "color": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(line.color),
        "scale": 100,
        "thin": line.thin,
        "time": time,
        "timestamp": time,
        "seq": line.seq,
        "belongSeq": line.belongSeq,
        "x": startX,
        "y": startY,
        "w": line.thin,
        "writing": writing ? 1 : 0
      };

      _this13.addRealtimeData(actionData);
    },
    draw: function draw(currentX, currentY, thin) {
      // var curLineTimestamp = util.getTimeStamp();
      // var distance = Math.sqrt(Math.pow(this.lastLinePoint.x - currentX) + Math.pow(this.lastLinePoint.y - currentY));
      // if (curLineTimestamp - this.lastLineTimestamp < 30 || distance < 3) {
      //   console.log("================== ignore ===================");
      //   return;
      // }
      // this.lastLineTimestamp = curLineTimestamp;
      // this.lastLinePoint = {
      //   x: currentX,
      //   y: currentY
      // };
      var length = _this13.userData[_this13.currentBoard][_this13.identifier].length;
      var line = _this13.userData[_this13.currentBoard][_this13.identifier][length - 1];

      if (!line) {
        _this13.collectLineData().start(currentX, currentY, _this13.isHandwritingEnable());

        length = _this13.userData[_this13.currentBoard][_this13.identifier].length;
        line = _this13.userData[_this13.currentBoard][_this13.identifier][length - 1];
      }

      line.setBorder(currentX, currentY);
      var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
      var time = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
      line.lines.push({
        action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_MOVE_ACTION,
        x: currentX,
        y: currentY,
        w: thin,
        seq: seq,
        timestamp: time
      });
      line.drawIndex = line.lines.length;
      var actionData = {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_MOVE_ACTION,
        "seq": seq,
        "belongSeq": _this13.belongLineSeq,
        "x": currentX,
        "y": currentY,
        "w": thin,
        "timestamp": time
      };

      _this13.addRealtimeData(actionData);
    },
    end: function end(endX, endY, thin) {
      var writing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var length = _this13.userData[_this13.currentBoard][_this13.identifier].length;
      var line = _this13.userData[_this13.currentBoard][_this13.identifier][length - 1];

      if (!line) {
        _this13.collectLineData().start(endX, endY, _this13.isHandwritingEnable());

        length = _this13.userData[_this13.currentBoard][_this13.identifier].length;
        line = _this13.userData[_this13.currentBoard][_this13.identifier][length - 1];
      }

      line.setBorder(endX, endY);
      var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
      var time = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
      line.lines.push({
        action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_END_ACTION,
        x: endX,
        y: endY,
        w: thin || self.thin,
        seq: seq,
        timestamp: time
      });
      line.endSeq = seq;
      line.drawIndex = line.lines.length;
      var actionData = {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_END_ACTION,
        "belongSeq": _this13.belongLineSeq,
        "seq": seq,
        "x": endX,
        "y": endY,
        "w": thin,
        "timestamp": time
      };

      _this13.addRealtimeData(actionData); // this.setNeedDraw(true);
      // 画完线 得report


      var pointList = [];
      line.lines.forEach(function (item) {
        pointList.push({
          seq: item.seq,
          x: item.x,
          y: item.y,
          w: item.w,
          timestamp: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp()
        });
      }); // console.log("linejson" + linejson);
      // 上报线条数据

      _this13.report.reportAddLine({
        belongSeq: _this13.belongLineSeq,
        boardId: _this13.currentBoard,
        uid: line.user,
        colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(_this13.color),
        scale: 100,
        width: _this13.thin,
        writing: writing ? 1 : 0,
        time: line.time,
        updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        seq: line.seq,
        hidden: !line.show * 1,
        points: pointList
      });
    },
    over: function over(endX, endY) {
      this.end(endX, endY, self.thin);
    }
  };
};
/**
 * 采集文字输入的数据
 */


Store.prototype.collectTextInputData = function () {
  var _this14 = this;

  return {
    /**
     * 鼠标按下，文字输入开始
     * @param {*} startX
     * @param {*} startY
     */
    start: function start(startX, startY) {
      var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
      var inputText;

      try {
        // 检测重复编辑
        var allData = _this14.data[_this14.currentBoard];
        var maxSeqIndex = {
          seq: 0,
          index: -1
        }; // 记录最大的seq和顺序 （重叠部分按最大Seq优先被选中）

        allData.forEach(function (item, index) {
          if (item.type === 'inputtext' && item.show && item.user === _this14.identifier) {
            //
            var errorXNum = 5 / _this14.boardWidth * 10000; //误差值

            var errorYNum = 5 / _this14.boardHeight * 10000; //误差值

            var startPointX = item.location.x - errorXNum;
            var startPointY = item.location.y - errorYNum;
            var endPointX = item.location.x + item.textWidth
            /*(item.textWidth / this.boardWidth * 10000)*/
            + errorXNum;
            var endPointY = item.location.y + item.textHeight
            /*(item.textHeight / this.boardHeight * 10000)*/
            + errorYNum;

            if (startX >= startPointX && startX <= endPointX && startY >= startPointY && startY <= endPointY) {
              if (item.belongSeq > maxSeqIndex.seq) {
                maxSeqIndex = {
                  seq: item.belongSeq,
                  index: index
                };
              }
            }
          }
        });

        if (maxSeqIndex.index > -1) {
          var item = _this14.data[_this14.currentBoard].splice(maxSeqIndex.index, 1)[0];

          item.show = true;
          inputText = item;
          var userData = _this14.userData[_this14.currentBoard][_this14.identifier] || [];
          userData.forEach(function (userItemData, index) {
            if (userItemData.belongSeq === inputText.belongSeq) {
              _this14.userData[_this14.currentBoard][_this14.identifier].splice(index, 1);
            }
          });
        }
      } catch (error) {}

      if (!inputText) {
        inputText = new _InputText__WEBPACK_IMPORTED_MODULE_28__["default"](_this14.identifier, {
          x: startX,
          y: startY,
          belongSeq: seq
        });
        inputText.color = _this14.getTextColor();
        inputText.textSize = _this14.getTextSize(); // modify Math.floor(this.getTextSize() / this.boardHeight * 10000);

        inputText.typeFace = _this14.getTextFontFamily();
        inputText.fontStyle = _this14.getTextFontStyle(); // 文字样式 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；
      }

      _this14.userData[_this14.currentBoard][_this14.identifier].push(inputText);

      _this14.data[_this14.currentBoard].push(inputText);

      var hasOperation = false; // 如果已经存在了operation，则不在二次加入

      for (var j = 0, size = _this14.opData[_this14.currentBoard].length; j < size; j++) {
        var operation = _this14.opData[_this14.currentBoard][j];

        if (operation.seq === inputText.belongSeq) {
          hasOperation = true;
          break;
        }
      }

      if (!hasOperation) {
        _this14.opData[_this14.currentBoard].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](_this14.identifier, {
          seq: inputText.belongSeq,
          type: _this14.type
        }));

        _this14.opIndex[_this14.currentBoard]++;
      }

      clearInterval(_this14.textInputTask); // 清空文字输入定时器

      _this14.textInputTask = null;
      _this14.lastInputActionData = null;
      return inputText;
    },
    inputting: function inputting(textComponent, textItem, content, textWidth, textHeight) {
      var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
      var boardId = textComponent.boardId || _this14.currentBoard;
      var length = _this14.userData[boardId][_this14.identifier].length;

      if (!textItem) {
        return;
      }

      textItem.text = content;
      textItem.seq = seq;
      textItem.textWidth = textWidth / _this14.boardWidth * 10000;
      textItem.textHeight = textHeight / _this14.boardHeight * 10000;
      var actionData = {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.INPUT_TEXT_ACTION,
        "seq": seq,
        "belongSeq": textItem.belongSeq,
        "color": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(textItem.color),
        // uint32 RGBA 文字颜色颜色数据
        "scale": 100,
        // uint32 白板内容和白板大小的比例*100，默认100(渲染时宽度需要*当前scale/字段scale)
        "typeFace": textItem.typeFace,
        "textSize": Math.floor(textItem.textSize),
        // uint32 字体大小除以画板高度*10000
        "fontStyle": textItem.fontStyle,
        // 文字样式 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；
        "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        "x": textItem.location.x,
        // uint32 起点x相对白板宽度比例*10000
        "y": textItem.location.y,
        // uint32 起点y相对白板高度比例*10000
        "text": encodeURI(escape(content)),
        // 文字内容
        "textWidth": textItem.textWidth,
        "textHeight": textItem.textHeight
      }; // 需要过滤掉多余的信息

      _this14.realTimeData = _this14.realTimeData.filter(function (item) {
        if (item.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.INPUT_TEXT_ACTION && item.belongSeq === textItem.belongSeq) {
          return false;
        } else {
          return true;
        }
      });

      _this14.addRealtimeData(actionData);

      _this14.lastInputActionData = actionData;

      (function (boardId) {
        if (!_this14.textInputTask) {
          // 解决后进来的同学，拉不到数据的问题（间隔3s报一次）
          _this14.textInputTask = setInterval(function () {
            if (boardId != _this14.getCurrentBoard()) {
              clearInterval(_this14.textInputTask);
              _this14.textInputTask = null; // todo 删掉未发送的数据

              return;
            } // 需要过滤掉多余的信息


            _this14.realTimeData = _this14.realTimeData.filter(function (item) {
              if (item.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.INPUT_TEXT_ACTION && item.belongSeq === _this14.lastInputActionData.belongSeq) {
                return false;
              } else {
                return true;
              }
            });
            _this14.lastInputActionData.seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();

            _this14.addRealtimeData(_this14.lastInputActionData);
          }, 3000);
        }
      })(boardId);
    },
    draw: function draw(textComponent, textItem, content, textWidth, textHeight) {
      // 清空文本输入工具任务
      clearInterval(_this14.textInputTask);
      _this14.textInputTask = null;
      _this14.lastInputActionData = null;
      var boardId = textComponent.boardId || _this14.currentBoard;
      var length = _this14.userData[boardId][_this14.identifier].length;

      if (!content && !content.trim()) {
        // 如果输入空
        var operationIndex = -1; //

        for (var i = 0, len = _this14.opData[boardId].length; i < len; i++) {
          var operation = _this14.opData[boardId][i];

          if (operation.seq === textItem.belongSeq) {
            operationIndex = i;
            break;
          }
        }

        if (operationIndex > -1) {
          _this14.opData[boardId].splice(operationIndex, 1);

          _this14.opIndex[boardId]--;
        }

        _this14.userData[boardId][_this14.identifier].splice(length - 1, 1);

        _this14.data[boardId].splice(_this14.data[boardId].length - 1, 1);

        return;
      }

      if (!textItem) {
        return;
      }

      var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
      textItem.seq = seq;
      textItem.text = content;
      textItem.show = true;
      textItem.textWidth = textWidth / _this14.boardWidth * 10000;
      textItem.textHeight = textHeight / _this14.boardHeight * 10000; // 上报文本数据

      _this14.report.reportAddText({
        belongSeq: textItem.belongSeq,
        // 该文字序列的seq，用来唯一标识一个文字序列
        time: textItem.time,
        // 添加图形时的时间
        boardId: boardId,
        // 白板id
        uid: textItem.user,
        // 画线条的用户id
        x: Math.floor(textItem.location.x),
        // uint32 起点x相对白板宽度比例*10000
        y: Math.floor(textItem.location.y),
        // uint32 起点y相对白板高度比例*10000
        colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(textItem.color),
        // 文字颜色color值
        scale: 100,
        // scale值
        updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        // 后台的线条数据可以覆盖，通过updateTime来判断是否更新（IM后台时间戳/秒）
        hidden: 0,
        // 文字是否为隐藏的（橡皮擦、撤回操作可导致）
        typeface: textItem.typeFace,
        // 暂时不填，字体类型，sans-serif，serif和monospace
        textSize: Math.floor(textItem.textSize),
        // uint32 字体大小除以画板高度*10000
        fontStyle: textItem.fontStyle,
        // 文字样式，默认填0，  0：常规；1：粗体；2.斜体；3.粗斜体；
        text: encodeURI(escape(content)),
        //文本内容与宽高
        text_wh: "".concat(textItem.textWidth, ",").concat(textItem.textHeight) // 文本宽高

      });

      var actionData = {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.INPUT_TEXT_ACTION,
        "seq": textItem.seq,
        "belongSeq": textItem.belongSeq,
        "color": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(textItem.color),
        // uint32 RGBA 文字颜色颜色数据
        "scale": 100,
        // uint32 白板内容和白板大小的比例*100，默认100(渲染时宽度需要*当前scale/字段scale)
        "typeFace": textItem.typeFace,
        "textSize": Math.floor(textItem.textSize),
        // uint32 字体大小除以画板高度*10000
        "fontStyle": textItem.fontStyle,
        // 文字样式 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；
        "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        "x": textItem.location.x,
        // uint32 起点x相对白板宽度比例*10000
        "y": textItem.location.y,
        // uint32 起点y相对白板高度比例*10000
        "text": encodeURI(escape(content)),
        // 文字内容
        "textWidth": textItem.textWidth,
        "textHeight": textItem.textHeight
      }; // this.addRealtimeData(actionData);

      _this14.sendRequest(boardId, [actionData]);

      _this14.setNeedDraw(true);
    },
    clearTask: function clearTask() {
      // 清空文本输入工具任务
      clearInterval(_this14.textInputTask);
      _this14.textInputTask = null;
      _this14.lastInputActionData = null;
    }
  };
};
/**
 * 采集橡皮擦数据
 * @param {Number} clickX
 * @param {Number} clickY
 */


Store.prototype.collectEraserData = function (clickX, clickY) {
  // 橡皮擦
  // 需要遍历全部的data 碰撞检测
  var data = this.eraserImpactCheck(clickX, clickY, this.thin / 2);

  if (data.length > 0) {
    // 放入操作
    this.opData[this.currentBoard].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](this.identifier, {
      seq: data,
      type: this.type
    }));
    this.opIndex[this.currentBoard]++;
    var actionData = {
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
      // 擦除
      "display": 0,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "x": 0,
      "y": 0,
      lines: data
    };

    if (data.length) {
      this.addRealtimeData(actionData);
      this.report.reportDisplayLine({
        boardId: this.currentBoard,
        updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        display: 0,
        lines: data
      });
    }

    this.setNeedDraw(true);
  }
};
/**
 * 采集激光笔数据
 */


Store.prototype.collectRaserData = function () {
  var _this15 = this;

  return {
    /**
     * 鼠标按下，激光笔开始
     * @param {*} startX
     * @param {*} startY
     */
    start: function start(startX, startY, toolType) {
      var time = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
      var raser = new _Raser__WEBPACK_IMPORTED_MODULE_31__["default"](_this15.identifier, {
        // 本地显示画笔
        action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION,
        color: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(_config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].COLOR.RED),
        radius: _this15.thin / 2,
        x: startX,
        y: startY,
        timestamp: time,
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        toolType: toolType
      });
      var actionData = {
        // 远端隐藏画笔
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_HIDE_ACTION,
        // 激光笔
        "r": raser.radius,
        "seq": raser.seq,
        "x": startX,
        "y": startY,
        "timestamp": time,
        "toolType": toolType
      };

      _this15.addRealtimeData(actionData);

      _this15.event.fire(_this15, 'draw_laser', raser);
    },
    draw: function draw(currentX, currentY, toolType, isMouseDown, needSend) {
      var time = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
      var raser = new _Raser__WEBPACK_IMPORTED_MODULE_31__["default"](_this15.identifier, {
        action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION,
        color: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(_config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].COLOR.RED),
        radius: _this15.thin / 2,
        x: currentX,
        y: currentY,
        timestamp: time,
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        toolType: toolType
      });

      if (toolType == 1 && isMouseDown) {//涂鸦并且鼠标按下
      } else {
        if (needSend) {
          _this15.addRealtimeData({
            "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION,
            "seq": raser.seq,
            "x": currentX,
            "y": currentY,
            "r": raser.radius,
            "timestamp": time,
            "toolType": toolType
          });
        }
      }

      _this15.event.fire(_this15, 'draw_laser', raser);
    },
    end: function end(endX, endY, toolType) {
      var isShow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var action = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION;

      if (!isShow) {
        action = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_HIDE_ACTION;
      }

      var time = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
      var raser = new _Raser__WEBPACK_IMPORTED_MODULE_31__["default"](_this15.identifier, {
        action: action,
        color: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(_config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].COLOR.RED),
        radius: _this15.thin / 2,
        x: endX,
        y: endY,
        timestamp: time,
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        toolType: toolType
      });
      var actionData = {
        "action": action,
        "seq": raser.seq,
        "r": _this15.thin / 2,
        "x": endX,
        "y": endY,
        "timestamp": time,
        "toolType": toolType
      };

      _this15.addRealtimeData(actionData);

      _this15.event.fire(_this15, 'draw_laser', raser);
    },
    over: function over(toolType) {
      this.end(0, 0, toolType);
    }
  };
};
/**
 * 采集框选数据
 */


Store.prototype.collectSelectData = function () {
  var _this16 = this;

  return {
    /**
     * 鼠标按下，选择开始
     * @param {*} startX
     * @param {*} startY
     */
    start: function start(startX, startY) {
      _this16.beforeMoveType = 'select';
      var select = new _Select__WEBPACK_IMPORTED_MODULE_30__["default"](_this16.identifier, {
        startx: startX,
        starty: startY,
        x: startX,
        y: startY
      });
      _this16.seq = select.seq;

      _this16.userData[_this16.currentBoard][_this16.identifier].push(select);

      _this16.data[_this16.currentBoard].push(select);
    },
    draw: function draw(currentX, currentY) {
      var length = _this16.userData[_this16.currentBoard][_this16.identifier].length;
      var select = _this16.userData[_this16.currentBoard][_this16.identifier][length - 1];
      select.location = {
        x: currentX,
        y: currentY
      };

      _this16.setNeedDraw(true);
    },
    end: function end(startX, startY, endX, endY) {
      var imageElementNum = 0; //图片资源的个数
      // 框选
      // 判断选中的区域
      // 由于不清楚 选框中 x y 大小 需要判断下

      var areaLargeX = startX > endX ? startX : endX;
      var areaLargeY = startY > endY ? startY : endY;
      var areasmallX = startX + endX - areaLargeX;
      var areasmallY = startY + endY - areaLargeY;
      var minX = 10000;
      var minY = 10000;
      var maxX = 0;
      var maxY = 0;

      for (var i = _this16.data[_this16.currentBoard].length - 1; i >= 0; i--) {
        var item = _this16.data[_this16.currentBoard][i];

        if (_this16.accessibleUsers && _this16.accessibleUsers.length > 0) {
          if (!_this16.accessibleUsers.includes(item.user)) {
            continue;
          }
        }

        if (item.type == 'line' && item.show) {
          if (areaLargeX >= item.border.maxX && areaLargeY >= item.border.maxY && areasmallX <= item.border.minX && areasmallY <= item.border.minY) {
            item.select = true;

            _this16.selectedList.push(item);

            minX = minX < item.border.minX ? minX : item.border.minX;
            minX = minX < item.border.maxX ? minX : item.border.maxX;
            minY = minY < item.border.minY ? minY : item.border.minY;
            minY = minY < item.border.maxY ? minY : item.border.maxY;
            maxX = maxX > item.border.minX ? maxX : item.border.minX;
            maxX = maxX > item.border.maxX ? maxX : item.border.maxX;
            maxY = maxY > item.border.minY ? maxY : item.border.minY;
            maxY = maxY > item.border.maxY ? maxY : item.border.maxY;
          }
        } else if (item.type == 'graph' && item.show) {
          if (areaLargeX >= item.endPoint.x && areaLargeY >= item.endPoint.y && areasmallX <= item.startPoint.x && areasmallY <= item.startPoint.y) {
            item.select = true;

            _this16.selectedList.push(item);

            minX = minX < item.startPoint.x ? minX : item.startPoint.x - item.thin;
            minX = minX < item.endPoint.x ? minX : item.endPoint.x - item.thin;
            minY = minY < item.startPoint.y ? minY : item.startPoint.y - item.thin;
            minY = minY < item.endPoint.y ? minY : item.endPoint.y - item.thin;
            maxX = maxX > item.startPoint.x ? maxX : item.startPoint.x + item.thin;
            maxX = maxX > item.endPoint.x ? maxX : item.endPoint.x + item.thin;
            maxY = maxY > item.startPoint.y ? maxY : item.startPoint.y + item.thin;
            maxY = maxY > item.endPoint.y ? maxY : item.endPoint.y + item.thin;
          }
        } else if (item.type == 'inputtext' && item.show && item.text) {
          var startPointX = item.location.x;
          var startPointY = item.location.y;
          var endPointX = item.location.x + item.textWidth; //(item.textWidth / this.boardWidth * 10000);

          var endPointY = item.location.y + item.textHeight; //(item.textHeight / this.boardHeight * 10000);

          if (areaLargeX >= endPointX && areaLargeY >= endPointY && areasmallX <= startPointX && areasmallY <= startPointY) {
            item.select = true;

            _this16.selectedList.push(item);

            minX = minX < item.location.x ? minX : item.location.x;
            minX = minX < endPointX ? minX : endPointX;
            minY = minY < item.location.y ? minY : item.location.y;
            minY = minY < endPointY ? minY : endPointY;
            maxX = maxX > item.location.x ? maxX : item.location.x;
            maxX = maxX > endPointX ? maxX : endPointX;
            maxY = maxY > item.location.y ? maxY : item.location.y;
            maxY = maxY > endPointY ? maxY : endPointY;
          }
        } else if (item.type == 'imageElement' && item.show) {
          if (areaLargeX >= item.rectArea.maxX && areaLargeY >= item.rectArea.maxY && areasmallX <= item.rectArea.minX && areasmallY <= item.rectArea.minY) {
            ++imageElementNum;

            _this16.selectedList.push(item);
          }
        }
      }

      if (_this16.selectedList.length > 0) {
        if (_this16.selectedList.length === imageElementNum) {
          // 如果都是图片元素，则不显示选择框
          _this16.selectArea = {
            x: -10,
            y: -10,
            width: 0,
            height: 0
          };
        } else {
          _this16.selectArea = {
            x: minX,
            y: minY,
            width: maxX - minX,
            height: maxY - minY
          };
        }
      } // 隐藏总的框选


      var select = _this16.userData[_this16.currentBoard][_this16.identifier][_this16.userData[_this16.currentBoard][_this16.identifier].length - 1];
      select.show = false;

      _this16.setNeedDraw(true);

      if (_this16.selectedList.length) {
        // 如果有选中的元素
        _this16.event.fire(_this16, _event_TEduEvent__WEBPACK_IMPORTED_MODULE_46__["default"].commonEvent.TEB_RECTSELECTED);
      }
    }
  };
};
/**
 * 采集点选数据
 */


Store.prototype.collectPointSelectData = function (endX, endY) {
  this.beforeMoveType = 'pointselect'; // 点选
  // 点选
  // 判断选中了谁  倒着判断

  var status = false; // 是否选中了一块

  var minX = 10000;
  var minY = 10000;
  var maxX = 0;
  var maxY = 0;

  for (var i = this.data[this.currentBoard].length - 1; i >= 0; i--) {
    var item = this.data[this.currentBoard][i];

    if (this.accessibleUsers && this.accessibleUsers.length > 0) {
      if (!this.accessibleUsers.includes(item.user)) {
        continue;
      }
    }

    if (item.type == 'line' && item.show) {
      if (endX < item.border.maxX && endX > item.border.minX && endY < item.border.maxY && endY > item.border.minY) {
        status = true;
        item.select = true;
        this.selectedList = [item];
        minX = minX < item.border.minX ? minX : item.border.minX;
        minX = minX < item.border.maxX ? minX : item.border.maxX;
        minY = minY < item.border.minY ? minY : item.border.minY;
        minY = minY < item.border.maxY ? minY : item.border.maxY;
        maxX = maxX > item.border.minX ? maxX : item.border.minX;
        maxX = maxX > item.border.maxX ? maxX : item.border.maxX;
        maxY = maxY > item.border.minY ? maxY : item.border.minY;
        maxY = maxY > item.border.maxY ? maxY : item.border.maxY;
        break;
      }
    } else if (item.type == 'graph' && item.show) {
      // 区分一下大小的X Y
      var graphLargeX = item.endPoint.x;
      var graphLargeY = item.endPoint.y;
      var graphSmallX = item.startPoint.x;
      var graphSmallY = item.startPoint.y;

      if (graphLargeX < graphSmallX) {
        // 交换位置
        graphLargeX = graphLargeX + graphSmallX;
        graphSmallX = graphLargeX - graphSmallX;
        graphLargeX = graphLargeX - graphSmallX;
      }

      if (graphLargeY < graphSmallY) {
        // 交换位置
        graphLargeY = graphLargeY + graphSmallY;
        graphSmallY = graphLargeY - graphSmallY;
        graphLargeY = graphLargeY - graphSmallY;
      }

      graphLargeY += this.thin;
      graphLargeX += this.thin;
      graphSmallX -= this.thin;
      graphSmallY -= this.thin;

      if (endX >= graphSmallX && endX <= graphLargeX && endY >= graphSmallY && endY <= graphLargeY) {
        status = true;
        item.select = true;
        this.selectedList = [item];
        minX = minX < item.startPoint.x ? minX : item.startPoint.x - item.thin;
        minX = minX < item.endPoint.x ? minX : item.endPoint.x - item.thin;
        minY = minY < item.startPoint.y ? minY : item.startPoint.y - item.thin;
        minY = minY < item.endPoint.y ? minY : item.endPoint.y - item.thin;
        maxX = maxX > item.startPoint.x ? maxX : item.startPoint.x + item.thin;
        maxX = maxX > item.endPoint.x ? maxX : item.endPoint.x + item.thin;
        maxY = maxY > item.startPoint.y ? maxY : item.startPoint.y + item.thin;
        maxY = maxY > item.endPoint.y ? maxY : item.endPoint.y + item.thin;
        break;
      }
    } else if (item.type === 'inputtext' && item.show && item.text) {
      // 文字输入
      var errorXNum = 5 / this.boardWidth * 10000; //误差值

      var errorYNum = 5 / this.boardHeight * 10000; //误差值

      var startPointX = item.location.x - errorXNum;
      var startPointY = item.location.y - errorYNum;
      var endPointX = item.location.x + item.textWidth
      /*(item.textWidth / this.boardWidth * 10000)*/
      + errorXNum;
      var endPointY = item.location.y + item.textHeight
      /*(item.textHeight / this.boardHeight * 10000)*/
      + errorYNum;

      if (endX >= startPointX && endX <= endPointX && endY >= startPointY && endY <= endPointY) {
        status = true;
        item.select = true;
        this.selectedList = [item];
        minX = minX < item.location.x ? minX : item.location.x;
        minX = minX < endPointX ? minX : endPointX;
        minY = minY < item.location.y ? minY : item.location.y;
        minY = minY < endPointY ? minY : endPointY;
        maxX = maxX > item.location.x ? maxX : item.location.x;
        maxX = maxX > endPointX ? maxX : endPointX;
        maxY = maxY > item.location.y ? maxY : item.location.y;
        maxY = maxY > endPointY ? maxY : endPointY;
        break;
      }
    } else if (item.type === 'imageElement' && item.show) {
      // 图片元素
      if (endX < item.rectArea.maxX && endX > item.rectArea.minX && endY < item.rectArea.maxY && endY > item.rectArea.minY) {
        status = true; // item.select = true;

        this.selectedList = [item];
        minX = 0;
        minX = 0;
        minY = 0;
        minY = 0;
        maxX = 0;
        maxX = 0;
        maxY = 0;
        maxY = 0; // minX = minX < item.rectArea.minX ? minX : item.rectArea.minX;
        // minX = minX < item.rectArea.maxX ? minX : item.rectArea.maxX;
        // minY = minY < item.rectArea.minY ? minY : item.rectArea.minY;
        // minY = minY < item.rectArea.maxY ? minY : item.rectArea.maxY;
        // maxX = maxX > item.rectArea.minX ? maxX : item.rectArea.minX;
        // maxX = maxX > item.rectArea.maxX ? maxX : item.rectArea.maxX;
        // maxY = maxY > item.rectArea.minY ? maxY : item.rectArea.minY;
        // maxY = maxY > item.rectArea.maxY ? maxY : item.rectArea.maxY;

        break;
      }
    }
  }

  if (status) {
    this.selectArea = {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
    this.setNeedDraw(true); // this.setType('move');
  }
};
/**
 * 采集点选或者框选后移动的数据
 */


Store.prototype.collectMoverData = function () {
  var _this17 = this;

  return {
    // 开始移动的检测
    beforeStart: function beforeStart(startX, startY) {
      // 移动
      // 移动得判断当前点击的位置 是否在选择区域内
      // 算入操作
      if (_this17.selectedList.length == 0) {
        return false;
      }

      var status = false;

      if (startX > _this17.selectArea.x && startX < _this17.selectArea.x + _this17.selectArea.width && startY > _this17.selectArea.y && startY < _this17.selectArea.y + _this17.selectArea.height) {
        status = true;
      } // for (var i = 0; i < this.selectedList.length; i++) {
      //   var item = this.selectedList[i];
      //   if (item.type == 'line') {
      //     var halfThinWidth = this.thin * 1.5;
      //     var halfThinHeight = this.thin * 1.5;
      //     if (item.border.minX - halfThinWidth <= startX && item.border.maxX + halfThinWidth >= startX && item.border.minY - halfThinHeight <= startY && item.border.maxY + halfThinHeight >= startY) {
      //       status = true;
      //       break;
      //     }
      //   } else if (item.type == 'graph') {
      //     var sX = item.startPoint.x;
      //     var eX = item.endPoint.x;
      //     var sY = item.startPoint.y;
      //     var eY = item.endPoint.y;
      //     if (eX < sX) { // 交换位置
      //       eX = eX + sX;
      //       sX = eX - sX;
      //       eX = eX - sX;
      //     }
      //     if (eY < sY) { // 交换位置
      //       eY = eY + sY;
      //       sY = eY - sY;
      //       eY = eY - sY;
      //     }
      //     eY += this.thin;
      //     eX += this.thin;
      //     sY -= this.thin;
      //     sX -= this.thin;
      //     if (sX <= startX && eX >= startX && sY <= startY && eY >= startY) {
      //       status = true;
      //       break;
      //     }
      //   } else if (item.type === 'inputtext') { // 如果是文字输入
      //     var errorXNum = 5 / this.boardWidth * 10000; //误差值
      //     var errorYNum = 5 / this.boardHeight * 10000; //误差值
      //     var startPointX = item.location.x - errorXNum;
      //     var startPointY = item.location.y - errorYNum;
      //     var endPointX = item.location.x + item.textWidth /*(item.textWidth / this.boardWidth * 10000)*/ + errorXNum;
      //     var endPointY = item.location.y + item.textHeight /*(item.textHeight / this.boardHeight * 10000)*/ + errorYNum;
      //     if (startX >= startPointX && startX <= endPointX && startY >= startPointY && startY <= endPointY) {
      //       status = true;
      //       break;
      //     }
      //   }
      // }


      if (!status) {
        // 失败，还原会原来的type
        // this.setType(this.beforeMoveType);
        _this17.cancelSelect();

        return false;
      }

      return true;
    },
    start: function start(startX, startY) {
      // 这里得先记录下起始坐标
      var origin = [];

      _this17.selectedList.forEach(function (item) {
        if (item.type == 'line') {
          origin.push({
            uid: item.user,
            seq: item.seq,
            x: item.lines[0].x,
            y: item.lines[0].y
          });
        } else if (item.type == 'graph') {
          origin.push({
            uid: item.user,
            seq: item.startPoint.seq,
            x: item.startPoint.x,
            y: item.startPoint.y
          });
        } else if (item.type == 'inputtext') {
          origin.push({
            uid: item.user,
            seq: item.belongSeq,
            x: item.location.x,
            y: item.location.y
          });
        }
      });

      _this17.opData[_this17.currentBoard].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](_this17.identifier, {
        seq: {
          origin: origin,
          final: []
        },
        type: 'move'
      }));
    },

    /**
     * 框选后移动
     * @param {*} currentX
     * @param {*} currentY
     * @param {*} oldX
     * @param {*} oldY
     */
    draw: function draw(currentX, currentY, oldX, oldY) {
      if (_this17.selectedList.length > 0) {
        for (var i = 0; i < _this17.selectedList.length; i++) {
          var item = _this17.selectedList[i];
          var movex = currentX - oldX;
          var movey = currentY - oldY;

          if (item.type == 'line') {
            item.border.maxX += movex;
            item.border.minX += movex;
            item.border.maxY += movey;
            item.border.minY += movey;
            item.lines.forEach(function (line) {
              line.x += movex;
              line.y += movey;
            });
          } else if (item.type == 'graph') {
            item.startPoint.x += movex;
            item.startPoint.y += movey;
            item.endPoint.x += movex;
            item.endPoint.y += movey;
          } else if (item.type === 'inputtext') {
            item.location.x += movex;
            item.location.y += movey;
          }
        }

        _this17.selectArea.x += movex;
        _this17.selectArea.y += movey;

        _this17.setNeedDraw(true);
      }
    },
    end: function end() {
      _this17.setNeedDraw(true);

      var moves = [];

      if (_this17.selectedList.length == 0) {
        return;
      }

      _this17.selectedList.forEach(function (item) {
        if (item.type == 'line') {
          moves.push({
            seq: item.seq,
            x: item.lines[0].x,
            y: item.lines[0].y,
            uid: item.user
          });
        } else if (item.type == 'graph') {
          moves.push({
            seq: item.startPoint.seq,
            x: item.startPoint.x,
            y: item.startPoint.y,
            uid: item.user
          });
        } else if (item.type === 'inputtext') {
          moves.push({
            seq: item.belongSeq,
            x: item.location.x,
            y: item.location.y,
            uid: item.user
          });
        }
      });

      var actionData = {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.MOVE_LINE_GRAPH_ACTION,
        "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        "moves": moves,
        "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp()
      };

      _this17.addRealtimeData(actionData); // 修改操作


      var final = [];

      _this17.selectedList.forEach(function (item) {
        if (item.type == 'line') {
          final.push({
            uid: item.user,
            seq: item.seq,
            x: item.lines[0].x,
            y: item.lines[0].y
          });
        } else if (item.type == 'graph') {
          final.push({
            uid: item.user,
            seq: item.startPoint.seq,
            x: item.startPoint.x,
            y: item.startPoint.y
          });
        } else if (item.type === 'inputtext') {
          final.push({
            uid: item.user,
            seq: item.belongSeq,
            x: item.location.x,
            y: item.location.y
          });
        }
      });

      var op = _this17.opData[_this17.currentBoard][_this17.opData[_this17.currentBoard].length - 1];
      op.seq.final = final;
      _this17.opIndex[_this17.currentBoard]++; // 上报数据

      var reportData = [];
      moves.forEach(function (move) {
        var user = move.uid;

        for (var i = 0; i < _this17.userData[_this17.currentBoard][user].length; i++) {
          var item = _this17.userData[_this17.currentBoard][user][i];

          if (item.type == 'line' && move.seq == item.seq) {
            // 添加点的信息
            var pointList = [];
            item.lines.forEach(function (line) {
              pointList.push({
                seq: line.seq,
                x: line.x,
                y: line.y
              });
            });
            reportData.push({
              type: 'addLine',
              seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
              content: {
                boardId: _this17.currentBoard,
                uid: item.user,
                colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
                scale: 100,
                width: item.thin,
                time: item.time,
                updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
                seq: item.seq,
                hidden: 0,
                points: pointList
              }
            });
          } else if (item.type == 'graph' && move.seq == item.startPoint.seq) {
            var reportMap = {
              'line': 'addPatternLine',
              'oval': 'addPatternCircle',
              'circle': 'addPatternCircle',
              'rect': 'addPatternRectangle'
            };
            var reportMsg = {
              type: reportMap[item.graph],
              seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
              content: {
                boardId: _this17.currentBoard,
                uid: item.user,
                colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
                scale: 100,
                width: item.thin,
                time: item.time,
                updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
                hidden: 0,
                beginPoint: {
                  x: item.startPoint.x,
                  y: item.startPoint.y,
                  seq: item.startPoint.seq
                },
                endPoint: {
                  x: item.endPoint.x,
                  y: item.endPoint.y,
                  seq: item.endPoint.seq
                }
              }
            };

            if (item.graph == 'oval' || item.graph == 'circle') {
              reportMsg.content.fillRect = item.solid ? 1 : 0;
            } else if (item.graph == 'rect') {
              reportMsg.content.fillRect = item.solid ? 1 : 0;
              reportMsg.content.cornerRadius = 0;
            }

            reportData.push(reportMsg);
          } else if (item.type === 'inputtext' && move.seq == item.belongSeq) {
            reportData.push({
              type: 'addText',
              seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
              content: {
                belongSeq: item.belongSeq,
                // 该文字序列的seq，用来唯一标识一个文字序列
                time: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
                // 添加图形时的时间
                boardId: _this17.currentBoard,
                // 白板id
                uid: item.user,
                // 画线条的用户id
                x: item.location.x,
                // uint32 起点x相对白板宽度比例*10000
                y: item.location.y,
                // uint32 起点y相对白板高度比例*10000
                colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
                // 文字颜色color值
                scale: item.scale,
                // scale值
                updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
                // 后台的线条数据可以覆盖，通过updateTime来判断是否更新（IM后台时间戳/秒）
                hidden: 0,
                // 文字是否为隐藏的（橡皮擦、撤回操作可导致）
                typeface: item.typeFace,
                // 暂时不填，字体类型，sans-serif，serif和monospace
                textSize: item.textSize,
                // uint32 字体大小除以画板高度*10000
                fontStyle: item.fontStyle,
                // 文字样式，默认填0，  0：常规；1：粗体；2.斜体；3.粗斜体；
                text: encodeURI(escape(item.text)),
                //文本内容
                text_wh: "".concat(item.textWidth, ",").concat(item.textHeight) // 文本宽高

              }
            });
          }
        }
      });

      _this17.report.reportGraphData(reportData);
    }
  };
};
/**
 * 采集图形的数据（直线，矩形，圆）
 */


Store.prototype.collectGraphData = function () {
  var _this18 = this;

  return {
    start: function start(startX, startY) {
      var type = _this18.type.split('-')[1];

      var graph = new _Graph__WEBPACK_IMPORTED_MODULE_29__["default"](_this18.identifier, {
        graph: type,
        color: _this18.color,
        thin: _this18.thin,
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        beginPoint: {
          x: startX,
          y: startY,
          seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq()
        },
        endPoint: {
          x: startX,
          y: startY,
          seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq()
        },
        show: true,
        solid: _this18.type.indexOf('solid') > -1 // 是否实心

      });

      if (graph.graph == 'line') {
        graph.style = Object.assign({}, _this18.lineStyle);
      }

      if ((graph.graph == 'circle' || graph.graph == 'oval') && _this18.ovalDrawMode == _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_44__["default"].TEDU_BOARD_OVAL_DRAW_MODE_FIX_CENTER) {
        _this18.ovalCenterPoint = Object.assign({}, graph.startPoint);
      }

      _this18.seq = graph.seq;

      _this18.userData[_this18.currentBoard][_this18.identifier].push(graph);

      _this18.data[_this18.currentBoard].push(graph);

      _this18.opData[_this18.currentBoard].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](_this18.identifier, {
        seq: graph.startPoint.seq,
        type: 'graph'
      }));

      _this18.opIndex[_this18.currentBoard]++;
    },
    draw: function draw(currentX, currentY) {
      var length = _this18.userData[_this18.currentBoard][_this18.identifier].length;
      var graph = _this18.userData[_this18.currentBoard][_this18.identifier][length - 1];
      graph.endPoint.x = currentX;
      graph.endPoint.y = currentY;

      if ((graph.graph == 'circle' || graph.graph == 'oval') && _this18.ovalDrawMode == _model_TEduBoardOvalDrawMode__WEBPACK_IMPORTED_MODULE_44__["default"].TEDU_BOARD_OVAL_DRAW_MODE_FIX_CENTER) {
        graph.startPoint.x = _this18.ovalCenterPoint.x * 2 - currentX;
        graph.startPoint.y = _this18.ovalCenterPoint.y * 2 - currentY;
      }

      if (graph.graph == 'circle') {
        _this18.circleFix(graph);
      }

      _this18.setNeedDraw(true);
    },
    end: function end(endX, endY) {
      var length = _this18.userData[_this18.currentBoard][_this18.identifier].length;
      var graph = _this18.userData[_this18.currentBoard][_this18.identifier][length - 1];
      graph.endPoint.x = endX;
      graph.endPoint.y = endY;
      if (graph.graph == 'circle') _this18.circleFix(graph);

      if (graph.graph != 'line') {
        _this18.graphFix(graph);
      }

      _this18.setNeedDraw(true);

      var realTimeData = {
        seq: graph.seq,
        time: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        color: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(_this18.color),
        scale: 100,
        thin: _this18.thin,
        beginPoint: {
          x: graph.startPoint.x,
          y: graph.startPoint.y,
          seq: graph.startPoint.seq
        },
        endPoint: {
          x: graph.endPoint.x,
          y: graph.endPoint.y,
          seq: graph.endPoint.seq
        }
      };
      var sendMap = {
        'line': 10,
        'oval': 11,
        'circle': 11,
        'rect': 12
      };
      realTimeData.action = sendMap[graph.graph];
      var reportMap = {
        'line': 'addPatternLine',
        'oval': 'addPatternCircle',
        'circle': 'addPatternCircle',
        'rect': 'addPatternRectangle'
      };
      var reportMsg = {
        type: reportMap[graph.graph],
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        content: {
          boardId: _this18.currentBoard,
          uid: graph.user,
          colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(_this18.color),
          scale: 100,
          width: _this18.thin,
          time: graph.time,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          hidden: 0,
          beginPoint: {
            x: graph.startPoint.x,
            y: graph.startPoint.y,
            seq: graph.startPoint.seq
          },
          endPoint: {
            x: graph.endPoint.x,
            y: graph.endPoint.y,
            seq: graph.endPoint.seq
          }
        }
      };
      var solid = _this18.type.indexOf('solid') > -1 ? 1 : 0;

      if (realTimeData.action == 10) {
        //直线
        realTimeData.style = Object.assign({}, _this18.lineStyle);
        reportMsg.content.style = Object.assign({}, _this18.lineStyle);
      }

      if (realTimeData.action == 11) {
        //圆形
        realTimeData.fillRect = solid;
        reportMsg.content.fillRect = solid;
      }

      if (realTimeData.action == 12) {
        //矩形
        realTimeData.fillRect = solid;
        reportMsg.content.fillRect = solid;
        realTimeData.cornerRadius = 0;
        reportMsg.content.cornerRadius = 0;
      }

      _this18.addRealtimeData(realTimeData); // 上报数据


      _this18.report.reportGraphData([reportMsg]);
    },
    over: function over(endX, endY) {
      this.end(endX, endY);
    }
  };
};
/**
 * 采集拖拽移动
 */


Store.prototype.collectDragData = function () {
  var _this19 = this;

  return {
    start: function start(e) {
      var boardBox = e.currentTarget.getElementsByClassName('tx_board_canvas_box')[0];
      var transformValue = getComputedStyle(boardBox).getPropertyValue('transform') || ''; // var matrixs = transformValue.split(',');

      var left = boardBox.style.left;
      var top = boardBox.style.top; // this.opData[this.currentBoard].push(new Operation(this.identifier, {
      //   seq: {
      //     origin: {
      //       left,
      //       top
      //     },
      //     final: []
      //   },
      //   type: 'drag'
      // }));
    },
    draw: function draw(e, currentX, currentY, oldX, oldY) {
      var boardBox = e.currentTarget.getElementsByClassName('tx_board_canvas_box')[0];
      var moveX = currentX - oldX; // 移动的X距离

      var moveY = currentY - oldY; // 移动的Y距离

      var scaleX = moveX / _this19.boardWidth * 100;
      var scaleY = moveY / _this19.boardHeight * 100;
      var maxLeft, minLeft, maxTop, minTop; // 定义可移动范围
      // 说明是白板是以水平方向为拖动

      if (_this19.boardWidth / _this19.boardHeight > _this19.containerWidth / _this19.containerHeight) {
        if (_this19.boardHeight > _this19.containerHeight) {
          maxTop = 50 + (_this19.boardHeight - _this19.containerHeight) / 2 / _this19.boardHeight * 100;
          minTop = 50 - (_this19.boardHeight - _this19.containerHeight) / 2 / _this19.boardHeight * 100;
        } else {
          maxTop = 50;
          minTop = 50;
        }

        maxLeft = 50 + (_this19.boardWidth - _this19.containerWidth) / 2 / _this19.boardWidth * 100;
        minLeft = 50 - (_this19.boardWidth - _this19.containerWidth) / 2 / _this19.boardWidth * 100;
      } else {
        maxTop = 50 + (_this19.boardHeight - _this19.containerHeight) / 2 / _this19.boardHeight * 100;
        minTop = 50 - (_this19.boardHeight - _this19.containerHeight) / 2 / _this19.boardHeight * 100;

        if (_this19.boardWidth > _this19.containerWidth) {
          maxLeft = 50 + (_this19.boardWidth - _this19.containerWidth) / 2 / _this19.boardWidth * 100;
          minLeft = 50 - (_this19.boardWidth - _this19.containerWidth) / 2 / _this19.boardWidth * 100;
        } else {
          maxLeft = 50;
          minLeft = 50;
        }
      }

      var left = boardBox.style.left.replace('%', '') * 1 + scaleX;
      left = Math.min(maxLeft, Math.max(minLeft, left));
      boardBox.style.left = left + '%';
      var top = boardBox.style.top.replace('%', '') * 1 + scaleY;
      top = Math.min(maxTop, Math.max(minTop, top));
      boardBox.style.top = top + '%'; // 以上设置left / top 会导致webkittransform失效

      var style = boardBox.getAttribute('style');

      if (style.indexOf('-webkit-transform') === -1) {
        style += '-webkit-transform: translateX(-50%) translateY(-50%);';
      }

      boardBox.setAttribute('style', style);

      if (_this19.dragDataList.getDragData(_this19.currentBoard)) {
        _this19.dragDataList.updateDragData(_this19.currentBoard, {
          xOffset: left,
          yOffset: top
        });
      } else {
        _this19.dragDataList.addDragData(_this19.currentBoard, new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"]({
          scale: _this19.getBoardScale(),
          // 缩放比
          xOffset: left,
          yOffset: top
        }));
      }

      _this19.addRealtimeData(_this19.dragDataList.getDragData(_this19.currentBoard).getRealTimeData());
    },

    /**
     * 缩放操作绘制
     * beforePinchScale 捏合前的比例
     * pinchScale 捏合产生的缩放比集合
     */
    scaleDraw: function scaleDraw(beforePinchScale, pinchScale) {
      if (pinchScale.length) {
        // 说明是捏合
        var dragData = _this19.dragDataList.getDragData(_this19.currentBoard);

        if (!dragData) {
          dragData = new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"]({
            scale: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].SCALE,
            // 缩放比
            xOffset: 50,
            yOffset: 50
          });

          _this19.dragDataList.addDragData(_this19.currentBoard, dragData);
        }

        var scale;
        scale = parseInt(beforePinchScale * pinchScale[pinchScale.length - 1]);
        scale = Math.max(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MIN_SCALE, Math.min(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MAX_SCALE, scale));
        dragData.scale = scale;

        _this19.setNeedDraw(true);
      }
    },
    end: function end() {
      // 结束后就上报
      _this19.report.reportDrag(Object.assign(_this19.dragDataList.getDragData(_this19.currentBoard).getReportData(), {
        boardId: _this19.currentBoard
      }));
    },
    // 如果是移动端
    touchEnd: function touchEnd(pinchScale) {
      if (pinchScale.length) {
        // 说明是捏合
        var dragData = _this19.dragDataList.getDragData(_this19.currentBoard);

        _this19.setBoardScale(dragData.scale);
      } else {
        _this19.report.reportDrag(Object.assign(_this19.dragDataList.getDragData(_this19.currentBoard).getReportData(), {
          boardId: _this19.currentBoard
        }));
      }
    },
    over: function over() {
      // 结束后就上报
      _this19.report.reportDrag(Object.assign(_this19.dragDataList.getDragData(_this19.currentBoard).getReportData(), {
        boardId: _this19.currentBoard
      }));
    }
  };
};
/**
 * 取消选择
 */


Store.prototype.cancelSelect = function () {
  var selectLength = this.selectedList.length;

  for (var i = 0; i < selectLength; i++) {
    var item = this.selectedList[i];
    item.select = false;
  }

  this.selectedList = [];
  this.selectArea = {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  };

  if (selectLength) {
    // 如果有选框才重绘
    this.setNeedDraw(true);
  }
};
/**
 * 删除选中元素
 */


Store.prototype.deleteSelectedData = function () {
  this.aegis.report('deleteSelectedData');
  var data = []; // 获取已选元素列表

  this.selectedList.forEach(function (item) {
    if (item.type === 'line') {
      data.push({
        uid: item.user,
        seq: item.seq
      });
    } else if (item.type === 'graph') {
      data.push({
        uid: item.user,
        seq: item.startPoint.seq
      });
    } else if (item.type === 'inputtext') {
      data.push({
        uid: item.user,
        seq: item.belongSeq
      });
    }

    item.show = false;
  }); // 更新操作列表

  this.opData[this.currentBoard].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](this.identifier, {
    seq: data,
    type: 'delete'
  }));
  this.opIndex[this.currentBoard]++; // 构建实时动作数据

  var actionData = {
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
    // 删除选中内容
    "display": 0,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "x": 0,
    "y": 0,
    lines: data
  }; // 更新白板数据

  if (data.length) {
    // 提交实时数据
    this.addRealtimeData(actionData); // 提交当前白板内容

    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 0,
      lines: data
    });
  } // 取消选择


  this.cancelSelect();
};
/**
 * 删除白板元素
 */


Store.prototype.deleteBoardData = function () {
  var _this20 = this;

  this.aegis.report('deleteBoardData');
  var data = []; // 获取白板元素列表

  this.data[this.currentBoard].forEach(function (item) {
    if (_this20.accessibleUsers && _this20.accessibleUsers.length > 0) {
      if (!_this20.accessibleUsers.includes(item.user)) {
        return;
      }
    }

    if (item.type === 'line') {
      data.push({
        uid: item.user,
        seq: item.seq
      });
    } else if (item.type === 'graph') {
      data.push({
        uid: item.user,
        seq: item.startPoint.seq
      });
    } else if (item.type === 'inputtext') {
      data.push({
        uid: item.user,
        seq: item.belongSeq
      });
    }

    item.show = false;
  }); // 更新操作列表
  // this.opData[this.currentBoard].push(new Operation(this.identifier, {
  //   seq: data,
  //   type: 'delete'
  // }));
  // this.opIndex[this.currentBoard]++;
  // 构建实时动作数据

  var actionData = {
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
    // 删除选中内容
    "display": 0,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "x": 0,
    "y": 0,
    lines: data
  }; // 更新白板数据

  if (data.length) {
    // 提交实时数据
    this.addRealtimeData(actionData); // 提交当前白板内容

    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 0,
      lines: data
    });
  }
};
/**
 * 橡皮擦碰撞检测
 * @param {*} x
 * @param {*} y
 * @param {*} radius
 */


Store.prototype.eraserImpactCheck = function (x, y, radius) {
  var _this21 = this;

  // 遍历data
  var eraserRealTimeData = [];
  var currentData = this.data[this.currentBoard];

  if (currentData) {
    currentData.forEach(function (item) {
      if (_this21.accessibleUsers && _this21.accessibleUsers.length > 0) {
        if (!_this21.accessibleUsers.includes(item.user)) {
          return;
        }
      }

      var halfThin = item.thin / 2;

      if (item.type == 'line' && item.show) {
        // 随便的画线
        // 先检测是否在矩形区域内
        var maxX = item.border.maxX + halfThin;
        var maxY = item.border.maxY + halfThin;
        var minX = item.border.minX - halfThin;
        var minY = item.border.minY - halfThin;
        var distance = 0;

        if (x + radius < minX || x - radius > maxX || y + radius < minY || y - radius > maxY) {
          // 在涂鸦矩形区域外，肯定不会碰撞，退出
          return;
        }

        var isRelative = false;

        if (item.lines.length === 1) {
          var p = item.lines[0];

          var _distance = _this21.getDistance(x, y, p.x, p.y, p.x, p.y);

          if (_distance <= (radius + halfThin) * (radius + halfThin)) {
            isRelative = true;
          }
        } else {
          //逐段计算碰撞
          for (var i = 1; i < item.lines.length; i++) {
            var p0 = item.lines[i - 1];
            var p1 = item.lines[i];

            var _distance2 = _this21.getDistance(x, y, p0.x, p0.y, p1.x, p1.y);

            if (_distance2 <= (radius + halfThin) * (radius + halfThin)) {
              isRelative = true;
              break;
            }
          }
        }

        if (isRelative) {
          item.show = false;
          eraserRealTimeData.push({
            uid: item.user,
            seq: item.seq
          });
        }
      } else if (item.type == 'graph' && item.show) {
        if (item.graph == 'line') {
          // 擦除直线
          distance = _this21.getDistance(x, y, item.startPoint.x, item.startPoint.y, item.endPoint.x, item.endPoint.y);

          if (distance <= (radius + halfThin) * (radius + halfThin)) {
            item.show = false;
            eraserRealTimeData.push({
              uid: item.user,
              seq: item.startPoint.seq
            });
          }
        } else if (item.graph == 'rect') {
          // 擦掉矩形
          if (item.solid) {
            // 实心  只需判断是否在内部
            if (x > item.startPoint.x && y > item.startPoint.y && x < item.endPoint.x && y < item.endPoint.y) {
              item.show = false;
              eraserRealTimeData.push({
                uid: item.user,
                seq: item.startPoint.seq
              });
            }
          } else {
            // 点击的位置在四条边附近  简化为 点到四条线段的距离
            var distance1 = _this21.getDistance(x, y, item.startPoint.x, item.startPoint.y, item.startPoint.x, item.endPoint.y);

            var distance2 = _this21.getDistance(x, y, item.startPoint.x, item.startPoint.y, item.endPoint.x, item.startPoint.y);

            var distance3 = _this21.getDistance(x, y, item.endPoint.x, item.endPoint.y, item.startPoint.x, item.endPoint.y);

            var distance4 = _this21.getDistance(x, y, item.endPoint.x, item.endPoint.y, item.endPoint.x, item.startPoint.y);

            if (Math.min(distance1, distance2, distance3, distance4) <= (radius + halfThin) * (radius + halfThin)) {
              item.show = false;
              eraserRealTimeData.push({
                uid: item.user,
                seq: item.startPoint.seq
              });
            }
          }
        } else if (item.graph == 'circle') {
          var centerX = (item.startPoint.x + item.endPoint.x) / 2;
          var centerY = (item.startPoint.y + item.endPoint.y) / 2;
          var circleRadius = Math.sqrt(Math.pow(item.startPoint.x - item.endPoint.x, 2) + Math.pow(item.startPoint.y - item.endPoint.y, 2)) / 2;
          distance = Math.sqrt(Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2));

          if (item.solid) {
            // 实心  只需判断是否在内部
            if (distance < circleRadius + radius) {
              item.show = false;
              eraserRealTimeData.push({
                uid: item.user,
                seq: item.startPoint.seq
              });
            }
          } else {
            // 空心 判断距离圆心的距离
            if (Math.abs(circleRadius - distance) <= radius + halfThin) {
              item.show = false;
              eraserRealTimeData.push({
                uid: item.user,
                seq: item.startPoint.seq
              });
            }
          }
        } else if (item.graph == 'oval') {
          var errValue = 0.2; // 误差值

          var _centerX = (item.startPoint.x + item.endPoint.x) / 2;

          var _centerY = (item.startPoint.y + item.endPoint.y) / 2;

          var a = Math.abs(item.startPoint.x - item.endPoint.x) / 2;
          var b = Math.abs(item.startPoint.y - item.endPoint.y) / 2;

          if (a === b && a === 0) {
            return;
          } // 正常的逻辑应该是以下面的算法为标准， 这里猜测绘制椭圆的时候是将焦点固定在了x轴上了  所以直接默认用了焦点在x轴上的算法


          var value1 = Math.pow(x - _centerX, 2) / Math.pow(a, 2) + Math.pow(y - _centerY, 2) / Math.pow(b, 2);
          var value2 = Math.pow(x - _centerX + halfThin, 2) / Math.pow(a, 2) + Math.pow(y - _centerY + halfThin, 2) / Math.pow(b, 2);
          var value3 = Math.pow(x - _centerX + halfThin, 2) / Math.pow(a, 2) + Math.pow(y - _centerY - halfThin, 2) / Math.pow(b, 2);
          var value4 = Math.pow(x - _centerX - halfThin, 2) / Math.pow(a, 2) + Math.pow(y - _centerY + halfThin, 2) / Math.pow(b, 2);
          var value5 = Math.pow(x - _centerX - halfThin, 2) / Math.pow(a, 2) + Math.pow(y - _centerY - halfThin, 2) / Math.pow(b, 2);

          if (item.solid) {
            // 如果是实心
            if (value1 <= 1 + errValue || value2 <= 1 + errValue || value3 <= 1 + errValue || value4 <= 1 + errValue || value5 <= 1 + errValue) {
              // 说明是在范围内
              item.show = false;
              eraserRealTimeData.push({
                uid: item.user,
                seq: item.startPoint.seq
              });
            }
          } else {
            // 如果是空心
            if (value1 <= 1 + errValue && value1 >= 1 - errValue || value2 <= 1 + errValue && value2 >= 1 - errValue || value3 <= 1 + errValue && value3 >= 1 - errValue || value4 <= 1 + errValue && value4 >= 1 - errValue || value5 <= 1 + errValue && value5 >= 1 - errValue) {
              item.show = false;
              eraserRealTimeData.push({
                uid: item.user,
                seq: item.startPoint.seq
              });
            }
          }
        }
      } else if (item.type == 'inputtext' && item.show) {
        var errorXNum = 0; //误差值

        var errorYNum = 0; //误差值

        var startPointX = item.location.x - errorXNum;
        var startPointY = item.location.y - errorYNum;
        var endPointX = item.location.x + item.textWidth
        /*(item.textWidth / this.boardWidth * 10000)*/
        + errorXNum;
        var endPointY = item.location.y + item.textHeight
        /*(item.textHeight / this.boardHeight * 10000)*/
        + errorYNum;

        if (x > startPointX && y > startPointY && x < endPointX && y < endPointY) {
          item.show = false;
          eraserRealTimeData.push({
            uid: item.user,
            seq: item.belongSeq
          });
        }
      } else if ((item.type == 'element' || item.type == 'imageElement') && item.show) {
        if (x > item.rectArea.minX && y > item.rectArea.minY && x < item.rectArea.maxX && y < item.rectArea.maxY) {
          item.show = false;
          eraserRealTimeData.push({
            uid: item.user,
            seq: item.belongSeq
          });
        }
      }
    });
  }

  return eraserRealTimeData;
}; // 点到线段的距离


Store.prototype.getDistance = function (x, y, x1, y1, x2, y2) {
  var A = x - x1;
  var B = y - y1;
  var C = x2 - x1;
  var D = y2 - y1;
  var dot = A * C + B * D;
  var len_sq = C * C + D * D;
  var param = -1;
  if (len_sq != 0) //in case of 0 length line
    param = dot / len_sq;
  var xx, yy;

  if (param < 0) {
    xx = x1;
    yy = y1;
  } else if (param > 1) {
    xx = x2;
    yy = y2;
  } else {
    xx = x1 + param * C;
    yy = y1 + param * D;
  }

  var dx = x - xx;
  var dy = y - yy;
  return dx * dx + dy * dy;
}; // 圆的话  需要修正endPoint


Store.prototype.circleFix = function (circle) {
  // 计算占比
  var width = Math.abs(circle.startPoint.x - circle.endPoint.x) * this.boardWidth / 10000;
  var height = Math.abs(circle.startPoint.y - circle.endPoint.y) * this.boardHeight / 10000;

  if (width > height) {
    // 比较宽的矩形  需要终点修改 x 值
    circle.endPoint.x = circle.startPoint.x < circle.endPoint.x ? circle.startPoint.x + height * 10000 / this.boardWidth : circle.startPoint.x - height * 10000 / this.boardWidth;
    circle.endPoint.x = parseInt(circle.endPoint.x);
  } else {
    // 比较高的矩形 需要终点修改 y 值
    circle.endPoint.y = circle.startPoint.y < circle.endPoint.y ? circle.startPoint.y + width * 10000 / this.boardHeight : circle.startPoint.y - width * 10000 / this.boardHeight;
    circle.endPoint.y = parseInt(circle.endPoint.y);
  }
}; // 将graph的顶点统一改为左上角开始和右下角结束


Store.prototype.graphFix = function (graph) {
  var startx = graph.startPoint.x;
  var starty = graph.startPoint.y;
  var endx = graph.endPoint.x;
  var endy = graph.endPoint.y;
  graph.startPoint = {
    x: startx > endx ? endx : startx,
    y: starty > endy ? endy : starty,
    seq: graph.startPoint.seq
  };
  graph.endPoint = {
    x: startx > endx ? startx : endx,
    y: starty > endy ? starty : endy,
    seq: graph.endPoint.seq
  };
};
/**
 * @method sendRequest
 * @param boardId {String} 指定发送的白板ID
 * @param realTimeData {Array} 要发送的实时数据
 * @description 发送实时信令数据，当有传递realTimeData表示需要单独发送realTimeData 否则从this.realTimeData中获取
 */


Store.prototype.sendRequest = function (boardId, realTimeData) {
  // 检查是否禁用了数据同步, 把数据清空
  // 挪到添加数据时候判断
  // if (!this.dataSyncEnable) {
  //   this.realTimeData = [];
  //   return;
  // }
  // 如果不在白名单
  if (!this.permissions) {
    return;
  }

  var tempData = JSON.parse(JSON.stringify(realTimeData || this.realTimeData)); // 老师在文字输入过程中，可能会出现学生发出情况白板的信令, 该逻辑有问题，先注释
  // tempData.forEach((item, index) => {
  //   let textareaEl = document.getElementById(`tic-textarea__${item.belongSeq}`);
  //   if (!textareaEl) {
  //     tempData.splice(index, 1);
  //   }
  // });

  boardId = boardId || this.currentBoard; // action协议增加boardId字段

  tempData.forEach(function (item, index) {
    item.boardId = boardId;
  });
  var realTimeJsonData = {
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    timestamp: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    value: {
      boardId: boardId,
      operator: this.identifier,
      actions: tempData
    }
  };

  if (!realTimeData) {
    // 如果没有传递realTimeData,则发送this.realTimeData 此时需要将this.realTimeData清空
    this.realTimeData = [];
  }

  if (tempData.length) {
    // 如果有数据
    this.fireSyncDataEvent(boardId, realTimeJsonData);
  }
};
/**
 * 触发同步数据事件
 */


Store.prototype.fireSyncDataEvent = function (boardId, realTimeJsonData) {
  var _this22 = this;

  // 消息长度 大于了实时消息最大长度，则发文件消息
  var realTimeStringData = JSON.stringify(realTimeJsonData);

  if (realTimeStringData.length > _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].REALTIMEDATA_MAX_LENGTH) {
    this.uploadBoardMessageToCos(realTimeStringData).then(function (url) {
      var fileMessage = {
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
        timestamp: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
        value: {
          boardId: boardId,
          operator: _this22.identifier,
          actions: [{
            "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.FILE_MESSAGE_ACTION,
            "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            "url": url,
            // 文件url
            "boardId": boardId
          }]
        }
      };

      _this22.addSendAckData(JSON.stringify(fileMessage), false);

      _this22.event.fire(_this22, 'TEB_SYNCDATA', fileMessage);
    });
  } else {
    this.addSendAckData(realTimeStringData, false);
    this.event.fire(this, 'TEB_SYNCDATA', realTimeJsonData);
  }
};

Store.prototype.addHistory = function (data, isRenderFace) {
  var _this23 = this;

  this.aegis.report('addHistory', {
    isRenderFace: isRenderFace
  });
  var self = this; // 排序

  this.sortBoard();
  data.forEach(function (action) {
    var boardId, user;
    _this23.seqFilter[action.seq + ""] = true;

    try {
      action.content = JSON.parse(action.content);
    } catch (error) {}

    if (action.type === 'setGlobalBG') {// 如果是设置全局背景，则跳过
    } else if (action.type === 'createBoards') {
      // 如果有创建createBoard
      action.content && action.content.createBoards.forEach(function (item) {
        boardId = item; // 这里协议少了uid
        // user = item.uid;

        if (boardId && !self.userData[boardId]) {
          self.addBoard(boardId, false);
        }
      });
    } else if (action.type === 'addFile') {
      var fid = action.content.fid;
      var title = action.content.title;
      var downloadURL = action.content.downloadURL;
      var pageCount = action.content.pageCount;
      var currentPageIndex = action.content.currentPageIndex;
      var currentPageStep = action.content.currentPageStep || 0;
      var timestamp = action.content.timestamp;
      var updateTime = action.content.updateTime;
      var uid = action.content.uid;
      var platform = action.content.platform;
      var type = action.content.type;
      var ratio = action.content.ratio;
      var scale = action.content.scale;
      var status = action.content.status;
      var progress = action.content.progress;
      var isTranscodeFile = !!action.content.isTranscodeFile; // if (type == Config.FILE_TYPE.VOD || type == Config.FILE_TYPE.VODFILE) {
      //   if (status == 1) {
      //历史状态为播放状态，修正播放进度
      // progress = (util.getTimeStamp() - updateTime) / 1000 + progress;
      //   }
      // }

      var isExist = false; // 是否已经存在

      for (var i = 0, len = self.groups.length; i < len; i++) {
        var group = self.groups[i];

        if (group.fid == fid) {
          group.title = title;
          group.downloadURL = downloadURL;
          group.pageCount = pageCount;
          group.currentPageIndex = currentPageIndex;
          group.currentPageStep = currentPageStep;
          group.timestamp = timestamp;
          group.uid = uid;
          group.type = type;
          group.ratio = ratio;
          group.scale = scale;
          group.isTranscodeFile = isTranscodeFile;
          group.status = status;
          group.progress = progress;
          isExist = true;
          break;
        }
      }

      if (!isExist) {
        // 如果不存在
        self.addGroupNotReport(fid, title, uid, downloadURL, pageCount, currentPageIndex, timestamp, platform, type, currentPageStep, ratio, scale, isTranscodeFile, status, progress);
      } else if (isExist && fid === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
        // 如果此时存在了，且是默认分组，则为更新信息
        self.event.fire(_this23, 'TEB_ADDFILE', fid);
      } // 如果是旧协议


      if (!timestamp && !uid) {
        return;
      }

      if (fid != _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
        var createBoards = [];
        var boards = self.createBoardIdForFile(fid, uid, timestamp, pageCount, platform, type);
        var previewUrls = [];
        var basePreview = '';

        if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
          basePreview = downloadURL ? _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].fileDownLoadUrlToPreviewUrl(downloadURL) : '';
        } // 2019年02月26日 addFile协议需要自行拼接boardid和背景


        for (var _i2 = 0; _i2 < pageCount; _i2++) {
          boardId = boards[_i2];

          if (basePreview && type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
            // paas后台转码
            if (basePreview.endsWith('/')) {
              previewUrls.push("".concat(basePreview).concat(_i2 + 1, ".jpg"));
            } else {
              // cos转码
              previewUrls.push(basePreview + (_i2 + 1));
            }
          }

          if (boardId && !self.userData[boardId]) {
            createBoards.push(boardId);
          }
        }

        self.addBoard(createBoards, false);

        if (downloadURL) {
          if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
            self.addBackgroundPic({
              boardIds: boards,
              urls: previewUrls,
              type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
              needReport: false
            });
          } else if (type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMAGESFILE) {
            // 批量图片文件，将downloadURL转换为uncompress格式，然后生成urls
            var t1 = new Date().getTime();
            var decompressed = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].decompress(downloadURL);
            var t2 = new Date().getTime();
            previewUrls = JSON.parse(decompressed);
            self.addBackgroundPic({
              boardIds: boards,
              urls: previewUrls,
              type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
              needReport: false
            });
            var elapse = t2 - t1;
            self.elkLog.report('add_images_file_history', {
              extra_info: JSON.stringify({
                urls: decompressed,
                urls_length: decompressed.length,
                elapse: elapse
              })
            });
          }
        }
      } // 排序文件


      self.sortGroup();
    } else {
      boardId = action.content.boardId;
      user = action.content.uid;

      if (boardId && !self.userData[boardId]) {
        self.addBoard(boardId, false);
      }

      if (boardId && !self.userData[boardId][user]) {
        self.userData[boardId][user] = [];
      }
    }

    action.content.colorRGBA && (action.content.color = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(action.content.colorRGBA));
    action.content.width && (action.content.thin = action.content.width);

    if (action.type == 'addLine') {
      var line;

      for (var _i3 = 0; _i3 < action.content.points.length; _i3++) {
        var x = action.content.points[_i3].x;
        var y = action.content.points[_i3].y;
        var w = action.content.points[_i3].w;
        var seq = action.content.points[_i3].seq;
        var _timestamp = action.content.points[_i3].timestamp;
        var belongSeq = action.content.points[0].seq;

        if (_i3 == 0) {
          line = new _Line__WEBPACK_IMPORTED_MODULE_27__["default"](user, {
            action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_START_ACTION,
            time: action.content.time,
            timestamp: _timestamp,
            color: action.content.color,
            thin: action.content.thin,
            x: x,
            y: y,
            w: w || action.content.thin,
            seq: seq,
            belongSeq: belongSeq,
            writing: action.content.writing,
            show: action.content.hidden ? false : true
          });
        } else {
          line.lines.push({
            action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_MOVE_ACTION,
            x: x,
            y: y,
            w: w || action.content.thin,
            belongSeq: belongSeq,
            seq: seq,
            timestamp: _timestamp
          });

          if (_i3 == action.content.points.length - 1) {
            line.sort();
            line.endSeq = action.content.points[_i3].seq;
            line.lines[_i3].action = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_END_ACTION;
          }
        }

        line.setBorder(x, y);
      }

      if (line) {
        line.drawIndex = line.lines.length;
        var hasLine = false;
        self.userData[boardId][user].forEach(function (item, index) {
          if (item.seq === line.seq) {
            self.userData[boardId][user][index] = line;
            hasLine = true;
          }
        });

        if (!hasLine) {
          self.userData[boardId][user].push(line);
        }

        hasLine = false;
        self.data[boardId].forEach(function (item, index) {
          if (item.seq === line.seq) {
            self.data[boardId][index] = line;
            hasLine = true;
          }
        });

        if (!hasLine) {
          self.data[boardId].push(line);
        }
      }
    } else if (action.type == 'addText') {
      // 历史数据
      var text = new _InputText__WEBPACK_IMPORTED_MODULE_28__["default"](user, {
        belongSeq: action.content.belongSeq,
        x: action.content.x,
        y: action.content.y
      }); // console.log("AddHistory:", action);

      text.seq = action.content.belongSeq; // seq 唯一编号

      text.scale = action.content.scale; // 激光笔的状态  正在用 1 以及 结束了 0

      text.color = action.content.color;
      text.typeFace = action.content.typeface;
      text.textSize = action.content.textSize;
      text.fontStyle = action.content.fontStyle;
      text.time = action.content.time;
      text.show = !action.content.hidden;

      try {
        text.text = unescape(decodeURI(action.content.text));
      } catch (error) {
        text.text = action.content.text;
      } // 字体长宽


      try {
        var width_height = action.content.text_wh.split(",");
        text.textWidth = parseFloat(width_height[0]);
        text.textHeight = parseFloat(width_height[1]);
      } catch (error) {
        text.textWidth = 0;
        text.textHeight = 0;
      }

      var matchUserData = self.userData[boardId][user].filter(function (item) {
        return item.seq === text.seq;
      });

      if (!matchUserData.length) {
        self.userData[boardId][user].push(text);
      }

      var matchData = self.data[boardId].filter(function (item) {
        return item.seq === text.seq;
      });

      if (!matchData.length) {
        self.data[boardId].push(text);
      }
    } else if (action.type == 'displayLine') {
      var lines = action.content.lines;
      lines.forEach(function (line) {
        for (var i = 0; i < self.userData[self.currentBoard][user].length; i++) {
          var item = self.userData[self.currentBoard][user][i];

          if (item.type == 'line' && item.startSeq == line.seq) {
            item.show = !!action.content.display;
          } else if (item.type == 'graph' && item.startPoint.seq == line.seq) {
            item.show = !!action.content.display;
          } else if (item.type == 'inputtext' && item.belongSeq == line.seq) {
            //白板后台历史消息是否撤销
            item.show = !!action.content.display;
          } else if (item.type == 'imageElement' && item.belongSeq == line.seq) {
            item.show = !!action.content.display;
          }
        }
      });
    } else if (action.type == 'addPatternLine' || action.type == 'addPatternCircle' || action.type == 'addPatternRectangle') {
      var list = {
        'addPatternLine': 'line',
        'addPatternCircle': 'oval',
        'addPatternRectangle': 'rect'
      };
      action.content.graph = list[action.type];
      action.content.seq = action.content.beginPoint.seq;
      action.content.show = action.content.hidden ? false : true;
      action.content.solid = action.content.fillRect ? true : false;
      var graph = new _Graph__WEBPACK_IMPORTED_MODULE_29__["default"](user, action.content);

      var _matchUserData = self.userData[boardId][user].filter(function (item) {
        return item.seq === graph.seq;
      });

      if (!_matchUserData.length) {
        self.userData[boardId][user].push(graph);
      }

      var _matchData = self.data[boardId].filter(function (item) {
        return item.seq === graph.seq;
      });

      if (!_matchData.length) {
        self.data[boardId].push(graph);
      }
    } else if (action.type == 'image') {
      if (action.content.url) {
        self.addBackgroundPic({
          boardIds: action.content.boardId,
          urls: action.content.url,
          type: action.content.type,
          needReport: false,
          position: action.content.mode
        });
      } else {
        self.deleteBackgroundPic(action.content.boardId);
      }
    } else if (action.type == 'clean') {
      self.clearBoard(true, false, true);
    } else if (action.type == 'cleanDraws') {
      self.clearBoard(false, false, true);
    } else if (action.type == 'switchBoard') {
      if (!boardId) {
        return;
      } // 如果seq是大于本地maxSeq，则处理，否则不处理


      if ((action.seq * 1 || 0) > self.maxSeq) {
        self.maxSeq = action.seq;

        if (!self.data[boardId]) {
          self.addBoard(boardId, false);
        }

        self.currentBoard = boardId; // 如果白板 = COMMON_DEFAULT_BOARD: '#DEFAULT',

        if (boardId === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD) {
          self.currentGroup = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP;
        } else {
          self.currentGroup = boardId.match(/\d+_#\w+$/)[0].split('_')[1];
        }
      } else {
        self.elkLog.report('throw_seq', {
          extra_info: JSON.stringify({
            seq: action.seq,
            maxSeq: self.maxSeq,
            boardId: boardId,
            method: 'addHistory'
          })
        });
      }
    } else if (action.type == 'setBoardBG') {
      self.setBackgroundColor({
        boardId: boardId,
        color: action.content.colorRGBA
      }, true);
    } else if (action.type == 'setGlobalBG') {
      self.setGlobalBackgroundColor(action.content.colorRGBA, true);
    } else if (action.type == 'drag') {
      // 如果是拖拽
      // 放大，拖拽的数据
      _this23.dragDataList.addDragData(boardId, new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"]({
        scale: action.content.scale,
        // 缩放比
        xOffset: action.content.xOffset,
        yOffset: action.content.yOffset
      }));
    } else if (action.type == 'setRatio') {
      var ratioMap = action.content || {};

      for (var bid in ratioMap) {
        _this23.boardRatio[bid] = ratioMap[bid];
      }
    } else if (action.type == 'imageElement') {
      var imageElement = new _model_TEduBoardImageElement__WEBPACK_IMPORTED_MODULE_45__["default"]({
        user: user,
        url: action.content.url,
        belongSeq: action.content.belongSeq,
        seq: action.content.seq,
        time: action.content.time,
        width: action.content.width,
        height: action.content.height,
        x: action.content.x,
        y: action.content.y,
        boardId: boardId,
        show: !action.content.hidden,
        deg: action.content.deg
      });

      _this23.userData[boardId][user].push(imageElement);

      _this23.data[boardId].push(imageElement);
    } else if (action.type == 'element') {
      if (action.content.subType == _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_49__["default"].TEDU_BOARD_ELEMENT_H5) {
        var element = new _component_TEduBoardH5WebElement__WEBPACK_IMPORTED_MODULE_47__["default"]({
          belongSeq: action.content.belongSeq,
          seq: action.content.seq,
          user: action.content.uid,
          url: action.content.url,
          boardId: action.content.boardId
        });
        element.setProperty({
          show: !action.content.hidden,
          width: action.content.width,
          height: action.content.height,
          x: action.content.x,
          y: action.content.y,
          data: action.content.data
        });

        _this23.elementMap.set(String(element.belongSeq), element);

        _this23.userData[boardId][_this23.identifier].push(element);

        _this23.data[boardId].push(element);
      }
    }
  });

  if (isRenderFace) {
    // self.needFaceDraw = true;
    // self.setNeedDraw(false);
    self.event.fire(self, 'TEB_DRAW_FACE');
  } else {
    self.setNeedDraw(true);
  }
}; // revert操作


Store.prototype.undo = function () {
  var _this24 = this;

  this.cancelSelect();
  var operation = this.opData[this.currentBoard][this.opIndex[this.currentBoard] - 1];

  if (!operation) {
    return;
  }

  if (operation.type == 'line') {
    // 说明是画了一个线  这里要隐藏
    for (var i = 0; i < this.userData[this.currentBoard][operation.user].length; i++) {
      var item = this.userData[this.currentBoard][operation.user][i];

      if (operation.seq == item.seq) {
        item.show = false; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 0,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 0,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  } else if (operation.type == 'eraser') {
    // 说明擦了东西 显示出来就好了
    operation.seq.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this24.userData[_this24.currentBoard][user].length; i++) {
        var item = _this24.userData[_this24.currentBoard][user][i];

        if (item.type == 'line' && seq.seq == item.seq) {
          item.show = true;
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          item.show = true;
        } else if (item.type == 'inputtext' && seq.seq == item.belongSeq) {
          item.show = true;
        } else if (item.type == 'imageElement' && seq.seq == item.belongSeq) {
          item.show = true;
        }
      }
    });
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
      // 擦除
      "display": 1,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "lines": operation.seq
    }); // 上报

    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 1,
      lines: operation.seq
    });
  } else if (operation.type == 'graph') {
    for (var _i4 = 0; _i4 < this.userData[this.currentBoard][operation.user].length; _i4++) {
      var _item = this.userData[this.currentBoard][operation.user][_i4];

      if (_item.type == 'graph' && operation.seq == _item.startPoint.seq) {
        _item.show = false; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 0,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 0,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  } else if (operation.type == 'inputtext') {
    for (var _i5 = 0; _i5 < this.userData[this.currentBoard][operation.user].length; _i5++) {
      var _item2 = this.userData[this.currentBoard][operation.user][_i5];

      if (_item2.type == 'inputtext' && operation.seq == _item2.belongSeq) {
        _item2.show = false; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 0,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 0,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  } else if (operation.type == 'move') {
    // 得回到origin的位置
    var moves = [];
    operation.seq.origin.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this24.userData[_this24.currentBoard][user].length; i++) {
        var item = _this24.userData[_this24.currentBoard][user][i];
        var movex = 0,
            movey = 0;

        if (item.type == 'line' && seq.seq == item.seq) {
          movex = seq.x - item.lines[0].x;
          movey = seq.y - item.lines[0].y;
          item.border.maxX += movex;
          item.border.minX += movex;
          item.border.maxY += movey;
          item.border.minY += movey;
          item.lines.forEach(function (line) {
            line.x += movex;
            line.y += movey;
          });
          moves.push({
            uid: user,
            seq: seq.seq,
            x: seq.x,
            y: seq.y
          });
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          movex = seq.x - item.startPoint.x;
          movey = seq.y - item.startPoint.y;
          item.startPoint.x += movex;
          item.startPoint.y += movey;
          item.endPoint.x += movex;
          item.endPoint.y += movey;
          moves.push({
            uid: user,
            seq: seq.seq,
            x: seq.x,
            y: seq.y
          });
        } else if (item.type == 'inputtext' && seq.seq == item.belongSeq) {
          item.location.x = seq.x;
          item.location.y = seq.y;
          moves.push({
            uid: user,
            seq: item.belongSeq,
            x: seq.x,
            y: seq.y
          });
        }
      }
    });
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.MOVE_LINE_GRAPH_ACTION,
      // 擦除
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "moves": moves
    }); // report

    var reportData = [];
    operation.seq.origin.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this24.userData[_this24.currentBoard][user].length; i++) {
        var item = _this24.userData[_this24.currentBoard][user][i];

        if (item.type == 'line' && seq.seq == item.seq) {
          // 添加点的信息
          var pointList = [];
          item.lines.forEach(function (line) {
            pointList.push({
              seq: line.seq,
              x: line.x,
              y: line.y
            });
          });
          reportData.push({
            type: 'addLine',
            seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            content: {
              boardId: _this24.currentBoard,
              uid: item.user,
              colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
              scale: 100,
              width: item.thin,
              time: item.time,
              updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              seq: item.seq,
              hidden: 0,
              points: pointList
            }
          });
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          var reportMap = {
            'line': 'addPatternLine',
            'oval': 'addPatternCircle',
            'circle': 'addPatternCircle',
            'rect': 'addPatternRectangle'
          };
          var reportMsg = {
            type: reportMap[item.graph],
            seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            content: {
              boardId: _this24.currentBoard,
              uid: item.user,
              colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
              scale: 100,
              width: item.thin,
              time: item.time,
              updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              hidden: 0,
              fillRect: item.solid ? 1 : 0,
              beginPoint: {
                x: item.startPoint.x,
                y: item.startPoint.y,
                seq: item.startPoint.seq
              },
              endPoint: {
                x: item.endPoint.x,
                y: item.endPoint.y,
                seq: item.endPoint.seq
              }
            }
          };

          if (item.graph == 'rect') {
            reportMsg.content.cornerRadius = 0;
          }

          reportData.push(reportMsg);
        } else if (item.type === 'inputtext' && seq.seq == item.belongSeq) {
          reportData.push({
            type: 'addText',
            seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            content: {
              belongSeq: item.belongSeq,
              // 该文字序列的seq，用来唯一标识一个文字序列
              time: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              // 添加图形时的时间
              boardId: _this24.currentBoard,
              // 白板id
              uid: item.user,
              // 画线条的用户id
              x: item.location.x,
              // uint32 起点x相对白板宽度比例*10000
              y: item.location.y,
              // uint32 起点y相对白板高度比例*10000
              colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
              // 文字颜色color值
              scale: item.scale,
              // scale值
              updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              // 后台的线条数据可以覆盖，通过updateTime来判断是否更新（IM后台时间戳/秒）
              hidden: 0,
              // 文字是否为隐藏的（橡皮擦、撤回操作可导致）
              typeface: item.typeFace,
              // 暂时不填，字体类型，sans-serif，serif和monospace
              textSize: item.textSize,
              // uint32 
              fontStyle: item.fontStyle,
              // 文字样式，默认填0，  0：常规；1：粗体；2.斜体；3.粗斜体；
              text: encodeURI(escape(item.text)),
              //文本内容
              text_wh: "".concat(item.textWidth, ",").concat(item.textHeight) // 文本宽高

            }
          });
        }
      }
    });
    this.report.reportGraphData(reportData);
  } else if (operation.type == 'delete') {
    // 说明删除东西 显示出来就好了
    operation.seq.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this24.userData[_this24.currentBoard][user].length; i++) {
        var item = _this24.userData[_this24.currentBoard][user][i];

        if (item.type == 'line' && seq.seq == item.seq) {
          item.show = true;
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          item.show = true;
        } else if (item.type == 'inputtext' && seq.seq == item.belongSeq) {
          item.show = true;
        }
      }
    });
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
      // 擦除
      "display": 1,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "lines": operation.seq
    }); // 上报

    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 1,
      lines: operation.seq
    });
  } else if (operation.type == 'imageElement') {
    for (var _i6 = 0; _i6 < this.userData[this.currentBoard][operation.user].length; _i6++) {
      var _item3 = this.userData[this.currentBoard][operation.user][_i6];

      if (_item3.type == 'imageElement' && operation.seq == _item3.belongSeq) {
        _item3.show = false; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 0,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 0,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  }

  this.opIndex[this.currentBoard]--;
  this.setNeedDraw(true);
  this.event.fire(this, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', this.canRedo());
  this.event.fire(this, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', this.canUndo());
}; // 能否回退


Store.prototype.canUndo = function () {
  if (this.opIndex[this.currentBoard] == 0) {
    return false;
  }

  return true;
}; // process操作


Store.prototype.redo = function () {
  var _this25 = this;

  this.cancelSelect();
  var operation = this.opData[this.currentBoard][this.opIndex[this.currentBoard]];

  if (!operation) {
    return;
  }

  if (operation.type == 'line') {
    // 说明是画了一个线  这里要展示
    for (var i = 0; i < this.userData[this.currentBoard][operation.user].length; i++) {
      var item = this.userData[this.currentBoard][operation.user][i];

      if (operation.seq == item.seq) {
        item.show = true; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 1,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 1,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  } else if (operation.type == 'inputtext') {
    // TODO
    for (var _i7 = 0; _i7 < this.userData[this.currentBoard][operation.user].length; _i7++) {
      var _item4 = this.userData[this.currentBoard][operation.user][_i7];

      if (_item4.type == 'inputtext' && operation.seq == _item4.belongSeq) {
        _item4.show = true; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 1,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        console.log("operation.user " + operation.user); // String test = ""
        // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 1,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  } else if (operation.type == 'eraser') {
    // 说明擦了东西 显示要擦掉
    operation.seq.forEach(function (seq) {
      var user = seq.uid;

      for (var _i8 = 0; _i8 < _this25.userData[_this25.currentBoard][user].length; _i8++) {
        var _item5 = _this25.userData[_this25.currentBoard][user][_i8];

        if (_item5.type == 'line' && seq.seq == _item5.seq) {
          _item5.show = false;
        } else if (_item5.type == 'graph' && seq.seq == _item5.startPoint.seq) {
          _item5.show = false;
        } else if (_item5.type === 'inputtext' && seq.seq == _item5.belongSeq) {
          _item5.show = false;
        } else if (_item5.type === 'imageElement' && seq.seq == _item5.belongSeq) {
          _item5.show = false;
        }
      }
    });
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
      // 擦除
      "display": 0,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "lines": operation.seq
    }); // 上报

    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 0,
      lines: operation.seq
    });
  } else if (operation.type == 'graph') {
    // 展示
    for (var _i9 = 0; _i9 < this.userData[this.currentBoard][operation.user].length; _i9++) {
      var _item6 = this.userData[this.currentBoard][operation.user][_i9];

      if (_item6.type == 'graph' && operation.seq == _item6.startPoint.seq) {
        _item6.show = true; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          "display": 1,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 1,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  } else if (operation.type == 'move') {
    // 得回到final的位置
    var moves = [];
    operation.seq.final.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this25.userData[_this25.currentBoard][user].length; i++) {
        var item = _this25.userData[_this25.currentBoard][user][i];
        var movex = 0,
            movey = 0;

        if (item.type == 'line' && seq.seq == item.seq) {
          movex = seq.x - item.lines[0].x;
          movey = seq.y - item.lines[0].y;
          item.border.maxX += movex;
          item.border.minX += movex;
          item.border.maxY += movey;
          item.border.minY += movey;
          item.lines.forEach(function (line) {
            line.x += movex;
            line.y += movey;
          });
          moves.push({
            uid: user,
            seq: seq.seq,
            x: seq.x,
            y: seq.y
          });
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          movex = seq.x - item.startPoint.x;
          movey = seq.y - item.startPoint.y;
          item.startPoint.x += movex;
          item.startPoint.y += movey;
          item.endPoint.x += movex;
          item.endPoint.y += movey;
          moves.push({
            uid: user,
            seq: seq.seq,
            x: seq.x,
            y: seq.y
          });
        } else if (item.type == 'inputtext' && seq.seq == item.belongSeq) {
          item.location.x = seq.x;
          item.location.y = seq.y;
          moves.push({
            uid: user,
            seq: item.belongSeq,
            x: seq.x,
            y: seq.y
          });
        }
      }
    });
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.MOVE_LINE_GRAPH_ACTION,
      // 擦除
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "moves": moves
    });
    var reportData = [];
    operation.seq.final.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this25.userData[_this25.currentBoard][user].length; i++) {
        var item = _this25.userData[_this25.currentBoard][user][i];

        if (item.type == 'line' && seq.seq == item.seq) {
          // 添加点的信息
          var pointList = [];
          item.lines.forEach(function (line) {
            pointList.push({
              seq: line.seq,
              x: line.x,
              y: line.y
            });
          });
          reportData.push({
            type: 'addLine',
            seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            content: {
              boardId: _this25.currentBoard,
              uid: item.user,
              colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
              scale: 100,
              width: item.thin,
              time: item.time,
              updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              seq: item.seq,
              hidden: 0,
              points: pointList
            }
          });
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          var reportMap = {
            'line': 'addPatternLine',
            'oval': 'addPatternCircle',
            'circle': 'addPatternCircle',
            'rect': 'addPatternRectangle'
          };
          var reportMsg = {
            type: reportMap[item.graph],
            seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            content: {
              boardId: _this25.currentBoard,
              uid: item.user,
              colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
              scale: 100,
              width: item.thin,
              time: item.time,
              updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              hidden: 0,
              beginPoint: {
                x: item.startPoint.x,
                y: item.startPoint.y,
                seq: item.startPoint.seq
              },
              endPoint: {
                x: item.endPoint.x,
                y: item.endPoint.y,
                seq: item.endPoint.seq
              }
            }
          };

          if (item.graph == 'oval' || item.graph == 'circle') {
            reportMsg.content.fillRect = 0;
          } else if (item.graph == 'rect') {
            reportMsg.content.fillRect = 0;
            reportMsg.content.cornerRadius = 0;
          }

          reportData.push(reportMsg);
        } else if (item.type === 'inputtext' && seq.seq == item.belongSeq) {
          reportData.push({
            type: 'addText',
            seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
            content: {
              belongSeq: item.belongSeq,
              // 该文字序列的seq，用来唯一标识一个文字序列
              time: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              // 添加图形时的时间
              boardId: _this25.currentBoard,
              // 白板id
              uid: item.user,
              // 画线条的用户id
              x: item.location.x,
              // uint32 起点x相对白板宽度比例*10000
              y: item.location.y,
              // uint32 起点y相对白板高度比例*10000
              colorRGBA: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(item.color),
              // 文字颜色color值
              scale: item.scale,
              // scale值
              updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
              // 后台的线条数据可以覆盖，通过updateTime来判断是否更新（IM后台时间戳/秒）
              hidden: 0,
              // 文字是否为隐藏的（橡皮擦、撤回操作可导致）
              typeface: item.typeFace,
              // 暂时不填，字体类型，sans-serif，serif和monospace
              textSize: item.textSize,
              // uint32 
              fontStyle: item.fontStyle,
              // 文字样式，默认填0，  0：常规；1：粗体；2.斜体；3.粗斜体；
              text: encodeURI(escape(item.text)),
              //文本内容
              text_wh: "".concat(item.textWidth, ",").concat(item.textHeight) // 文本宽高

            }
          });
        }
      }
    });
    this.report.reportGraphData(reportData);
  } else if (operation.type == "delete") {
    // 说明删除了东西，显示要擦掉
    operation.seq.forEach(function (seq) {
      var user = seq.uid;

      for (var i = 0; i < _this25.userData[_this25.currentBoard][user].length; i++) {
        var item = _this25.userData[_this25.currentBoard][user][i];

        if (item.type == 'line' && seq.seq == item.seq) {
          item.show = false;
        } else if (item.type == 'graph' && seq.seq == item.startPoint.seq) {
          item.show = false;
        } else if (item.type == 'inputtext' && seq.seq == item.belongSeq) {
          item.show = false;
        }
      }
    });
    this.addRealtimeData({
      "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
      // 擦除
      "display": 0,
      "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      "lines": operation.seq
    }); // 上报

    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 0,
      lines: operation.seq
    });
  } else if (operation.type == 'imageElement') {
    for (var _i10 = 0; _i10 < this.userData[this.currentBoard][operation.user].length; _i10++) {
      var _item7 = this.userData[this.currentBoard][operation.user][_i10];

      if (_item7.type == 'imageElement' && operation.seq == _item7.belongSeq) {
        _item7.show = true; // 这里需要realTimeData

        this.addRealtimeData({
          "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ERASER_ACTION,
          // 擦除
          "display": 1,
          "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
          "lines": [{
            uid: operation.user,
            seq: operation.seq
          }]
        }); // 上报

        this.report.reportDisplayLine({
          boardId: this.currentBoard,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
          display: 1,
          lines: [{
            uid: operation.user,
            seq: operation.seq
          }]
        });
        break;
      }
    }
  }

  this.opIndex[this.currentBoard]++;
  this.setNeedDraw(true);
  this.event.fire(this, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', this.canRedo());
  this.event.fire(this, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', this.canUndo());
}; // 能否回退


Store.prototype.canRedo = function () {
  if (this.opIndex[this.currentBoard] == this.opData[this.currentBoard].length) {
    return false;
  }

  return true;
}; // 获取白板数据


Store.prototype.syncHistroyData = function () {
  var _this26 = this;

  this.aegis.report('syncHistroyData');
  var self = this; // self.clearBoard();

  var globalBackgroundColor = [];
  var boardData = [];
  var fileData = [];
  var faceFileData = [];
  var fetchTimer = 0; // 拉取次数

  var getSwitchBoardCmd = false; // 是否已经获取到switchBoard信令了（switchBoard信令之前的数据均为当前页的数据）

  var getBoardData = function getBoardData(isFirstRequest, callback, fail) {
    var startTime = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp();
    new Promise(function (resolve, reject) {
      _this26.request.getBoardData(isFirstRequest, function (res, oresp) {
        if (!res.error_code) {
          self.elkLog.report('getBoardData', {
            time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
            extra_info: JSON.stringify(res)
          });
          resolve({
            res: res,
            oresp: oresp
          });
        } else {
          // 失败
          self.elkLog.report('getBoardData', {
            action_result: res.error_code,
            action_info: res.error_msg,
            time_consume: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp() - startTime,
            extra_info: JSON.stringify(res)
          });
          self.event.fire(this, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_HISTORYDATA, "errorCode:".concat(res.error_code, ",errorMessage:").concat(res.error_msg));
        }
      }, function (error) {
        reject(error);
      });
    }).then(function (_ref4) {
      var res = _ref4.res,
          oresp = _ref4.oresp;

      if (JSON.parse(oresp.config.data).first_time) {
        globalBackgroundColor = [];
        boardData = [];
        fileData = [];
        faceFileData = [];
        fetchTimer = 0; // 拉取次数

        getSwitchBoardCmd = false; // 是否已经获取到switchBoard信令了（switchBoard信令之前的数据均为当前页的数据）

        self.clearBoard(true, false, true);
        self.resetData();
      }

      var list = res.board_data_list || [];
      list.forEach(function (item) {
        if (item.type === 'switchBoard') {
          if (getSwitchBoardCmd) {
            return;
          }

          getSwitchBoardCmd = true; // 已经获取到switchBoard信令了

          self.faceData.push(item);
          var currentFid = JSON.parse(item.content).fid;
          fileData = fileData.filter(function (fileItem) {
            var _fid = JSON.parse(fileItem.content).fid;

            if (_fid != currentFid) {
              return true;
            } else {
              // 优先渲染首页文件
              faceFileData.push(fileItem);
              return false;
            }
          });

          _this26.renderFace(faceFileData, self.faceData, globalBackgroundColor);
        } else if (item.type === 'setGlobalBG') {
          // 优先返回
          globalBackgroundColor.push(item);
        } else if (item.type === 'addFile') {
          // 最后返回
          fileData.push(item);
        } else {
          // 已经获取到switchBoard信令
          if (getSwitchBoardCmd) {
            boardData.push(item);
          } else {
            self.faceData.push(item);
          }
        }
      });
      fetchTimer++;

      if (!res.is_finish && fetchTimer < 50) {
        getBoardData(false, callback, fail);
      } else {
        callback();
      }
    }).catch(function (error) {
      self.event.fire(_this26, 'TEB_ERROR', _model_TEduBoardErrorCode__WEBPACK_IMPORTED_MODULE_37__["default"].TEDU_BOARD_ERROR_HISTORYDATA, error.message);
      self.elkLog.report('getBoardData', {
        action_result: -3,
        action_info: error.message,
        time_consume: 0,
        extra_info: JSON.stringify({
          stack: error.stack,
          message: error.message
        })
      });
    });
  };

  return new Promise(function (resolve, reject) {
    getBoardData(true, function () {
      var _this27 = this;

      if (!getSwitchBoardCmd) {
        // 如果一直获取不到switchBoard信令(相当于没有渲染首屏数据)，该情况只发生在只有默认白板的情况
        // 此时boardData是空，数据存储在faceData里面
        self.addHistory(globalBackgroundColor); // （如果没有switchBoard信令，则这里补充渲染一次） 优先设置默认的全局背景色（优先在首屏数据渲染）

        boardData = boardData.concat(self.faceData);
        self.faceData = [];
      }

      console.time('render file'); // self.addHistory(faceFileData); // 优先渲染首页白板所在的文件

      self.addHistory(fileData);
      console.timeEnd('render file');
      console.time('render history');
      self.addHistory(boardData);
      console.timeEnd('render history'); // 修正数据

      self.fixBoardData(); // 排序一次

      self.sortBoard(); // 设置最大的seq

      self.syncBoardSeq();
      setTimeout(function () {
        self.event.fire(_this27, 'TEB_HISTROYDATA_SYNCCOMPLETED');
      }, 200);
    });
  });
};
/**
 * 渲染首页
 */


Store.prototype.renderFace = function (faceFileData, faceData, globalBackgroundColor) {
  this.addHistory(globalBackgroundColor); // 优先渲染首页白板所在的文件

  console.log('render face file', faceFileData);
  this.addHistory(faceFileData);
  this.addHistory(faceData, true);
};
/**
 * 修正数据（保护逻辑）
 */


Store.prototype.fixBoardData = function () {
  var _this28 = this;

  try {
    // -------------------  修正文件被删除了，还有涂鸦的情况   ----------------------
    var gids = [];
    this.getGroup().forEach(function (item) {
      gids.push(item.fid);
    });
    var errorIndexs = [];
    this.boardList.forEach(function (board, index) {
      // 如果白板ID不在gids里面，则说明该文件被删了，需要把该白板删掉
      var fid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(board);

      if (fid != _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP && gids.indexOf(fid) === -1) {
        errorIndexs.push(index);
        delete _this28.userData[board];
        delete _this28.data[board];
        delete _this28.opData[board];
        delete _this28.opIndex[board];
        delete _this28.backgroundPic[board];
        delete _this28.backgroundColor[board];
      }
    });
    errorIndexs.sort(function (item1, item2) {
      return item2 - item1;
    });
    errorIndexs.forEach(function (errorIndex) {
      _this28.boardList.splice(errorIndex, 1);
    }); // -------------------  修正文件被删除了，还有涂鸦的情况   ----------------------
  } catch (error) {}
};
/**
 * 对白板进行排序
 */


Store.prototype.sortBoard = function () {
  this.boardList = this.boardList.sort(function (item1, item2) {
    var timestamp1 = item1 === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD ? 0 : item1.match(/\d+_\d+_#\w+$/)[0].split('_')[0];
    var timestamp2 = item2 === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD ? 0 : item2.match(/\d+_\d+_#\w+$/)[0].split('_')[0]; // 先比较timestamp，再比较seq

    if (timestamp1 != timestamp2) {
      return timestamp1 - timestamp2;
    } else {
      var seq1 = item1 === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD ? 0 : item1.match(/\d+_#\w+$/)[0].split('_')[0];
      var seq2 = item2 === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD ? 0 : item2.match(/\d+_#\w+$/)[0].split('_')[0];
      return seq1 - seq2;
    }
  });
};
/**
 * 拉回历史数据后，设置最大的白板索引seq
 */


Store.prototype.syncBoardSeq = function () {
  if (this.boardList.length == 1 && this.boardList[0] === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_DEFAULT_BOARD) {
    this.boardIdSeq = 1;
  } else {
    if (this.boardList[this.boardList.length - 1]) {
      this.boardIdSeq = this.boardList[this.boardList.length - 1].match(/\d+_#\w+$/)[0].split('_')[0] * 1 + 1;
    }
  }
};

Store.prototype.sortGroup = function () {
  this.groups = this.groups.sort(function (item1, item2) {
    if (item1.fid === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
      return -1;
    } else if (item2.fid === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
      return 1;
    } else {
      return item1.fid.replace(/\D*/, '') * 1 - item2.fid.replace(/\D*/, '') * 1;
    }
  });
};
/**
 * 接收数据
 * @param {*} data
 */


Store.prototype.addData = function (data) {
  var _this29 = this;

  // 白名单鉴权
  ////////////////////////////////
  if (!this.permissions) {
    return;
  } ////////////
  // 进行一次深拷贝


  data = JSON.parse(JSON.stringify(data)); // 上报接收到的数据

  if (data) {
    try {
      var noReportActions = [6, 7]; // 激光笔开始  激光笔结束

      var reportActions = data.value.actions.filter(function (item) {
        return noReportActions.indexOf(item.action) === -1;
      });

      if (reportActions.length) {
        // 上报接收到的数据
        this.elkLog.report('addData', {
          boardid: this.getCurrentBoard(),
          extra_info: JSON.stringify({
            seq: data.seq,
            timestamp: data.timestamp,
            value: {
              boardId: data.value.boardId,
              operator: data.value.operator,
              actions: reportActions
            }
          })
        });
      }
    } catch (error) {}
  }

  var user = data.value.operator;
  var actions = data.value.actions;
  var boardId = data.value.boardId;

  if (!this.userData[boardId]) {
    this.addBoard(boardId, false);
  }

  if (!this.userData[boardId][user]) {
    this.userData[boardId][user] = [];
  }

  var length = this.userData[boardId][user].length;
  var laserActionSize = 0;
  var lineActionSize = 0;
  var onlyReceivedTextAndContentSame = false; // 仅仅只收到文本工具定时发的信息，且内容相同，则不需要重复渲染（文本定时发送只为了同步老师在输入过程中，停下了，此时im也没有数据，后台历史也没有数据）

  actions.forEach(function (action, index) {
    boardId = action.toBoardId || action.boardId || boardId;
    action.color && (action.color = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].dealColor(action.color));

    if (_this29.seqFilter[action.seq + ""]) {
      if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_START_ACTION || action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_MOVE_ACTION || action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_END_ACTION) {
        ++lineActionSize;
      } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION || action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_HIDE_ACTION) {
        ++laserActionSize;
      }

      return;
    } else {
      _this29.seqFilter[action.seq + ""] = true;
    }

    var line = null;

    if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_START_ACTION) {
      line = _this29.findLine(boardId, user, action); // 找到这条线了，这种情况是action = 2 || 3 先收到的情况

      if (line) {
        line.writing = action.writing;
        line.color = action.color;
        line.thin = action.thin;
        line.show = true;
        line.lines.push({
          action: action.action,
          x: action.x,
          y: action.y,
          w: action.w || action.thin,
          belongSeq: action.belongSeq,
          seq: action.seq,
          timestamp: action.timestamp
        });
        line.sort();
        line.setBorder(action.x, action.y); //乱序全局重绘

        console.log("line: 2/3 come first");

        _this29.setPartDraw(true);
      } else {
        // 找不到这条线, 就新增
        // 开始画线
        line = new _Line__WEBPACK_IMPORTED_MODULE_27__["default"](user, action);
        line.show = true;

        _this29.userData[boardId][user].push(line);

        _this29.data[boardId].push(line);
      }

      if (line.endSeq !== 0) {
        // 已收到线条结束部分，平滑曲线
        if (_this29.smoothLevel > 0) {
          var pts = [];
          line.lines.forEach(function (pt) {
            pts.push([pt.x, pt.y]);
          });
        }
      }

      if (!action.timestamp) {
        //老版本数据
        _this29.setPartDraw(true);
      } else {
        _this29.setIncreasingDraw(true);
      }

      ++lineActionSize;
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_MOVE_ACTION || action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_END_ACTION) {
      line = _this29.findLine(boardId, user, action);

      if (line) {
        // 找到了这条线，说明消息action=1先到
        line.lines.push({
          action: action.action,
          x: action.x,
          y: action.y,
          w: action.w || action.thin,
          belongSeq: action.belongSeq,
          seq: action.seq,
          timestamp: action.timestamp
        });

        if (line.lines.length > 1) {
          var latest = line.lines[line.lines.length - 2];

          if (action.seq < latest.seq) {
            //乱序到达
            line.sort(); //乱序全局重绘

            console.log("line: wrong seq");

            _this29.setPartDraw(true);
          }
        }

        line.setBorder(action.x, action.y);
      } else {
        // 没找着，则说明action=1还没有到
        // 开始画线
        line = new _Line__WEBPACK_IMPORTED_MODULE_27__["default"](user, action);
        console.log("line: not found");

        _this29.userData[boardId][user].push(line);

        _this29.data[boardId].push(line);
      }

      if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.LINE_END_ACTION) {
        line.endSeq = action.seq;

        (function (item, boardId) {
          setTimeout(function () {
            // 如果这俩丢了，则认为action=1丢了
            if (!item.color || !item.thin) {
              _this29.request.getLineData({
                "boardId": boardId,
                "owner": item.user,
                "seq": item.belongSeq
              }, function (res) {
                if (!res.error_code) {
                  // 如果成功了
                  _this29.addHistory([{
                    content: res.content,
                    type: res.type
                  }]); // 排序一次


                  _this29.sortBoard(); // 设置最大的seq


                  _this29.syncBoardSeq(); // 全局刷新


                  _this29.setNeedDraw(true);
                }
              });
            }
          }, 500);
        })(line, boardId);
      }

      if (line.endSeq !== 0) {
        // 已收到线条结束部分，平滑曲线
        if (_this29.smoothLevel > 0) {
          var _pts = [];
          line.lines.forEach(function (pt) {
            _pts.push([pt.x, pt.y]);
          });
        }
      }

      if (!action.timestamp) {
        //老版本数据
        _this29.setPartDraw(true);
      } else {
        _this29.setIncreasingDraw(true);
      }

      ++lineActionSize;
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_SHOW_ACTION) {
      // 激光笔先放一放
      ++laserActionSize;

      if (_this29.laserData.length == 0 || (action.seq * 1 || 0) > _this29.laserData[0].seq) {
        var raser = new _Raser__WEBPACK_IMPORTED_MODULE_31__["default"](_this29.user, {
          action: action.action,
          color: action.color,
          radius: action.r,
          x: action.x,
          y: action.y,
          timestamp: action.timestamp,
          seq: action.seq,
          toolType: action.toolType
        });

        if (action.timestamp) {
          //新版本
          _this29.laserData.push(raser);

          _this29.setLaserDraw(true);
        } else {
          //老版本
          if (index % 3 === 0) {
            _this29.laserData.push(raser);

            _this29.setLaserDraw(true);
          }
        }
      } else {
        if ((action.seq * 1 || 0) < _this29.laserData[0].seq) {
          console.log("raser: wrong seq");
        }
      }
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.RASER_HIDE_ACTION) {
      // 激光笔先放一放
      ++laserActionSize;

      var _raser = new _Raser__WEBPACK_IMPORTED_MODULE_31__["default"](_this29.user, {
        action: action.action,
        color: action.color,
        radius: action.r,
        x: action.x,
        y: action.y,
        timestamp: action.timestamp,
        seq: action.seq,
        toolType: action.toolType
      });

      _this29.laserData.push(_raser);

      _this29.setLaserDraw(true);
    } else if (action.action == 8) {
      // 要修改线的状态
      if (!action.lines) return;
      action.lines.forEach(function (line) {
        for (var i = 0; i < _this29.userData[boardId][line.uid].length; i++) {
          var item = _this29.userData[boardId][line.uid][i];

          if (item.type == 'line' && item.startSeq == line.seq) {
            item.show = !!action.display;
          } else if (item.type == 'graph' && item.startPoint.seq == line.seq) {
            item.show = !!action.display;
          } else if (item.type == 'inputtext' && item.belongSeq == line.seq) {
            item.show = !!action.display;
          } else if (item.type == 'imageElement' && item.belongSeq == line.seq) {
            item.show = !!action.display;
          }
        }
      });
    } else if (action.action == 9) {
      if (!action.moves) return;
      action.moves.forEach(function (move) {
        for (var i = 0; i < _this29.userData[boardId][move.uid].length; i++) {
          var item = _this29.userData[boardId][move.uid][i];
          var movex = 0,
              movey = 0;

          if (item.type == 'line' && item.startSeq == move.seq) {
            // 移动这条线
            movex = move.x - item.lines[0].x;
            movey = move.y - item.lines[0].y;
            item.border.maxX += movex;
            item.border.minX += movex;
            item.border.maxY += movey;
            item.border.minY += movey;
            item.lines.forEach(function (line) {
              line.x += movex;
              line.y += movey;
            });
          } else if (item.type == 'graph' && item.startPoint.seq == move.seq) {
            // 移动graph
            movex = move.x - item.startPoint.x;
            movey = move.y - item.startPoint.y;
            item.startPoint.x += movex;
            item.startPoint.y += movey;
            item.endPoint.x += movex;
            item.endPoint.y += movey; // 移动的是文字涂鸦
          } else if (item.type == 'inputtext' && item.belongSeq == move.seq) {
            item.location.x = move.x;
            item.location.y = move.y;
          }
        }
      });
    } else if (action.action == 10 || action.action == 11 || action.action == 12 || action.action == 14 || action.action == 15) {
      // 这里不区分圆形和椭圆
      var list = {
        10: 'line',
        11: 'oval',
        12: 'rect'
      };
      action.graph = list[action.action];
      action.solid = action.fillRect ? true : false;
      action.show = true;
      var graph = new _Graph__WEBPACK_IMPORTED_MODULE_29__["default"](user, action);

      _this29.userData[boardId][user].push(graph);

      _this29.data[boardId].push(graph);

      length++;
    } else if (action.action == 13) {
      // 接收到文字输入
      console.log('seq:', action.seq, _this29.maxAddTextSeq);

      if ((action.seq * 1 || 0) > _this29.maxAddTextSeq) {
        _this29.maxAddTextSeq = action.seq;
        var inputText = null;

        for (var i = 0; i < _this29.data[boardId].length; i++) {
          var textObj = _this29.data[boardId][i];

          if (textObj.belongSeq === action.belongSeq) {
            // 如果是同一个belongSeq
            if (action.seq > textObj.seq) {
              textObj.seq = action.seq;
            }

            inputText = textObj;
            break;
          }
        } // console.log("Recieve Action:", action);


        if (!inputText) {
          inputText = new _InputText__WEBPACK_IMPORTED_MODULE_28__["default"](user, {
            x: action.x,
            y: action.y,
            belongSeq: action.belongSeq
          }); // inputText.seq = action.seq;

          inputText.color = action.color;
          inputText.scale = action.scale;
          inputText.typeFace = action.typeFace;
          inputText.textSize = action.textSize;
          inputText.fontStyle = action.fontStyle;
          inputText.time = action.time;
          inputText.text = unescape(decodeURI(action.text));
          inputText.textWidth = action.textWidth;
          inputText.textHeight = action.textHeight;

          _this29.userData[boardId][user].push(inputText);

          _this29.data[boardId].push(inputText);
        } else {
          console.log('inputText', inputText, action);

          if (inputText.text == unescape(decodeURI(action.text)) && inputText.textWidth == action.textWidth && inputText.textHeight == action.textHeight && inputText.color == action.color && inputText.typeFace == action.typeFace && inputText.textSize == action.textSize && inputText.fontStyle == action.fontStyle) {
            if (actions.length === 1) {
              // 内容相同，并且只有一条数据
              onlyReceivedTextAndContentSame = true; // 仅仅是收到定时任务发送的数据
            }
          } else {
            inputText.text = unescape(decodeURI(action.text));
            inputText.textWidth = action.textWidth;
            inputText.textHeight = action.textHeight;
            inputText.color = action.color;
            inputText.scale = action.scale;
            inputText.typeFace = action.typeFace;
            inputText.textSize = action.textSize;
            inputText.fontStyle = action.fontStyle;
          }
        }
      } else {
        _this29.elkLog.report('throw_seq', {
          extra_info: JSON.stringify({
            seq: action.seq,
            maxAddTextSeq: _this29.maxAddTextSeq,
            boardId: boardId,
            method: 'addData'
          })
        });
      }
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.IMAGE_ELEMENT) {
      // 接收到增加图片元素
      // 乱序
      if ((action.seq * 1 || 0) < _this29.maxImageElementSeq) {
        _this29.elkLog.report('throw_seq', {
          extra_info: JSON.stringify({
            seq: action.seq,
            maxImageElementSeq: _this29.maxImageElementSeq,
            boardId: boardId,
            method: 'addData'
          })
        });

        return;
      }

      _this29.maxImageElementSeq = action.seq;
      var imageElement;
      var currentBoardData = _this29.data[boardId] || [];

      for (var _index = 0, len = currentBoardData.length; _index < len; _index++) {
        var item = currentBoardData[_index];

        if (item.belongSeq === action.belongSeq) {
          imageElement = item;
          break;
        }
      }

      if (imageElement) {
        imageElement.seq = action.seq;
        imageElement.width = action.width;
        imageElement.height = action.height;
        imageElement.x = action.x;
        imageElement.y = action.y;
        imageElement.show = action.show;
        imageElement.deg = action.deg;
      } else {
        imageElement = new _model_TEduBoardImageElement__WEBPACK_IMPORTED_MODULE_45__["default"]({
          user: user,
          url: action.url,
          belongSeq: action.belongSeq,
          seq: action.seq,
          time: action.time,
          width: action.width,
          height: action.height,
          x: action.x,
          y: action.y,
          boardId: boardId,
          show: action.show,
          deg: action.deg
        });

        _this29.userData[boardId][user].push(imageElement);

        _this29.data[boardId].push(imageElement);
      }
    } else if (action.action == 101) {
      // 清空
      _this29.clearBoard(true, false, true);
    } else if (action.action == 102) {
      // 清空
      _this29.clearBoard(false, false, true);
    } else if (action.action == 103) {
      try {
        _this29.clearFileDrawData(action.fids);
      } catch (error) {}
    } else if (action.action == 104) {
      // // 重置白板数据
      _this29.resetData();

      var containerEl = document.querySelector("#".concat(_this29.options.id));

      if (containerEl) {
        var textBox = containerEl.querySelector('.tic_board_textbox');
        var imagesBox = containerEl.querySelector('.tic_board__imagewrap');
        var webviewBox = containerEl.querySelector('.tiw_board_webview_wrap');

        if (textBox) {
          textBox.innerHTML = ''; // 清空文字
        }

        if (imagesBox) {
          imagesBox.innerHTML = ''; // 清空图片
        }

        if (webviewBox) {
          webviewBox.innerHTML = ''; // 清空h5
        }
      }
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.SET_BOARD_RATIO_ACTION) {
      // 设置分辨率
      _this29.setBoardRatio(boardId, action.ratio, false);
    } else if (action.action == 201) {
      // 更换背景图
      _this29.addBackgroundPic({
        boardIds: boardId,
        urls: action.url,
        type: action.type,
        needReport: false,
        position: action.mode
      });
    } else if (action.action == 202) {
      // 撤销背景图
      _this29.deleteBackgroundPic(boardId);
    } else if (action.action == 203) {
      action.color && (action.color = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatColor(action.color));

      if (action.isGlobal) {
        _this29.setGlobalBackgroundColor(action.color, true);
      } else {
        _this29.setBackgroundColor(action.color, true);
      }
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.BOARD_MOVE_SCALE_ACTION) {
      // 收到白板移动
      if ((action.seq * 1 || 0) > _this29.maxMoveSeq) {
        _this29.maxMoveSeq = action.seq;

        var dragData = _this29.dragDataList.getDragData(boardId);

        if (!dragData) {
          dragData = new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"]({
            scale: action.scale,
            xOffset: action.xOffset,
            yOffset: action.yOffset
          });

          _this29.dragDataList.addDragData(boardId, dragData);
        } else {
          _this29.dragDataList.updateDragData(boardId, {
            scale: action.scale,
            xOffset: action.xOffset,
            yOffset: action.yOffset
          });
        }

        _this29.event.fire(_this29, 'TEB_ZOOM_DRAG_STATUS', {
          fid: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(boardId),
          scale: action.scale,
          xOffset: action.xOffset,
          yOffset: action.yOffset
        });
      } else {
        // 乱序，丢弃
        _this29.elkLog.report('throw_seq', {
          extra_info: JSON.stringify({
            seq: action.seq,
            maxMoveSeq: _this29.maxMoveSeq,
            boardId: boardId,
            method: 'addData'
          })
        });
      }
    } else if (action.action == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.FILE_SCALE_ACTION) {
      // 收到文件缩放
      _this29.resolveFileScaleAction(action); // 文件缩放

    } else if (action.action == 401) {
      _this29.resolveSwitchBoardAction(action);
    } else if (action.action == 501) {
      // 添加文件
      _this29.resolveAddFileAction(action.file);
    } else if (action.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.PPT_EVENT_ACTION) {
      // PPT事件操作
      _H5Control__WEBPACK_IMPORTED_MODULE_35__["default"].pptAction(_this29.iframeDom, action.data);
    } else if (action.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.VIDEO_EVENT_ACTION) {
      // Video操作
      _this29.resolveUpdateVideoAction(action);
    } else if (action.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.H5Web_ELEMENT) {
      // 乱序
      if ((action.seq * 1 || 0) < _this29.maxH5webElementSeq) {
        _this29.elkLog.report('throw_seq', {
          extra_info: JSON.stringify({
            seq: action.seq,
            maxH5webElementSeq: _this29.maxH5webElementSeq,
            boardId: boardId,
            method: 'addData'
          })
        });

        return;
      }

      _this29.maxH5webElementSeq = action.seq;

      var element = _this29.elementMap.get(String(action.belongSeq));

      if (!element) {
        element = new _component_TEduBoardH5WebElement__WEBPACK_IMPORTED_MODULE_47__["default"]({
          belongSeq: action.belongSeq,
          boardId: action.boardId,
          user: user,
          url: action.url
        });

        _this29.userData[boardId][user].push(element);

        _this29.data[boardId].push(element);
      }

      element.setProperty({
        show: action.show,
        width: action.width,
        height: action.height,
        x: action.x,
        y: action.y,
        data: action.data
      });

      _this29.elementMap.set(String(element.belongSeq), element);
    } else if (action.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.H5WEB_EVENT_ACTION) {
      var h5element = _this29.elementMap.get(String(action.belongSeq));

      if (h5element) {
        h5element.postMessage(action.data);
      }
    } else if (action.action === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.FILE_MESSAGE_ACTION) {
      // 收到文件消息
      _this29.resolveFileMessage(action);
    }
  });

  if (laserActionSize != 0) {
    this.laserData = this.laserData.sort(function (item1, item2) {
      return item1.seq - item2.seq;
    });
  }

  if (laserActionSize == actions.length || lineActionSize == actions.length || laserActionSize + lineActionSize == actions.length) {//全部是激光笔数据 或 全是涂鸦数据
  } else {
    if (onlyReceivedTextAndContentSame) {//只收到文本且文本内容一致
    } else {
      //最后一个激光笔
      this.setNeedDraw(true);
    }
  }
};
/**
 * 文件缩放
 */


Store.prototype.resolveFileScaleAction = function (action) {
  var _this30 = this;

  var fid = action.fid;
  var info = this.getFileInfo(fid);

  if (info) {
    info.scale = action.scale;
    var dragDataList = this.dragDataList.getDragDataByFid(fid);
    dragDataList.forEach(function (item) {
      _this30.dragDataList.updateDragData(item.bid, {
        scale: action.scale // 缩放比

      });
    });
    this.event.fire(this, 'TEB_ZOOM_DRAG_STATUS', {
      fid: fid,
      scale: action.scale,
      xOffset: 0,
      // 偏移量先设置为0
      yOffset: 0 // 偏移量先设置为0

    });
    this.setNeedDraw(true);
  } else {
    this.request.getFileInfo({
      fid: fid
    }, function (res) {
      if (res && res.error_code == 0) {
        info = JSON.parse(res.content); // 增加文件

        _this30.resolveAddFileAction(info);

        info.scale = action.scale;

        var dragDataList = _this30.dragDataList.getDragDataByFid(fid);

        dragDataList.forEach(function (item) {
          _this30.dragDataList.updateDragData(item.bid, {
            scale: action.scale // 缩放比

          });
        });

        _this30.event.fire(_this30, 'TEB_ZOOM_DRAG_STATUS', {
          fid: fid,
          scale: action.scale,
          xOffset: 0,
          // 偏移量先设置为0
          yOffset: 0 // 偏移量先设置为0

        });

        _this30.setNeedDraw(true);
      } else {// 原地不动
      }
    }, function (error) {});
  }
};
/**
 * 解析401协议
 */


Store.prototype.resolveSwitchBoardAction = function (action) {
  var _this31 = this;

  this.aegis.report('resolveSwitchBoardAction');
  var toBoardId = action.toBoardId;
  var fids = [];
  var deleteBoards = [];

  if ((action.seq * 1 || 0) > this.maxSeq) {
    this.maxSeq = action.seq;
    fids = action.deleteFiles || [];
    deleteBoards = action.deleteBoards || []; // 要删除的文件ids

    fids.forEach(function (fid) {
      _this31.deleteGroup(fid, false); // 不上报


      deleteBoards = deleteBoards.concat(_this31.getBoardByGroup(fid));
    });
    deleteBoards.forEach(function (deleteBoardId) {
      _this31.removeBoard(deleteBoardId);
    });

    if (!this.data[toBoardId]) {
      this.addBoard(toBoardId, false);
    }

    this.currentBoard = toBoardId;
    var toFid = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(toBoardId);
    this.currentGroup = toFid;
    var slideIndex = Math.max(action.page, 0);
    var stepIndex = Math.max(action.step, 0);
    var info = this.getFileInfo(toFid);

    if (!info) {
      this.request.getFileInfo({
        fid: toFid
      }, function (res) {
        if (res && res.error_code == 0) {
          info = JSON.parse(res.content);

          _this31.resolveAddFileAction(info);

          _this31.setNeedDraw(true);

          setTimeout(function () {
            if (info.type === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT) {
              _H5Control__WEBPACK_IMPORTED_MODULE_35__["default"].gotoTimestampNew(_this31.iframeDom, {
                slideIndex: slideIndex,
                stepIndex: stepIndex,
                resetStep: action.resetStep,
                usePrevNextStepMethod: action.usePrevNextStepMethod,
                isPassive: true // 被动翻页（接收）

              });
            }

            _this31.updateFileInfo({
              fid: toFid,
              pageCount: _this31.getBoardByGroup(toFid).length,
              currentPageIndex: slideIndex || 0,
              currentPageStep: stepIndex || 0
            });

            _this31.event.fire(_this31, 'TEB_GOTOBOARD', toBoardId, _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(toBoardId));
          }, 200);
        } else {// TODO 获取文件信息失败
        }
      }, function (error) {// TODO 获取文件信息失败
      });
    } else {
      if (info.type === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT) {
        _H5Control__WEBPACK_IMPORTED_MODULE_35__["default"].gotoTimestampNew(this.iframeDom, {
          slideIndex: slideIndex,
          stepIndex: stepIndex,
          resetStep: action.resetStep,
          usePrevNextStepMethod: action.usePrevNextStepMethod,
          isPassive: true // 被动翻页（接收）

        });
      }

      this.updateFileInfo({
        fid: toFid,
        pageCount: this.getBoardByGroup(toFid).length,
        currentPageIndex: slideIndex || 0,
        currentPageStep: stepIndex || 0
      });
      this.event.fire(this, 'TEB_GOTOBOARD', toBoardId, _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].boardId2Fid(toBoardId));
    }
  } else {
    // seq小于maxSeq的说明是消息乱序收到的，直接丢弃，如果有要删除的白板和文件还是要正常删除
    console.log('=== 401 乱序 seq:', action.seq);
    fids = action.deleteFiles || [];
    deleteBoards = action.deleteBoards || []; // 要删除的文件ids

    fids.forEach(function (fid) {
      _this31.deleteGroup(fid, false); // 不上报


      deleteBoards = deleteBoards.concat(_this31.getBoardByGroup(fid));
    });
    deleteBoards.forEach(function (deleteBoardId) {
      _this31.removeBoard(deleteBoardId);
    });
    this.elkLog.report('throw_seq', {
      extra_info: JSON.stringify({
        seq: action.seq,
        maxSeq: this.maxSeq,
        boardId: toBoardId,
        method: 'addData'
      })
    });
  }
};
/**
 * 解析501
 */


Store.prototype.resolveAddFileAction = function (file) {
  this.aegis.report('resolveAddFileAction');
  var bid = null;
  var ids = []; // 如果是H5

  if (file.type === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT) {
    ids = []; // 生成白板ID

    for (var i = 0; i < file.pageCount; i++) {
      bid = "".concat(file.platform, "_").concat(file.uid, "_").concat(file.timestamp, "_").concat(i + 1, "_").concat(file.fid);
      ids.push(bid);
    }

    this.addBoard(ids, false);
    this.addGroupNotReport(file.fid, file.title, file.uid, file.downloadURL, file.pageCount, 0, file.timestamp, file.platform, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT, 0, file.ratio, file.scale, file.isTranscodeFile, file.status, file.progress);
  } else if (file.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMG) {
    var downloadURL = file.downloadURL;
    var basePreview = downloadURL ? _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].fileDownLoadUrlToPreviewUrl(downloadURL) : '';
    var previewUrls = [];
    ids = []; // 生成白板ID

    for (var j = 0; j < file.pageCount; j++) {
      bid = "".concat(file.platform, "_").concat(file.uid, "_").concat(file.timestamp, "_").concat(j + 1, "_").concat(file.fid);
      ids.push(bid);

      if (basePreview.endsWith('/')) {
        previewUrls.push("".concat(basePreview).concat(j + 1, ".jpg"));
      } else {
        // cos转码
        previewUrls.push(basePreview + (j + 1));
      }
    }

    this.addBoard(ids, false);

    if (downloadURL) {
      this.addBackgroundPic({
        boardIds: ids,
        urls: previewUrls,
        type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
        needReport: false
      });
    }

    this.addGroupNotReport(file.fid, file.title, file.uid, file.downloadURL, file.pageCount, 0, file.timestamp, file.platform, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMAGE, 0, file.ratio, file.scale, file.isTranscodeFile, file.status, file.progress);
  } else if (file.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.IMAGESFILE) {
    if (file.downloadURL) {
      var t1 = new Date().getTime();
      var decompressed = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].decompress(file.downloadURL);
      var t2 = new Date().getTime();
      previewUrls = JSON.parse(decompressed);
      var elapse = t2 - t1;
      this.elkLog.report('add_images_file_peer', {
        extra_info: JSON.stringify({
          urls: decompressed,
          urls_length: decompressed.length,
          elapse: elapse
        })
      }); // 生成白板ID

      this.addImagesToBoard(file, previewUrls);
    }
  } else if (file.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.VOD || file.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.VODFILE || file.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.LIVE || file.type == _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5FILE) {
    ids = []; // 生成白板ID

    for (var _i11 = 0; _i11 < file.pageCount; _i11++) {
      bid = "".concat(file.platform, "_").concat(file.uid, "_").concat(file.timestamp, "_").concat(_i11 + 1, "_").concat(file.fid);
      ids.push(bid);
    }

    this.addBoard(ids, false);
    this.addGroupNotReport(file.fid, file.title, file.uid, file.downloadURL, file.pageCount, 0, file.timestamp, file.platform, file.type, 0, file.ratio, file.scale, file.isTranscodeFile, file.status, file.progress);
  }
};
/**
 * 创建file对应的白板，并将其图片加入背景中
 */


Store.prototype.addImagesToBoard = function (file, previewUrls) {
  this.aegis.report('addImagesToBoard', {
    uid: file.uid,
    fid: file.fid
  }); // 生成白板ID

  var bid = null;
  var ids = [];

  for (var h = 0; h < file.pageCount; h++) {
    bid = "".concat(file.platform, "_").concat(file.uid, "_").concat(file.timestamp, "_").concat(h + 1, "_").concat(file.fid);
    ids.push(bid);
  }

  this.addBoard(ids, false);

  if (previewUrls && previewUrls.length > 0) {
    this.addBackgroundPic({
      boardIds: ids,
      urls: previewUrls,
      type: _config_Constant__WEBPACK_IMPORTED_MODULE_23__["default"].BACKGROUND_TYPE.IMAGE,
      needReport: false
    });
  }

  this.addGroupNotReport(file.fid, file.title, file.uid, file.downloadURL, file.pageCount, 0, file.timestamp, file.platform, file.type, 0, file.ratio, file.scale, file.isTranscodeFile, file.status, file.progress);
};
/**
 * 解析701协议
 */


Store.prototype.resolveUpdateVideoAction = function (action) {
  if ((action.seq * 1 || 0) > this.maxVideoSeq) {
    this.maxVideoSeq = action.seq;
    var status = action.status;
    var progress = action.progress;
    var fid = action.fid;
    var timestamp = action.time;
    this.updateFileInfo({
      fid: fid,
      status: status,
      progress: progress,
      timestamp: timestamp
    });
  } // this.event.fire(this, 'TEB_VIDEO_STATUS_CHANGED', fid, status, progress);

};
/**
 * @method addFile
 * @param {Array} urls 图片的url
 * @param {String} title  文件名
 * @param {String} downloadUrl  文件的对应下载地址
 * @returns {String} 文件id，空表示没有成功
 */


Store.prototype.addFile = function (fid, urls, title, downloadUrl, ratio, isTranscodeFile, filetype) {
  var needSwitch = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;
  this.aegis.report('addFile', {
    fid: fid,
    downloadUrl: downloadUrl
  });

  if (!Array.isArray(urls)) {
    return '';
  }

  fid = fid || "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp());
  var boards = [];
  var timestamp = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getSecondTime();
  boards = this.createBoardIdForFile(fid, this.user, timestamp, urls.length, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, filetype) || []; // 白板宽高比例

  var ratioWidthHeight, ratioWidth, ratioHeight; // 以文件的比例为

  if (this.boardContentFitMode === 2 || this.boardContentFitMode === 1) {
    ratioWidthHeight = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].calcRatioWidthHeight(ratio, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO);
  } else {
    // 以默认的宽高
    ratioWidthHeight = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].calcRatioWidthHeight(this.ratio, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO);
  }

  ratioWidth = ratioWidthHeight.ratioWidth;
  ratioHeight = ratioWidthHeight.ratioHeight; // 实际的宽高比

  ratio = ratioWidth + ':' + ratioHeight; // 以当前的fitmode为基准，算出当前的宽高比

  var scale;

  if (this.boardContentFitMode === 2) {
    // // 自动调整白板宽高比与文件一致，文件铺满白板，白板等比例缩放居中显示，白板宽高>=容器宽高
    var scaleX = this.containerWidth / ratioWidth;
    var scaleY = this.containerHeight / ratioHeight;
    var minScale = Math.min(scaleX, scaleY);
    var maxScale = Math.max(scaleX, scaleY);
    scale = maxScale / minScale * 100;
  } else if (this.boardContentFitMode === 1) {
    scale = 100;
  } else {
    scale = 100;
  }

  this.addGroup(fid, title, this.user, downloadUrl, urls.length, 0, timestamp, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, filetype, 0, ratio, scale, isTranscodeFile);
  this.addBoard(boards);
  this.addBackgroundPic({
    boardIds: boards,
    urls: urls
  });
  var actionData = {
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ADD_FILE_ACTION,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "file": {
      fid: fid,
      title: title,
      downloadURL: downloadUrl,
      pageCount: urls.length,
      uid: this.identifier,
      timestamp: timestamp,
      platform: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM,
      type: filetype,
      ratio: ratio,
      scale: scale,
      isTranscodeFile: isTranscodeFile
    }
  };
  this.addRealtimeData(actionData);

  if (boards.length && needSwitch) {
    this.switchFile(fid);
  }

  return fid;
};
/**
 * @method addFile
 * @param {Array} url 图片的url
 * @param {String} title  文件名
 * @param {String} downloadUrl  文件的对应下载地址
 * @returns {String} 文件id，空表示没有成功
 */


Store.prototype.addH5PPTFile = function (fid, url, title, count, width, height, isTranscodeFile) {
  var needSwitch = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;
  this.aegis.report('addH5PPTFile', {
    fid: fid,
    uid: this.user,
    url: url
  });
  var isExistUrl = false;
  var groups = this.getGroup() || [];

  for (var i = 0, len = groups.length; i < len; i++) {
    if (groups[i].downloadURL == url) {
      isExistUrl = true;
      break;
    }
  }

  if (isExistUrl) {
    return;
  }

  fid = fid || "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp());
  var boards = [];
  var timestamp = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getSecondTime();
  boards = this.createBoardIdForFile(fid, this.user, timestamp, count, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT) || [];
  var ratio = null;

  if (width && height) {
    // 求最大公约数
    var number = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].maxCommonDivisor(width, height);
    ratio = width / number + ':' + height / number;
  } else {
    ratio = this.ratio;
  } // 白板宽高比例


  var ratioWidthHeight, ratioWidth, ratioHeight; // 以文件的比例为

  if (this.boardContentFitMode === 2 || this.boardContentFitMode === 1) {
    ratioWidthHeight = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].calcRatioWidthHeight(ratio, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO);
  } else {
    // 以默认的宽高
    ratioWidthHeight = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].calcRatioWidthHeight(this.ratio, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO);
  }

  ratioWidth = ratioWidthHeight.ratioWidth;
  ratioHeight = ratioWidthHeight.ratioHeight; // 实际的宽高比

  ratio = ratioWidth + ':' + ratioHeight; // 以当前的fitmode为基准，算出当前的宽高比

  var scale;

  if (this.boardContentFitMode === 2) {
    // // 自动调整白板宽��比与文件一致，文件铺满白板，白板等比例缩放居中显示，白板宽高>=容器宽高
    var scaleX = this.containerWidth / ratioWidth;
    var scaleY = this.containerHeight / ratioHeight;
    var minScale = Math.min(scaleX, scaleY);
    var maxScale = Math.max(scaleX, scaleY);
    scale = maxScale / minScale * 100;
  } else if (this.boardContentFitMode === 1) {
    scale = 100;
  } else {
    scale = 100;
  } // 发送增加文件


  var actionData = {
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ADD_FILE_ACTION,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "file": {
      fid: fid,
      title: title,
      downloadURL: url,
      pageCount: count,
      uid: this.identifier,
      timestamp: timestamp,
      platform: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM,
      type: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT,
      ratio: ratio,
      scale: scale,
      isTranscodeFile: isTranscodeFile
    }
  };
  this.addRealtimeData(actionData);
  this.addGroup(fid, title, this.user, url, count, 0, timestamp, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5PPT, 0, ratio, scale, isTranscodeFile);
  this.addBoard(boards);

  if (boards.length && needSwitch) {
    this.switchFile(fid);
  }

  return fid;
};

Store.prototype.addH5File = function (fid, url, width, height) {
  this.aegis.report('addH5File', {
    fid: fid,
    url: url,
    width: width,
    height: height
  });
  this.addVideoFile(fid, url, width, height, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].FILE_TYPE.H5FILE);
};

Store.prototype.addVideoFile = function (fid, url, width, height, type) {
  this.aegis.report('addVideoFile', {
    fid: fid,
    url: url,
    width: width,
    height: height,
    type: type
  });
  var isExistUrl = false;
  var count = 1;
  var isTranscodeFile = false;
  var title = "";
  var groups = this.getGroup() || [];

  for (var i = 0, len = groups.length; i < len; i++) {
    if (groups[i].downloadURL == url) {
      isExistUrl = true;
      break;
    }
  }

  if (isExistUrl) {
    return;
  }

  fid = fid || "#".concat(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp());
  var boards = [];
  var timestamp = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getSecondTime();
  boards = this.createBoardIdForFile(fid, this.user, timestamp, count, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, type) || [];
  var ratio = null;

  if (width && height) {
    // 求最大公约数
    var number = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].maxCommonDivisor(width, height);
    ratio = width / number + ':' + height / number;
  } else {
    ratio = this.ratio;
  } // 白板宽高比例


  var ratioWidthHeight, ratioWidth, ratioHeight; // 以文件的比例为

  if (this.boardContentFitMode === 2 || this.boardContentFitMode === 1) {
    ratioWidthHeight = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].calcRatioWidthHeight(ratio, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO);
  } else {
    // 以默认的宽高
    ratioWidthHeight = _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].calcRatioWidthHeight(this.ratio, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].RATIO);
  }

  ratioWidth = ratioWidthHeight.ratioWidth;
  ratioHeight = ratioWidthHeight.ratioHeight; // 实际的宽高比

  ratio = ratioWidth + ':' + ratioHeight; // 以当前的fitmode为基准，算出当前的宽高比

  var scale;

  if (this.boardContentFitMode === 2) {
    // // 自动调整白板宽高比与文件一致，文件铺满白板，白板等比例缩放居中显示，白板宽高>=容器宽高
    var scaleX = this.containerWidth / ratioWidth;
    var scaleY = this.containerHeight / ratioHeight;
    var minScale = Math.min(scaleX, scaleY);
    var maxScale = Math.max(scaleX, scaleY);
    scale = maxScale / minScale * 100;
  } else if (this.boardContentFitMode === 1) {
    scale = 100;
  } else {
    scale = 100;
  }

  this.addGroup(fid, title, this.user, url, count, 0, timestamp, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM, type, 0, ratio, scale, isTranscodeFile);
  this.addBoard(boards); // 发送增加文件

  var actionData = {
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.ADD_FILE_ACTION,
    "time": _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "file": {
      fid: fid,
      title: title,
      downloadURL: url,
      pageCount: count,
      uid: this.identifier,
      timestamp: timestamp,
      platform: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PLATFORM,
      type: type,
      ratio: ratio,
      scale: scale,
      isTranscodeFile: isTranscodeFile,
      status: 0,
      progress: 0
    }
  };
  this.addRealtimeData(actionData);

  if (boards.length) {
    this.switchFile(fid);
  }

  return fid;
};
/**
 * 删除文件
 * @param {String} fid/groupid
 * @returns {Boolean} 删除文件是否成功
 */


Store.prototype.deleteFile = function () {
  var fid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getCurrentFile();
  this.aegis.report('deleteFile', {
    fid: fid
  });

  if (fid === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
    return false;
  } // 删除文件分组, 并返回文件下的白板


  var boards = this.deleteGroup(fid);

  if (fid == this.getCurrentFile()) {
    // 如果要删除的fid和当前文件id是同一个，则跳转到默认白板
    this.switchFile(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP);
  }

  this.event.fire(this, 'TEB_DELETEFILE', fid);

  if (boards && boards.length) {
    this.deleteBoard(boards, fid);
    return true;
  } else {
    return false;
  }
}; // 切换file


Store.prototype.switchFile = function (fid, boardId, sIndex) {
  this.aegis.report('switchFile', {
    fid: fid,
    boardId: boardId,
    sIndex: sIndex
  });
  var isExist = false; // 是否已经存在

  for (var i = 0, len = this.groups.length; i < len; i++) {
    var group = this.groups[i];

    if (group.fid == fid) {
      isExist = true;
      break;
    }
  }

  if (isExist) {
    // 如果已经存在了
    this.currentGroup = fid;
    var boards = this.getBoardByGroup(this.currentGroup);
    var file = this.getFileInfo(this.currentGroup);
    var pageIndex = boards.indexOf(boardId);

    if (0 <= pageIndex && pageIndex <= file.pageCount) {
      file.currentPageIndex = pageIndex;
    }

    pageIndex = Math.max(0, file.currentPageIndex);

    if (isNaN(pageIndex)) {
      pageIndex = file.currentPageIndex || 0;
    }

    file.currentPageIndex = pageIndex;

    if (file.fid !== _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
      sIndex = Math.max(0, sIndex);

      if (isNaN(sIndex)) {
        sIndex = file.currentPageStep || 0;
      }

      file.currentPageStep = sIndex;
    }

    boardId = boards[pageIndex];
    this.event.fire(this, 'TEB_SWITCHFILE', fid);
    this.switchBoard(boardId);
    return fid;
  } else {
    console.log('不存在该白板组');
    return false;
  }
};

Store.prototype.setBoardSize = function (width, height) {
  this.boardWidth = width;
  this.boardHeight = height;
}; // 白板容器尺寸（参数id所在节点的宽高）


Store.prototype.setContainerSize = function (width, height) {
  this.containerWidth = width;
  this.containerHeight = height;
};

Store.prototype.setIframeDom = function (iframeDom) {
  this.iframeDom = iframeDom;
};
/**
 * 设置分辨率
 */


Store.prototype.setBoardRatio = function (boardId, ratio) {
  var needReport = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  this.aegis.report('setBoardRatio', {
    boardId: boardId,
    ratio: ratio,
    needReport: needReport
  });
  this.boardRatio[boardId] = ratio;
  var ratioData = {};
  ratioData[boardId] = ratio;
  needReport && this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.SET_BOARD_RATIO_ACTION,
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "ratio": ratio
  });
  needReport && this.report.reportsetBoardRatio(ratioData);
  this.setNeedDraw(true);
};
/**
 * 获取白板的宽高比
 */


Store.prototype.getBoardRatio = function () {
  if (this.getCurrentFile() === _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].COMMON_GROUP) {
    return this.boardRatio[this.currentBoard] || this.ratio;
  } else {
    var boardRatio = this.boardRatio[this.currentBoard];

    if (boardRatio) {
      return boardRatio;
    } else {
      var fileInfo = this.getFileInfo(this.getCurrentFile());

      if (fileInfo && fileInfo.ratio) {
        return fileInfo.ratio;
      } else {
        return this.ratio;
      }
    }
  }
};
/**
 * @params {Object} options
 */


Store.prototype.addDragData = function (boardId, options) {
  var dragData = new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"](options);
  this.dragDataList.addDragData(boardId, dragData);
};

Store.prototype.getDragData = function () {
  return this.dragDataList.getDragData(this.currentBoard);
};

Store.prototype.setBoardScale = function (scale) {
  if (!scale) {
    scale = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].SCALE;
  }

  scale = Math.max(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MIN_SCALE, Math.min(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MAX_SCALE, scale));
  var dragData = this.dragDataList.getDragData(this.currentBoard);

  if (dragData) {
    // 拖拽数据
    this.dragDataList.updateDragData(this.currentBoard, {
      scale: scale // 缩放比

    });
  } else {
    dragData = new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"]({
      scale: scale,
      // 缩放比
      xOffset: 50,
      yOffset: 50
    });
    this.dragDataList.addDragData(this.currentBoard, dragData);
  }

  this.addRealtimeData(dragData.getRealTimeData()); // 结束后就上报

  this.report.reportDrag(Object.assign(dragData.getReportData(), {
    boardId: this.currentBoard
  }));
  this.setNeedDraw(true);
};

Store.prototype.getBoardScale = function () {
  var scale;
  var dragData = this.dragDataList.getDragData(this.currentBoard);

  if (dragData) {
    scale = dragData.scale;
  } else {
    var fileInfo = this.getFileInfo(this.getCurrentFile());

    if (fileInfo) {
      scale = fileInfo.scale;
    }

    if (!scale) {
      scale = this.scale;
    }
  }

  return scale;
};

Store.prototype.setBoardContentFitMode = function (mode) {
  this.aegis.report('setBoardContentFitMode', {
    mode: mode
  });
  this.boardContentFitMode = mode || _model_TEduBoardContentFitMode__WEBPACK_IMPORTED_MODULE_38__["default"].TEDU_BOARD_FILE_FIT_MODE_NONE;
};

Store.prototype.getBoardContentFitMode = function () {
  return this.boardContentFitMode || _model_TEduBoardContentFitMode__WEBPACK_IMPORTED_MODULE_38__["default"].TEDU_BOARD_FILE_FIT_MODE_NONE;
};
/**
 * 更新文件信息
 */


Store.prototype.updateFileInfo = function (file) {
  this.aegis.report('updateFileInfo', {
    fid: file.fid,
    uid: file.uid
  });
  var fid = file.fid;
  var isExist = false; // 文件不存在

  for (var i = 0, len = this.groups.length; i < len; i++) {
    var group = this.groups[i];

    if (group.fid == fid) {
      group.title = group.title || file.title;
      group.pageCount = file.pageCount || group.pageCount;
      group.currentPageIndex = typeof file.currentPageIndex === 'undefined' ? group.currentPageIndex : file.currentPageIndex;
      group.currentPageStep = typeof file.currentPageStep === 'undefined' ? group.currentPageStep : file.currentPageStep;
      group.downloadURL = group.downloadURL || file.downloadURL;
      group.uid = group.uid || file.uid;
      group.timestamp = file.timestamp || group.timestamp;
      group.ratio = file.ratio || group.ratio;
      group.scale = file.scale || group.scale;
      group.status = typeof file.status == "undefined" ? group.status : file.status;
      group.progress = typeof file.progress == "undefined" ? group.progress : file.progress;
      isExist = true;
      break;
    }
  }

  if (!isExist) {
    // 文件不存在
    this.groups.push({
      fid: file.fid,
      title: file.title,
      pageCount: file.pageCount,
      currentPageIndex: file.currentPageIndex || 0,
      currentPageStep: file.currentPageStep || 0,
      downloadURL: file.downloadURL,
      uid: file.uid,
      timestamp: file.timestamp,
      type: file.type || 0,
      ratio: file.ratio || 0,
      scale: file.scale,
      status: file.status || 0,
      progress: file.progress || 0
    });
  }
};
/**
 *  判断H5PPTURL是否被加载过
 */


Store.prototype.isFileUrlExist = function (url) {
  var isExistUrl = false;
  var groups = this.getGroup() || [];

  for (var i = 0, len = groups.length; i < len; i++) {
    if (groups[i].downloadURL == url) {
      isExistUrl = true;
      break;
    }
  }

  return isExistUrl;
};
/**
 *  根据url获取H5PPT文件信息
 */


Store.prototype.getFileInfoByUrl = function (url) {
  var fileInfo = {};
  var groups = this.getGroup() || [];

  for (var i = 0, len = groups.length; i < len; i++) {
    if (groups[i].downloadURL == url) {
      fileInfo = groups[i];
      break;
    }
  }

  return fileInfo;
};
/**
 * 设置直线样式
 * @param {Object} style 直线样式
 */


Store.prototype.setLineStyle = function (style) {
  this.aegis.report('setLineStyle', {
    style: style
  });

  if (_typeof(style) != 'object') {
    return;
  }

  this.lineStyle = Object.assign(this.lineStyle, style);
};
/**
 * 获取直线样式
 * @returns {Object} 返回直线样式
 */


Store.prototype.getLineStyle = function () {
  return this.lineStyle;
};
/**
 * 设置椭圆绘制模式
 * @param {*} mode 绘制模式
 */


Store.prototype.setOvalDrawMode = function (mode) {
  this.aegis.report('setOvalDrawMode', {
    mode: mode
  });
  this.ovalDrawMode = mode;
};
/**
 * 获取椭圆绘制模式
 * @returns {*} 返回绘制模式
 */


Store.prototype.getOvalDrawMode = function () {
  return this.ovalDrawMode;
};

Store.prototype.setCursorIcon = function (toolType, cursorIcon) {
  this.aegis.report('setCursorIcon', {
    toolType: toolType,
    cursorIcon: cursorIcon
  });

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isObject(cursorIcon)) {
    Object.assign(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].ICONS, _defineProperty({}, toolType, cursorIcon));
  }
};

Store.prototype.getCursorIcons = function () {
  return _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].ICONS;
};

Store.prototype.pptAction = function (data) {
  this.aegis.report('pptAction', {
    data: data
  });
  this.addRealtimeData({
    "action": _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.PPT_EVENT_ACTION,
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
    "data": data
  });
};

Store.prototype.createTranscode = function (data) {
  this.aegis.report('createTranscode', {
    data: data
  });
  return this.request.createTranscode(data);
};

Store.prototype.describeTranscode = function (data) {
  var _this32 = this;

  this.aegis.report('describeTranscode', {
    data: data
  });
  this.request.describeTranscode(data).then(function (res) {
    if (res.data.Response.Error) {
      var result = {
        status: 'ERROR',
        code: res.data.Response.Error.Code,
        message: res.data.Response.Error.Message,
        taskId: data.taskId,
        userData: _this32.taskIdUserDataMap[data.taskId]
      };

      _this32.event.fire(_this32, 'TEB_TRANSCODEPROGRESS', result);

      _this32.elkLog.report('TEB_TRANSCODEPROGRESS', {
        extra_info: JSON.stringify(result)
      });

      clearInterval(_this32.transcodeIntervalMap[data.taskId]);
    } else if (res.data.Response) {
      var _result = Object.assign({
        code: '',
        message: '',
        userData: _this32.taskIdUserDataMap[data.taskId]
      }, _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].CamelCase2camelCase(res.data.Response));

      _this32.event.fire(_this32, 'TEB_TRANSCODEPROGRESS', _result);

      if (res.data.Response.Status === 'FINISHED') {
        clearInterval(_this32.transcodeIntervalMap[data.taskId]);

        _this32.elkLog.report('TEB_TRANSCODEPROGRESS', {
          extra_info: JSON.stringify(_result)
        });
      }
    }
  }, function (error) {
    var result = {
      status: 'ERROR',
      code: 'FailedOperation.SdkModule',
      message: 'transcode failure, request error',
      taskId: data.taskId,
      userData: _this32.taskIdUserDataMap[data.taskId]
    };

    _this32.event.fire(_this32, 'TEB_TRANSCODEPROGRESS', result);

    _this32.elkLog.report('TEB_TRANSCODEPROGRESS', {
      extra_info: JSON.stringify(result)
    });

    clearInterval(_this32.transcodeIntervalMap[data.taskId]);
  }).catch(function (error) {
    // 查询进度的catch
    var result = {
      status: 'ERROR',
      code: 'FailedOperation.SdkModule',
      message: 'transcode failure, ' + error.message,
      taskId: data.taskId,
      userData: _this32.taskIdUserDataMap[data.taskId]
    };

    _this32.event.fire(_this32, 'TEB_TRANSCODEPROGRESS', result);

    _this32.elkLog.report('TEB_TRANSCODEPROGRESS', {
      extra_info: JSON.stringify(result)
    });

    clearInterval(_this32.transcodeIntervalMap[data.taskId]);
  });
};

Store.prototype.destroy = function () {
  this.aegis.report('destroy');
  this.heartbeat && this.heartbeat.destroy();
  this.textInputTask && clearInterval(this.textInputTask); // 清空文本输入工具定时任务

  this.drawRaserTask && clearInterval(this.drawRaserTask); // 清空激光笔、铅笔图标定时任务

  this.sendInterval && clearInterval(this.sendInterval); // 清空实时消息定时发送任务
};

Store.prototype.addImageElement = function (url) {
  var _this34 = this;

  var boardId = this.getCurrentBoard();
  this.aegis.report('addImageElement', {
    boardId: boardId,
    url: url
  });

  var _addImageElement = function _addImageElement(url) {
    var _this33 = this;

    var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
    var imageElement = new _model_TEduBoardImageElement__WEBPACK_IMPORTED_MODULE_45__["default"]({
      belongSeq: seq,
      seq: seq,
      user: this.identifier,
      url: url,
      boardId: boardId,
      show: true
    });
    imageElement.getImageSize(this.boardWidth, this.boardHeight, this.getBoardScale(), function (res) {
      _this33.userData[boardId][_this33.identifier].push(imageElement);

      _this33.data[boardId].push(imageElement); // 加入操作


      _this33.opData[boardId].push(new _Operation__WEBPACK_IMPORTED_MODULE_26__["default"](_this33.identifier, {
        seq: imageElement.belongSeq,
        type: 'imageElement'
      }));

      _this33.opIndex[boardId]++;

      _this33.event.fire(_this33, 'TEB_OPERATE_CANREDO_STATUS_CHANGED', _this33.canRedo());

      _this33.event.fire(_this33, 'TEB_OPERATE_CANUNDO_STATUS_CHANGED', _this33.canUndo());

      _this33.setNeedDraw(true);

      _this33.addRealtimeData(imageElement.getRealTimeData());

      _this33.report.reportImageElement(imageElement.getReportData());
    });
  };

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isString(url)) {
    _addImageElement.call(this, url);

    this.event.fire(this, 'TEB_ADDIMAGEELEMENT', '', url, '');
  } else if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isObject(url)) {
    var fileObj = url;
    var fid = this.getCurrentFile();
    this.fileCos.uploadImgFile(fileObj, fid).then(function (res) {
      _addImageElement.call(_this34, res.fileUrl);

      _this34.event.fire(_this34, 'TEB_ADDIMAGEELEMENT', res.fileName, res.fileUrl, res.userData);
    });
  }
};

Store.prototype.updateImageElements = function (imageElements) {
  var _this35 = this;

  var reportData = [];
  imageElements.forEach(function (item) {
    _this35.addRealtimeData(item.getRealTimeData());

    reportData.push(item.getReportData());
  });
  this.report.reportImageElement(reportData);
};

Store.prototype.updateDragDataFromTextTool = function (xOffset, yOffset, scale) {
  var isNeedReport = false;

  if (this.dragDataList.getDragData(this.currentBoard)) {
    var dragData = this.getDragData();
    scale = Math.floor(scale ? dragData.scale / scale : dragData.scale);
    scale = Math.max(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MIN_SCALE, Math.min(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MAX_SCALE, scale));

    if (xOffset || yOffset || dragData.scale !== scale) {
      isNeedReport = true;
    }

    this.dragDataList.updateDragData(this.currentBoard, {
      scale: scale,
      xOffset: dragData.xOffset - xOffset,
      yOffset: dragData.yOffset - yOffset
    });
  } else {
    this.dragDataList.addDragData(this.currentBoard, new _model_DragModel__WEBPACK_IMPORTED_MODULE_42__["default"]({
      scale: this.getBoardScale(),
      // 缩放比
      xOffset: 50 - xOffset,
      yOffset: 50 - yOffset
    }));

    if (xOffset || yOffset) {
      // 如果初次存在有偏移量变化，则上报
      isNeedReport = true;
    }
  }

  if (isNeedReport) {
    this.addRealtimeData(this.dragDataList.getDragData(this.currentBoard).getRealTimeData());
    this.report.reportDrag(Object.assign(this.dragDataList.getDragData(this.currentBoard).getReportData(), {
      boardId: this.currentBoard
    }));
  }
};
/**
 * @description 企业微信机器人告警
 * @param {*} msgType
 * @param {*} content
 */


Store.prototype.machineNotify = function (msgType, content) {
  this.request.machineNotify(msgType, content);
};
/**
 * @description push实时数据
 * @param {*} data
 * @returns
 */


Store.prototype.addRealtimeData = function (data) {
  // 如果此时需要同步，则将数据加入到实时数据中
  if (this.dataSyncEnable) {
    // action协议增加boardId字段
    data.boardId = this.currentBoard;
    this.realTimeData.push(data);
  }
};

Store.prototype.addSendAckData = function (data) {
  var ack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  // 由于IM小程序下载文件消息存在bug / 全平台下载文件存在qps限制， 所有先禁用
  // 保留发送失败的数据
  if (this.dataSyncEnable) {
    try {
      data = JSON.parse(data);
    } catch (error) {}

    data.value.actions = data.value.actions.filter(function (item) {
      return item.action != 6;
    });

    if (this.sendAckDatas[data.seq]) {
      delete this.sendAckDatas[data.seq];
      console.log("ack send remove seq ".concat(data.seq, ", count ").concat(Object.keys(this.sendAckDatas).length));
    } else {
      if (!ack) {
        this.sendAckDatas[data.seq] = data;
      }

      console.log("ack send add seq ".concat(data.seq, ", count ").concat(Object.keys(this.sendAckDatas).length));
    }
  }
};

Store.prototype.addReportAckData = function (datas) {
  var _this36 = this;

  var ack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  // 保留发送失败的数据
  datas.forEach(function (data, index) {
    if (_this36.reportAckDatas[data.seq]) {
      delete _this36.reportAckDatas[data.seq];
      console.log("ack report remove seq ".concat(data.seq, ", count ").concat(Object.keys(_this36.reportAckDatas).length));
    } else {
      if (!ack) {
        _this36.reportAckDatas[data.seq] = data;
      }

      console.log("ack report add seq ".concat(data.seq, ", count ").concat(Object.keys(_this36.reportAckDatas).length));
    }
  });
};

Store.prototype.syncAndReload = function () {
  var _this37 = this;

  if (!this.permissions) {
    return;
  } /// #endif


  var reportLength = Object.keys(this.reportAckDatas).length;

  if (reportLength) {
    this.request.reportMsg(Object.values(this.reportAckDatas), function (data, resp) {
      _this37.syncHistroyData();
    });
    this.elkLog.report('sync_report_failed', {
      extra_info: JSON.stringify({
        count: reportLength
      })
    });
    this.reportAckDatas = {};
  } else {
    this.syncHistroyData();
  }

  var sendLength = Object.keys(this.sendAckDatas).length;

  if (sendLength > 0) {
    var sendData = null;
    Object.values(this.sendAckDatas).forEach(function (data, index) {
      if (sendData == null) {
        sendData = data;
      } else {
        if (data.timestamp > sendData.timestamp) {
          sendData.timestamp = data.timestamp;
          sendData.seq = data.seq;
        }

        sendData.value.actions.push.apply(sendData.value.actions, data.value.actions);
      }
    });
    this.fireSyncDataEvent(this.getCurrentBoard(), sendData);
    this.elkLog.report('sync_send_failed', {
      extra_info: JSON.stringify({
        count: sendLength
      })
    });
    this.sendAckDatas = {};
  }
};
/**
 * @description 设置图片加载超时时间
 */


Store.prototype.setImageTimeout = function () {
  var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].IMAGE_TIMEOUT;

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isNumber(timeout)) {
    timeout = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].IMAGE_TIMEOUT;
  }

  this.imageTimeout = timeout;
  this.elkLog.report('call_method', {
    extra_info: JSON.stringify({
      method: 'setImageTimeout',
      data: timeout
    })
  });
};

Store.prototype.getImageTimeout = function () {
  return this.imageTimeout;
};

Store.prototype.setHandwritingEnable = function (enable) {
  this.enableHandwriting = enable;
};

Store.prototype.isHandwritingEnable = function () {
  return this.enableHandwriting;
};

Store.prototype.addH5Element = function (seq, params) {
  var _this38 = this;

  var boardId = this.getCurrentBoard();
  var element = new _component_TEduBoardH5WebElement__WEBPACK_IMPORTED_MODULE_47__["default"]({
    belongSeq: seq,
    seq: seq,
    user: this.identifier,
    url: params.url,
    boardId: boardId,
    onloadDone: function onloadDone() {
      _this38.event.fire(_this38, _event_TEduEvent__WEBPACK_IMPORTED_MODULE_46__["default"].commonEvent.TEB_ADDELEMENT, {
        id: String(seq),
        userData: params.userData || ''
      });

      _this38.addRealtimeData(element.getRealTimeData());

      _this38.report.reportElement(element.getReportData());
    }
  });
  element.setProperty({
    show: true,
    x: 0,
    y: 0
  });
  this.userData[boardId][this.identifier].push(element);
  this.data[boardId].push(element);
  this.elementMap.set(String(element.belongSeq), element);
  this.setNeedDraw(true);
  return element;
};

Store.prototype.addElement = function (params) {
  var seq = _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq();
  this.aegis.report('addElement', Object.assign({
    seq: seq,
    boardId: boardId
  }, params));
  var boardId = this.getCurrentBoard();

  if (params.type === _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_49__["default"].TEDU_BOARD_ELEMENT_H5) {
    this.addH5Element(seq, params);
  }

  return seq.toString();
};

Store.prototype.removeElement = function (id) {
  var element = this.elementMap.get(id);

  if (!element) {
    return false;
  }

  element.show = false;

  if (element.subType === _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_49__["default"].TEDU_BOARD_ELEMENT_H5) {
    this.elementMap.delete(id);
    element.remove();
    this.addRealtimeData(element.getRealTimeData());
    this.report.reportDisplayLine({
      boardId: this.currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      display: 0,
      lines: [{
        uid: element.user,
        seq: element.belongSeq
      }]
    });
  }

  return true;
};
/**
 * 申请文件转码
 */


Store.prototype.applyFileTranscode = function (fileObj, config) {
  var _this39 = this;

  var fileName = '';

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isObject(fileObj)) {
    var userData = fileObj.userData;

    if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isFile(fileObj.data)) {
      fileName = fileObj.data.name;
    } else {
      fileName = fileObj.name;
    } // 不再支持图片上传


    if (/\.(bmp|jpg|jpeg|png|gif|webp|svg|psd|ai)/i.test(fileName)) {
      var result = {
        code: 'FailedOperation.SdkModule',
        message: 'transcode does not support image',
        userData: userData,
        status: 'ERROR'
      };
      this.event.fire(this, 'TEB_TRANSCODEPROGRESS', result);
      this.elkLog.report('TEB_TRANSCODEPROGRESS', {
        extra_info: JSON.stringify(result)
      });
      return;
    } else {
      // 上传要转码的文件
      this.fileCos.transcodeUploadFile(fileObj).then(function (data) {
        var fileCosUrl = "https://".concat(data.Bucket, ".file.myqcloud.com/").concat(data.Key);

        if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isObject(config)) {
          config = Object.assign(config, {
            url: fileCosUrl
          });
        } else {
          config = {
            url: fileCosUrl
          };
        } // 发起转码


        _this39.createTranscode(config).then(function (res) {
          var result = null; // 如果有错误

          if (res.data.Response.Error) {
            result = {
              code: res.data.Response.Error.Code,
              message: res.data.Response.Error.Message,
              status: 'ERROR',
              userData: userData
            };

            _this39.event.fire(_this39, 'TEB_TRANSCODEPROGRESS', result);
          } else {
            result = Object.assign({}, _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].CamelCase2camelCase(res.data.Response), {
              code: '',
              message: '',
              userData: userData,
              status: 'CREATED'
            });

            _this39.event.fire(_this39, 'TEB_TRANSCODEPROGRESS', result);

            var taskId = res.data.Response.TaskId;
            _this39.transcodeIntervalMap[taskId] = setInterval(function () {
              // 查询进度
              _this39.describeTranscode({
                taskId: taskId
              });
            }, 5000);
            _this39.taskIdUserDataMap[taskId] = userData;
          }

          _this39.elkLog.report('TEB_TRANSCODEPROGRESS', {
            extra_info: JSON.stringify(result)
          });
        }, function (error) {
          var result = {
            code: 'FailedOperation.SdkModule',
            message: 'transcode failure, request error',
            userData: userData,
            status: 'ERROR'
          };

          _this39.event.fire(_this39, 'TEB_TRANSCODEPROGRESS', result);

          _this39.elkLog.report('TEB_TRANSCODEPROGRESS', {
            extra_info: JSON.stringify(result)
          });
        }).catch(function (error) {
          // 发起转码的catch
          var result = {
            code: 'FailedOperation.SdkModule',
            message: 'transcode failure, ' + error.message,
            userData: userData,
            status: 'ERROR'
          };

          _this39.event.fire(_this39, 'TEB_TRANSCODEPROGRESS', result);

          _this39.elkLog.report('TEB_TRANSCODEPROGRESS', {
            extra_info: JSON.stringify(result)
          });
        });
      }).catch(function (err) {
        // 上传文件的catch
        var result = {
          status: 'ERROR',
          code: 'FailedOperation.SdkModule',
          message: 'upload file failure, ' + err.message,
          userData: userData
        };

        _this39.event.fire(_this39, 'TEB_TRANSCODEPROGRESS', result);

        _this39.elkLog.report('TEB_TRANSCODEPROGRESS', {
          extra_info: JSON.stringify(result)
        });
      });
    }
  } else {
    var _result2 = {
      code: 'FailedOperation.SdkModule',
      message: 'invalid arguments',
      status: 'ERROR',
      userData: ''
    };
    this.event.fire(this, 'TEB_TRANSCODEPROGRESS', _result2);
    this.elkLog.report('TEB_TRANSCODEPROGRESS', {
      extra_info: JSON.stringify(_result2)
    });
  }
};

Store.prototype._setBackgroundImage = function (url) {
  var _this40 = this;

  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_48__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER;
  var currentBoardId = this.getCurrentBoard();

  if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isString(url)) {
    this.setBackgroundPic(currentBoardId, url, mode);
    this.event.fire(this, 'TEB_SETBACKGROUNDIMAGE', '', url, '');
  } else if (_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].isObject(url)) {
    var fileObj = url;
    var fid = this.getCurrentFile();
    this.fileCos.uploadImgFile(fileObj, fid).then(function (res) {
      _this40.setBackgroundPic(currentBoardId, res.fileUrl, mode);

      _this40.event.fire(_this40, 'TEB_SETBACKGROUNDIMAGE', res.fileName, res.fileUrl, res.userData);
    }).catch(function (error) {});
  }
};

Store.prototype.uploadBoardMessageToCos = function (message) {
  var _this41 = this;

  var fileName = "".concat(this.user, "_").concat(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].formatDateTime(_util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp()), ".txt");
  var file = new File([message], fileName, {
    type: "text/plain"
  });
  return new Promise(function (resolve, reject) {
    _this41.fileCos.upload({
      bucket: _this41.fileMessageCosInfo.bucket,
      appid: _this41.fileMessageCosInfo.appid,
      region: _this41.fileMessageCosInfo.region,
      body: file,
      path: '/message/' + _this41.options.tlsData.sdkAppId + '/' + _this41.options.classId + '/' + file.name
    }).then(function (data) {
      var bucket = data.Bucket.substr(0, data.Bucket.lastIndexOf('-'));
      var url = "https://".concat(bucket, ".").concat(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].CDN_DOMAIN, "/").concat(data.Key);
      resolve(url);
    }, function (error) {
      reject(error);
    });
  });
};
/**
 * 解析文件消息
 */


Store.prototype.resolveFileMessage = function (action) {
  var _this42 = this;

  var url = action.url;
  this.request.requestFileMessage(url).then(function (res) {
    if (res.status === 200) {
      _this42.addData(res.data);

      _this42.setNeedDraw();
    }
  }, function (error) {});
};
/**
 * 获取文件的放大比例
 */


Store.prototype.getFileScale = function () {
  var fid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentGroup;
  var scale;
  var fileInfo = this.getFileInfo(fid);

  if (fileInfo) {
    scale = fileInfo.scale;
  }

  if (!scale) {
    scale = this.scale;
  }

  return scale;
};
/**
 * 设置文件的放大比例
 */


Store.prototype.setFileScale = function (fid, scale) {
  var _this43 = this;

  var file = this.getFileInfo(fid);

  if (file) {
    scale = Math.max(_config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MIN_SCALE, Math.min(scale, _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].MAX_SCALE));

    if (isNaN(scale)) {
      scale = _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].SCALE;
    }

    file.scale = scale;
    var actionData = {
      action: _config_Config__WEBPACK_IMPORTED_MODULE_22__["default"].PROTOCOL_ACTION.FILE_SCALE_ACTION,
      time: _util_util__WEBPACK_IMPORTED_MODULE_24__["default"].getTimeStamp(),
      seq: _util_Seq__WEBPACK_IMPORTED_MODULE_25__["default"].getSeq(),
      fid: fid,
      scale: scale
    };
    var dragDataList = this.dragDataList.getDragDataByFid(fid);
    dragDataList.forEach(function (item) {
      _this43.dragDataList.updateDragData(item.bid, {
        scale: scale // 缩放比

      });
    });
    this.addRealtimeData(actionData);
    this.report.reportAddFile(Object.assign({}, file, {
      isUpdateScale: 1
    }));
    this.report.reportSwitchBoard({
      boardId: this.currentBoard,
      fid: file.fid,
      url: file.downloadURL,
      type: file.type,
      page: file.currentPageIndex,
      step: file.currentPageStep,
      ratio: file.ratio,
      scale: file.scale // 更新scale

    });
    this.setNeedDraw(true);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (Store);

/***/ }),

/***/ "./src/board/TextAreaComponent.js":
/*!****************************************!*\
  !*** ./src/board/TextAreaComponent.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
/* harmony import */ var core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../model/TEduBoardTextStyle */ "./src/model/TEduBoardTextStyle.js");






function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



/**
 *
 * 在iOS8上存在问题，会出现重复的文字，原因1：改变光标位置  2. 对dom的value值进行截取和拼接
 * @class TextAreaComponent
 */

var TextAreaComponent =
/*#__PURE__*/
function () {
  function TextAreaComponent(options) {
    _classCallCheck(this, TextAreaComponent);

    this.boardId = options.boardId;
    this.lineHeight = 1;
    this.measureTextElement = document.getElementById('tic_measuretext__tool');
    this.dpr = window.devicePixelRatio || window.webkitDevicePixelRatio || window.mozDevicePixelRatio || 1;
    this.board = options.board;
  }

  _createClass(TextAreaComponent, [{
    key: "createElement",
    value: function createElement(textContainer) {
      this.textContainer = textContainer;
      this.dom = document.createElement('textarea');
      this.dom.setAttribute('spellcheck', false);
      textContainer.appendChild(this.dom);
      this.initStyle();
    }
  }, {
    key: "initStyle",
    value: function initStyle() {
      Object.assign(this.dom.style, {
        'position': 'absolute',
        'z-index': 9,
        'box-sizing': 'content-box',
        'outline': 'none',
        'resize': 'none',
        'word-break': 'break-all',
        'overflow': 'hidden',
        'background': 'transparent',
        'line-height': this.lineHeight + 'px',
        'border': '1px dotted transparent',
        'font-family': 'customFontFamily',
        'margin': 0,
        'padding': 0,
        'white-space': 'pre-wrap',
        'border-radius': 0
      });
    }
  }, {
    key: "initEvent",
    value: function initEvent(eventConfig) {
      var _this = this;

      this.eventConfig = eventConfig;

      this.dom.ontouchstart = function (event) {
        console.error('TextAreaComponent ontouchstart');
        event.stopPropagation();
      };

      this.dom.ontouchmove = function (event) {
        console.error('TextAreaComponent ontouchmove');
        event.stopPropagation();
      };

      this.dom.ontouchend = function (event) {
        console.error('TextAreaComponent ontouchend');
        event.stopPropagation();
      };

      this.dom.ontouchcancel = function (event) {
        console.error('TextAreaComponent ontouchcancel');
        event.stopPropagation();
      };

      this.dom.onmousedown = function (event) {
        console.error('TextAreaComponent onmousedown');
        event.stopPropagation();
      };

      this.dom.onmousemove = function (event) {
        // console.error('TextAreaComponent onmousemove');
        event.stopPropagation();
      };

      this.dom.onmouseup = function (event) {
        console.error('TextAreaComponent onmouseup');
        event.stopPropagation();
      };

      this.dom.onmouseleave = function (event) {
        console.error('TextAreaComponent onmouseleave');
        event.stopPropagation();
      };

      this.dom.onfocus = null;

      this.dom.onfocus = function () {
        console.error('TextAreaComponent onfocus'); // let realSize = this.fontScale * this.fontSize;
        // if (this.maxHeight - 2 <= realSize || this.maxWidth - 2 <= realSize * 2) { // * 2的原因 自身的空间 + 预留一个字符的空间
        //   setTimeout(()=>{
        //     this.dom.blur();
        //   }, 1000);
        //   return;
        // }

        if (_this.board.getToolType() != 11) {
          // 如果不是文字工具
          _this.dom.blur();

          return;
        }

        _this.initStyle();

        var _this$_calcShowFullTe = _this._calcShowFullText(),
            scale = _this$_calcShowFullTe.scale,
            dragOffsetX = _this$_calcShowFullTe.dragOffsetX,
            dragOffsetY = _this$_calcShowFullTe.dragOffsetY; // 第一次先缩放


        eventConfig.onfocus && eventConfig.onfocus(_this, dragOffsetX, dragOffsetY, scale);

        var _this$_calcShowFullTe2 = _this._calcShowFullText(),
            scale2 = _this$_calcShowFullTe2.scale,
            dragOffsetX2 = _this$_calcShowFullTe2.dragOffsetX,
            dragOffsetY2 = _this$_calcShowFullTe2.dragOffsetY; // 第二次按第一次缩放后计算平移


        eventConfig.onfocus && eventConfig.onfocus(_this, dragOffsetX2, dragOffsetY2, scale2);

        _this.showBorder(true);
      };

      this.dom.compositionLock = false; // 标记是否通过中文输入法的输入

      this.dom.addEventListener("compositionstart", function () {
        console.log('>>>>>> compositionstart');
        _this.dom.compositionLock = true;
      }); // 在ios8,9,10中，执行都顺序为oninput, compositionend, oninput (出现重复都情况，猜测为compositionend改变了值，然后在oninput之前又被系统改了一次，则出现了重复都值)
      // 在chrome中顺序为 oninput,oninput,compositionend

      this.dom.addEventListener("compositionend", function (e) {
        console.log('>>>>>> compositionend', _this.dom.compositionLock);

        if (_util_util__WEBPACK_IMPORTED_MODULE_5__["default"].isIOS8910()) {
          setTimeout(function () {
            _this.smartPaintText(e);
          }, 0);
        } else {
          _this.smartPaintText(e);
        }
      });
      this.dom.oninput = null;

      this.dom.oninput = function (e) {
        var splitSymbol = '\n\f';
        console.log('>>>>>> oninput 中文输入法：', _this.dom.compositionLock, _this.dom.value, _this.dom.value.indexOf(splitSymbol));

        if (!_this.dom.compositionLock) {
          _this.smartPaintText(e);
        } else if (_this.dom.value.indexOf(splitSymbol) === -1 && _this.dom.value.indexOf('\n') === -1) {
          _this.setSize();

          var maxWidth = Number(_this.dom.style.maxWidth.replace('px', ''));
          var realWidth = Number(_this.dom.style.width.replace('px', ''));

          if (realWidth > maxWidth) {
            var lineNumber = Math.ceil(realWidth / maxWidth); // 行数

            _this.dom.style.height = _this.dom.style.height.replace('px', '') * lineNumber + 'px';
          }
        }
      };

      this.dom.onblur = null;

      this.dom.onblur = function () {
        console.error('TextAreaComponent onblur');

        _this.showBorder(false); // 如果是空的内容，则删除该节点


        if (_this.dom.value === '' || _this.dom.value.trim() === '') {
          _this.textItem.show = false;

          _this.remove();
        }

        eventConfig.onblur && eventConfig.onblur(_this);
      };
    }
  }, {
    key: "smartPaintText",
    value: function smartPaintText(e) {
      var _this2 = this;

      var selectionStart = _util_util__WEBPACK_IMPORTED_MODULE_5__["default"].isIOS8910() ? this.dom.selectionEnd : this.dom.selectionStart;
      var splitSymbol = '\n\f';
      var isNeedDeleteSpaceSymbol = false; // 是否需要删除最后的换行补充的空字符

      this.dom.compositionLock = false;
      var minusCharCount = 0; // 累加替换掉的换行符

      if (this.dom.value.indexOf(splitSymbol) > -1) {
        // 替换掉主动加的换行符
        var reg = new RegExp(splitSymbol, 'g');
        this.dom.value = this.dom.value.replace(reg, function (match, index) {
          if (index < selectionStart) {
            minusCharCount += splitSymbol.length;
          }

          return '';
        });
      }

      selectionStart -= minusCharCount;

      if (this.dom.value.substr(this.dom.value.length - 1) == '\n') {
        // 如果最后一个字符是手动换行，则在后面追加一个空字符，用来给测量节点测量
        this.dom.value = this.dom.value + ' ';
        this.measureTextElement.textContent = this.dom.value;
        isNeedDeleteSpaceSymbol = true;
      } else {
        this.measureTextElement.textContent = this.dom.value;
      }

      var breakLine = 0; // 换行索引

      for (var i = 0; i < this.dom.value.length; i++) {
        var char = this.dom.value[i];

        if (char === '\n' || char === splitSymbol) {// 换行符不影响在div测量
        } else {
          this.measureTextElement.textContent = this.dom.value.substring(breakLine, i + 1); // 截取掉自动换行部分

          if (this.getMeasureTextToolComputedStyle('width') > this.dom.style.maxWidth.replace('px', '') - this.fontSize) {
            if (i < selectionStart) {
              // 如果换行是在光标之前
              selectionStart += splitSymbol.length;
              console.info('selectionStart 换行:', selectionStart);
            }

            breakLine = i + 1;
            this.dom.value = this.dom.value.substring(0, i) + splitSymbol + this.dom.value.substring(i);
            this.measureTextElement.textContent = this.dom.value;
          }

          this.measureTextElement.textContent = this.dom.value.substring(0, i + 1);

          if (this.getMeasureTextToolComputedStyle('height') > this.dom.style.maxHeight.replace('px', '') * 1) {
            // 当高度超出最大高度后，需要截取到最后一行(不需要保留最后的空字符)
            this.dom.value = this.dom.value.substring(0, Math.max(this.dom.value.lastIndexOf('\n'), this.dom.value.lastIndexOf(splitSymbol)));
            this.measureTextElement.textContent = this.dom.value;
            isNeedDeleteSpaceSymbol = false; // 因为已经删除掉了

            break;
          }
        }
      }

      this.setSize();

      if (isNeedDeleteSpaceSymbol) {
        // 如果需要删除换行后的补充空字符
        if (this.dom.value.charAt(this.dom.value.length - 1) == ' ') {
          this.dom.value = this.dom.value.substring(0, this.dom.value.length - 1);
        }
      }

      if (this.dom.setSelectionRange) {
        this.dom.setSelectionRange(selectionStart, selectionStart);
      } else {
        this.dom.selectionStart = selectionStart;
        this.dom.selectionEnd = selectionStart;
      }

      var _this$_calcShowFullTe3 = this._calcShowFullText(),
          scale = _this$_calcShowFullTe3.scale,
          dragOffsetX = _this$_calcShowFullTe3.dragOffsetX,
          dragOffsetY = _this$_calcShowFullTe3.dragOffsetY;

      this.eventConfig.oninput && this.eventConfig.oninput(this, dragOffsetX, dragOffsetY, scale);

      var _this$_calcShowFullTe4 = this._calcShowFullText(),
          scale2 = _this$_calcShowFullTe4.scale,
          dragOffsetX2 = _this$_calcShowFullTe4.dragOffsetX,
          dragOffsetY2 = _this$_calcShowFullTe4.dragOffsetY;

      this.eventConfig.oninput && this.eventConfig.oninput(this, dragOffsetX2, dragOffsetY2, scale2);
      setTimeout(function () {
        if (_this2.dom.scrollTop) {
          _this2.smartPaintText(e);
        }
      }, 0);
    }
  }, {
    key: "setTextItem",
    value: function setTextItem(textItem) {
      this.dom.id = "tic-textarea__".concat(textItem.belongSeq);
      this.dom.value = textItem.text;
      this.textItem = textItem;
      this.setTextStyle();
    }
  }, {
    key: "setFontSize",
    value: function setFontSize(fontSize) {
      this.fontSize = fontSize;
      this.lineHeight = this.fontSize;
      this.dom.style.fontSize = fontSize + 'px';
      this.dom.style.minWidth = this.fontSize + 'px';
      this.dom.style.minHeight = this.fontSize + 'px'; // this.dom.style.width = this.fontSize + 'px';
      // this.dom.style.height = this.fontSize + 'px';

      this.dom.style.lineHeight = this.fontSize + 'px';
      this.measureTextElement.style.fontSize = (this.fontSize / this.dpr).toFixed(4) + 'px';
      this.measureTextElement.style.lineHeight = (this.fontSize / this.dpr).toFixed(4) + 'px';
    }
  }, {
    key: "setMaxSize",
    value: function setMaxSize() {
      // 点到白板右边界的距离
      var _util$calcPointAndBoa = _util_util__WEBPACK_IMPORTED_MODULE_5__["default"].calcPointAndBoardRightBorderDistance(this.boardWidth, this.containerWidth, this.boardHeight, this.containerHeight, this.textItem.location.x, this.textItem.location.y),
          distanceX = _util$calcPointAndBoa.distanceX,
          distanceY = _util$calcPointAndBoa.distanceY;

      this.maxWidth = distanceX - 2; // 减去边框

      this.maxHeight = distanceY - 2; // 减去边框

      this.dom.style.maxWidth = this.maxWidth + 'px';
      this.dom.style.maxHeight = this.maxHeight + 'px';
    }
  }, {
    key: "setPosition",
    value: function setPosition(left, top) {
      this.dom.style.left = left + 'px';
      this.dom.style.top = top + 'px';
    }
  }, {
    key: "showBorder",
    value: function showBorder(show) {
      this.dom.style.border = "1px dashed ".concat(show ? 'red' : 'transparent');
    }
  }, {
    key: "focus",
    value: function focus() {
      var allow = this.isAllowShowInput(); // 是否允许显示该text

      console.error('TextAreaComponent allow', allow);

      if (allow) {
        this.dom.focus();
      } else {
        this.remove();
      }

      return allow;
    }
  }, {
    key: "setFontScale",
    value: function setFontScale(fontScale) {
      this.fontScale = fontScale;
      this.dom.style.transformOrigin = '0 0'; // 左上角缩放

      this.dom.style.transform = "scale(".concat(fontScale, ")");
      this.dom.style.webkitTransformOrigin = '0 0'; // 左上角缩放

      this.dom.style.webkitTransform = "scale(".concat(fontScale, ")");
      this.dom.style.maxWidth = this.maxWidth / fontScale + 'px';
      this.dom.style.maxHeight = this.maxHeight / fontScale + 'px';
      this.measureTextElement.style.transformOrigin = '0 0'; // 左上角缩放

      this.measureTextElement.style.transform = "scale(".concat(fontScale, ")");
      this.measureTextElement.style.webkitTransformOrigin = '0 0'; // 左上角缩放

      this.measureTextElement.style.webkitTransform = "scale(".concat(fontScale, ")"); // 对实际宽度没有影响
    }
    /**
     *
     * 设置文字样式
     * @memberof TextAreaComponent
     */

  }, {
    key: "setTextStyle",
    value: function setTextStyle() {
      var style = {
        color: this.textItem.color
      };
      var fontStyle = this.textItem.fontStyle; // 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；

      if (fontStyle === _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_6__["default"].TEDU_BOARD_TEXT_STYLE_NORMAL) {
        style['fontStyle'] = 'normal';
        style['fontWeight'] = 'normal';
      } else if (fontStyle === _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_6__["default"].TEDU_BOARD_TEXT_STYLE_BOLD) {
        style['fontStyle'] = 'normal';
        style['fontWeight'] = 'bold';
      } else if (fontStyle === _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_6__["default"].TEDU_BOARD_TEXT_STYLE_ITALIC) {
        style['fontStyle'] = 'italic';
        style['fontWeight'] = 'normal';
      } else if (fontStyle === _model_TEduBoardTextStyle__WEBPACK_IMPORTED_MODULE_6__["default"].TEDU_BOARD_TEXT_STYLE_BOLD_ITALIC) {
        style['fontStyle'] = 'italic';
        style['fontWeight'] = 'bold';
      }

      for (var p in style) {
        this.dom.style[p] = style[p];
      }
    }
  }, {
    key: "setSize",
    value: function setSize(value) {
      value = value || this.dom.value; // 如果最后是换行

      if (value.substr(value.length - 1) == '\n') {
        // 如果最后一个字符是手动换行，则在后面追加一个空字符，用来给测量节点测量
        this.measureTextElement.textContent = value + ' ';
      } else {
        this.measureTextElement.textContent = value;
      }

      var measureWidth, measureHeight;

      if (_util_util__WEBPACK_IMPORTED_MODULE_5__["default"].isIOS()) {
        // 如果是ios 需要+6个像素
        measureWidth = this.getMeasureTextToolComputedStyle('width') + 6 + 'px';
      } else {
        measureWidth = this.getMeasureTextToolComputedStyle('width', 'px');
      }

      measureHeight = this.getMeasureTextToolComputedStyle('height', 'px');

      if (this.dom.style.width != measureWidth) {
        this.dom.style.width = measureWidth;
      }

      if (this.dom.style.height != measureHeight) {
        this.dom.style.height = measureHeight;
      } // 同步设置一下


      this.textItem.textWidth = (2 + this.dom.style.width.replace('px', '') * 1) / this.boardWidth * 10000 * this.fontScale;
      this.textItem.textHeight = this.dom.style.height.replace('px', '') / this.boardHeight * 10000 * this.fontScale;
      this.eventConfig && this.eventConfig.onresize && this.eventConfig.onresize(this);
    }
  }, {
    key: "remove",
    value: function remove() {
      var _this3 = this;

      // 变成异步操作，在blur中调用remove会报错 Failed to execute 'remove' on 'Element': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler
      setTimeout(function () {
        _this3.dom && _this3.dom.remove();
      }, 0);
    }
    /**
     *
     * 测量文字的宽高 safari 支持小于12px  chrome则不支持， 其他浏览器未知
     * @param {*} sizeKey
     * @param {*} unit
     * @returns
     * @memberof TextAreaComponent
     */

  }, {
    key: "getMeasureTextToolComputedStyle",
    value: function getMeasureTextToolComputedStyle(sizeKey, unit) {
      var value;
      var computedStyle = window.getComputedStyle(this.measureTextElement);
      var size = computedStyle[sizeKey].replace('px', '') * 1;
      var realFontSize = computedStyle['fontSize'].replace('px', '') * 1;
      var realLineHeight = computedStyle['lineHeight'].replace('px', '') * 1;

      if (sizeKey === 'width') {
        // 没有tbs的android机器，realFontSize=4.3636  有tbs的android机器，realFontSize=8  (this.fontSize / this.dpr).toFixed(4) = 4.3636 
        if (realFontSize > (this.fontSize / this.dpr).toFixed(4) && realFontSize >= 12) {// 说明是chrome浏览器，字号不能小于12px，则不需要乘以dpr
          // 不需要乘以dpr
        } else {
          size = size * 12 / realFontSize;
        }
      } else if (sizeKey === 'height') {
        var lineCount = this.measureTextElement.textContent.split('\n').length; // if (realLineHeight > (this.fontSize / this.dpr).toFixed(4)) { // 在chrome的高度是可以小于12px
        //   // 不需要乘以dpr
        // } else {
        //   size = size * this.dpr;
        // }

        size = realLineHeight * lineCount * this.dpr;
      } else {
        size = size * this.dpr;
      }

      size = Math.ceil(size);

      if (unit) {
        value = size + unit;
      } else {
        value = size;
      } // console.info('getMeasureTextToolComputedStyle:', ' key:', sizeKey, ' value:', value);


      return value;
    }
  }, {
    key: "setBoardContainerSize",
    value: function setBoardContainerSize(boardWidth, containerWidth, boardHeight, containerHeight) {
      this.boardWidth = boardWidth;
      this.containerWidth = containerWidth;
      this.boardHeight = boardHeight;
      this.containerHeight = containerHeight;
    }
    /**
     *
     *将文字工具显示完全，需要计算的偏移量和缩放量
     * @returns
     * @memberof TextAreaComponent
     */

  }, {
    key: "_calcShowFullText",
    value: function _calcShowFullText() {
      // 点到白板容器右边距离
      var _util$calcPointAndCon = _util_util__WEBPACK_IMPORTED_MODULE_5__["default"].calcPointAndContainerRightBorderDistance(this.boardWidth, this.containerWidth, this.boardHeight, this.containerHeight, this.textContainer.style.left.replace('%', ''), this.textContainer.style.top.replace('%', ''), this.textItem.location.x, this.textItem.location.y),
          rightDistanceX = _util$calcPointAndCon.distanceX,
          bottomDistanceY = _util$calcPointAndCon.distanceY; // 点到白板容器左边距离


      var _util$calcPointAndCon2 = _util_util__WEBPACK_IMPORTED_MODULE_5__["default"].calcPointAndContainerLeftBorderDistance(this.boardWidth, this.containerWidth, this.boardHeight, this.containerHeight, this.textContainer.style.left.replace('%', ''), this.textContainer.style.top.replace('%', ''), this.textItem.location.x, this.textItem.location.y),
          leftDistanceX = _util$calcPointAndCon2.distanceX,
          topDistanceY = _util$calcPointAndCon2.distanceY;

      var textWidth = this.dom.style.width.replace('px', '') * this.fontScale + 12 * this.fontScale,
          textHeight = this.dom.style.height.replace('px', '') * this.fontScale + 12 * this.fontScale;
      var dragOffsetX = 0;
      var dragOffsetY = 0;
      var xScale = 0,
          yScale = 0; // 文字的宽度超出了容器，此时需要进行缩放

      if (textWidth > this.containerWidth) {
        xScale = (textWidth + 12 * this.fontScale) / this.containerWidth;
      } else {
        if (leftDistanceX < 0) {
          // 说明点在容器的左边了，显示不出来，需要移动
          dragOffsetX = (leftDistanceX - 12 * this.fontScale) / this.boardWidth * 100;
        } else if (rightDistanceX < textWidth) {
          // 最右边的文字也超出了容器右边，显示不出来，需要移动
          dragOffsetX = (textWidth - rightDistanceX) / this.boardWidth * 100;
        } else {
          dragOffsetX = 0;
        }
      } // 文字高度超出了容器（则需要缩放）


      if (textHeight > this.containerHeight) {
        yScale = (textHeight + 12 * this.fontScale) / this.containerHeight;
      } else {
        if (topDistanceY < 0) {
          // 说明点在容器的左边了，显示不出来，需要移动
          dragOffsetY = (topDistanceY - 12 * this.fontScale) / this.boardHeight * 100;
        } else if (bottomDistanceY < textHeight) {
          // 最右边的文字也超出了容器右边，显示不出来，需要移动
          dragOffsetY = (textHeight - bottomDistanceY) / this.boardHeight * 100;
        } else {
          dragOffsetY = 0;
        }
      }

      var scale = 0;

      if (xScale > 0 && yScale > 0) {
        scale = Math.max(xScale, yScale);
      } else if (xScale == 0 && yScale == 0) {
        scale = 0;
      } else {
        scale = Math.max(xScale, yScale);
      }

      return {
        scale: scale,
        dragOffsetX: dragOffsetX,
        dragOffsetY: dragOffsetY
      };
    }
  }, {
    key: "isAllowShowInput",
    value: function isAllowShowInput() {
      var realSize = this.fontScale * this.fontSize;

      if (this.maxHeight - 2 <= realSize || this.maxWidth - 2 <= realSize * 2) {
        // * 2的原因 自身的空间 + 预留一个字符的空间
        return false;
      } else {
        return true;
      }
    }
  }]);

  return TextAreaComponent;
}();

/* harmony default export */ __webpack_exports__["default"] = (TextAreaComponent);

/***/ }),

/***/ "./src/component/TEduBoardElement.js":
/*!*******************************************!*\
  !*** ./src/component/TEduBoardElement.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TEduBoardElement =
/*#__PURE__*/
function () {
  function TEduBoardElement() {
    _classCallCheck(this, TEduBoardElement);

    this.user = null;
    this.type = 'element';
    this.left = 0;
    this.top = 0;
    this.x = 0;
    this.y = 0;
    this.container = null;
    this.width = 0; // 归一化宽度取值范围[0, 10000]

    this.height = 0; // 归一化高度取值范围[0, 10000]

    this.boardWidth = 0;
    this.boardHeight = 0;
    this.show = true; // 图片在矩形区域的边界

    this.rectArea = {
      maxX: 0,
      maxY: 0,
      minX: 0,
      minY: 0
    };
  }

  _createClass(TEduBoardElement, [{
    key: "setBoardSize",
    value: function setBoardSize(boardWidth, boardHeight) {
      this.boardWidth = boardWidth;
      this.boardHeight = boardHeight;
      this.left = this.boardWidth * this.x / 10000;
      this.top = this.boardHeight * this.y / 10000;
    }
    /**
     * @brief 获取实时数据
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "getRealTimeData",
    value: function getRealTimeData() {}
    /**
     * @brief 获取上报数据
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "getReportData",
    value: function getReportData() {}
  }]);

  return TEduBoardElement;
}();

/* harmony default export */ __webpack_exports__["default"] = (TEduBoardElement);

/***/ }),

/***/ "./src/component/TEduBoardH5WebElement.js":
/*!************************************************!*\
  !*** ./src/component/TEduBoardH5WebElement.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.object.set-prototype-of */ "./node_modules/core-js/modules/es6.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es6_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_set_prototype_of__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _util_Seq__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/Seq */ "./src/util/Seq.js");
/* harmony import */ var _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../model/TEduBoardH5WebEvent */ "./src/model/TEduBoardH5WebEvent.js");
/* harmony import */ var _model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../model/TEduBoardIFrameModule */ "./src/model/TEduBoardIFrameModule.js");
/* harmony import */ var _TEduBoardElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./TEduBoardElement */ "./src/component/TEduBoardElement.js");
/* harmony import */ var _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../model/TEduBoardElementType */ "./src/model/TEduBoardElementType.js");




function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }









var TEduBoardH5WebElement =
/*#__PURE__*/
function (_TEduBoardElement) {
  _inherits(TEduBoardH5WebElement, _TEduBoardElement);

  function TEduBoardH5WebElement(params) {
    var _this;

    _classCallCheck(this, TEduBoardH5WebElement);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TEduBoardH5WebElement).call(this));
    _this.subType = _model_TEduBoardElementType__WEBPACK_IMPORTED_MODULE_9__["default"].TEDU_BOARD_ELEMENT_H5;
    _this.boardId = params.boardId;
    _this.belongSeq = params.belongSeq;
    _this.url = params.url;
    _this.user = params.user;
    _this.onloadDone = params.onloadDone;
    _this.data = null;
    _this.dataChanged = false;
    return _this;
  }

  _createClass(TEduBoardH5WebElement, [{
    key: "setProperty",
    value: function setProperty(params) {
      this.show = params.show;
      this.seq = params.seq;
      this.width = params.width || 0;
      this.height = params.height || 0;
      this.time = params.time || _util_util__WEBPACK_IMPORTED_MODULE_4__["default"].getTimeStamp();
      this.x = params.x || 0;
      this.y = params.y || 0;
      this.container = null;

      if (params.data) {
        this.data = params.data;
      }
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.dataChanged = true;
      this.data = data;
    }
  }, {
    key: "setBoardSize",
    value: function setBoardSize(boardWidth, boardHeight) {
      this.boardWidth = boardWidth;
      this.boardHeight = boardHeight;
      this.left = this.boardWidth * this.x / 10000;
      this.top = this.boardHeight * this.y / 10000;

      this._updateRectArea();
    }
    /**
     * 先默认为全屏
     * @param {*} params 
     */

  }, {
    key: "setElementSize",
    value: function setElementSize(params) {
      this.width = 10000;
      this.height = 10000;

      this._updateRectArea();
    }
    /**
     * 渲染图片
     * @param {*} container
     * @param {*} accessible 是否允许接收鼠标事件
     * @returns
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "renderTo",
    value: function renderTo(container, accessible) {
      this.container = container;
      var id = "tiw_h5web_element_".concat(this.belongSeq);
      var element = container.querySelector("#".concat(id));
      var style = "position:absolute;left:".concat(this.x, ";top:").concat(this.y, ";width: 100%;height:100%;border:none;");

      if (!accessible) {
        style += 'pointer-events:none';
      }

      if (!element) {
        this.el = document.createElement("iframe");
        this.el.id = id;
        this.el.setAttribute('class', 'tiw-board-iframe-el'); // 预加载iframe

        this.el.setAttribute('style', style);
        this.el.scrolling = 'auto';
        this.el.src = this.url;
        this.el.dataset.bid = this.boardId;
        this.el.dataset.belongSeq = this.belongSeq;
        this.el.setAttribute('name', JSON.stringify({
          id: this.belongSeq
        }));
        this.el.onload = this._onloadCallback.bind(this);
        container.appendChild(this.el);
      } else {
        element.setAttribute('style', style);
      }
    }
  }, {
    key: "_onloadCallback",
    value: function _onloadCallback() {
      this.postMessage(this.data);
      console.debug('TEduBoardH5WebElement: onLoad');

      this._updateRectArea();

      this.onloadDone && this.onloadDone();
      this.onloadDone = null;
    }
  }, {
    key: "remove",
    value: function remove() {
      this.el && this.el.remove();
    }
    /**
     * @brief 获取实时数据
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "getRealTimeData",
    value: function getRealTimeData() {
      return {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].PROTOCOL_ACTION.H5Web_ELEMENT,
        "belongSeq": this.belongSeq,
        "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_5__["default"].getSeq(),
        "boardId": this.boardId,
        // 白板id
        "url": this.url,
        "time": this.time,
        "show": this.show,
        "x": this.x.toFixed(4) * 1,
        "y": this.y.toFixed(4) * 1,
        "width": this.width.toFixed(4) * 1,
        "height": this.height.toFixed(4) * 1
      };
    }
    /**
     * 用来判断是否被选中
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "_updateRectArea",
    value: function _updateRectArea() {
      this.rectArea = {
        minX: this.x,
        minY: this.y,
        maxX: this.x + this.width,
        maxY: this.y + this.height
      };
    }
    /**
     * @brief 获取上报数据
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "getReportData",
    value: function getReportData() {
      var data = {
        type: this.type,
        property: {
          subType: this.subType,
          uid: this.user,
          // 画线条的用户id
          boardId: this.boardId,
          // 白板id
          belongSeq: this.belongSeq,
          url: this.url,
          time: this.time,
          x: this.x.toFixed(4) * 1,
          y: this.y.toFixed(4) * 1,
          width: this.width.toFixed(4) * 1,
          height: this.height.toFixed(4) * 1,
          updateTime: _util_util__WEBPACK_IMPORTED_MODULE_4__["default"].getTimeStamp(),
          hidden: !this.show * 1
        }
      };

      if (this.dataChanged) {
        data.property['data'] = this.data;
        this.dataChanged = false;
      }

      return data;
    }
  }, {
    key: "getRealSize",
    value: function getRealSize() {
      return {
        left: this.left,
        top: this.top,
        width: this.width * this.boardWidth / 10000,
        height: this.height * this.boardHeight / 10000
      };
    }
  }, {
    key: "postMessage",
    value: function postMessage(data) {
      this.el.contentWindow.postMessage({
        module: _model_TEduBoardIFrameModule__WEBPACK_IMPORTED_MODULE_7__["default"].TIW_H5WEB,
        cmd: _model_TEduBoardH5WebEvent__WEBPACK_IMPORTED_MODULE_6__["default"].TIW_H5WEB_DATA,
        data: data
      }, '*');
    }
  }]);

  return TEduBoardH5WebElement;
}(_TEduBoardElement__WEBPACK_IMPORTED_MODULE_8__["default"]);

/* harmony default export */ __webpack_exports__["default"] = (TEduBoardH5WebElement);

/***/ }),

/***/ "./src/config/Config.js":
/*!******************************!*\
  !*** ./src/config/Config.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function Config() {
  this.VERSION = '2.5.1';
  this.REPORT_VERSION = this.VERSION + '_20200723_1548';
  this.MINIPROGRAM_REPORT_VERSION = this.VERSION + '_20200723_2111'; //nativeVersion

  this.NATIVEVERSION = 'web'; // 平台

  this.PLATFORM = 'web'; // 上报数据的服务器接口

  this.SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_edu/whiteboard?sdkappid='; // 测试环境

  this.TEST_SERVER_URL = 'https://test.tim.qq.com/v4/ilvb_test/whiteboard?sdkappid='; // COS 服务 URL

  this.COS_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_edu/cos'; // COS 测试服务 UR

  this.TEST_COS_SERVER_URL = 'https://test.tim.qq.com/v4/ilvb_test/cos'; // 白名单 服务 URL

  this.WHITELIST_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_edu/whitelist?sdkappid='; // 白名单 测试服务 URL

  this.TEST_WHITELIST_SERVER_URL = 'https://test.tim.qq.com/v4/ilvb_test/whitelist?sdkappid='; // 转码服务

  this.TRANSCODE_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_edu/transcode?sdkappid='; // 转码测试服务

  this.TEST_TRANSCODE_SERVER_URL = 'https://test.tim.qq.com/v4/ilvb_test/transcode?sdkappid='; // 心跳上报 测试服务 URL

  this.TEST_HEARTBEAT_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_test/report_heartbeat?sdkappid='; // 心跳上报 正式服务 URL

  this.HEARTBEAT_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_heartbeat/report_heartbeat?sdkappid='; // 企业微信机器人 服务 URL

  this.NOTIFY_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_edu/notify?sdkappid='; // 企业微信机器人 测试服务 URL

  this.TEST_NOTIFY_SERVER_URL = 'https://yun.tim.qq.com/v4/ilvb_test/notify?sdkappid=';
  this.fontUrl = 'https://res.qcloudtiw.com/board/fonts/simhei-Regular.ttf';
  this.SUB_CMD = {
    // 从服务器获取白板数据
    GET_BOARD_DATA: 'get_board_data',
    // 白板数据同步到服务器
    REPORT_BOARD_DATA: 'report_board_data'
  }; // cdn 域名

  this.CDN_DOMAIN = 'qcloudtiw.com'; // 是否显示资源加载进度条

  this.PROGRESS_ENABLE = false; // 资源加载进度条延迟显示时间

  this.PROGRESS_SHOW_DELAY = 100; // 视频状态同步间隔

  this.SYNC_VIDEO_STATUS_INTERVAL = 3000; //单位毫秒
  // 视频调整精度

  this.SYNC_VIDEO_STATUS_PRECISION = 3000; //单位毫秒
  // 普通白板所属分组

  this.COMMON_GROUP = '#DEFAULT'; // 普通白板默认的白板名

  this.COMMON_DEFAULT_BOARD = '#DEFAULT';
  this.SCALE = 100; // 缩放比 （实际值要除以100）

  this.MAX_SCALE = 1600; // 最大缩放比 （实际值要除以100）

  this.MIN_SCALE = 100; // 最小缩放比 （实际值要除以100）

  this.RATIO = '16:9'; // 默认分辨率
  // 线条的粗细值

  this.THIN = 100; // 涂鸦的平滑级别

  this.SMOOTH_LEVEL = 0; // 允许绘制的最小线宽（单位px）

  this.MIN_LINE_WIDTH = 1;
  this.MIN_FONT_SIZE = 1; // 最小字体单位 10像素（浏览器最小的字体单位像素）
  // 文字输入最大长度

  this.TEXT_MAX_LENGTH = 2000; // 文本输入大小

  this.TEXT_SIZE = 320; // 文字输入颜色

  this.TEXT_COLOR = 0; // 文字输入字体

  this.TEXT_FONT_FAMILY = 'customFontFamily,sans-serif,serif,monospace'; // 数据同步开关

  this.DATA_SYNC_ENABLE = true; // 预加载深度

  this.PRELOAD_DEPTH = 5; //添加图片组文件时，允许压缩后字符串的最大长度

  this.IMAGESFILE_MAX_URL_LENGTH = 5000; // 实时消息最大长度

  this.REALTIMEDATA_MAX_LENGTH = 7000; //渲染间隔

  this.RENDER_INTERVAL = 20;
  this.IMAGE_TIMEOUT = 10; // 10s 图片加载超时时间
  // 文字样式 0：常规；1：粗体；2.斜体；3.粗斜体，默认填 0；

  this.TEXT_FONT_STYLE = {
    NORMAL: 0,
    BOLD: 1,
    ITALIC: 2,
    BOLD_ITALIC: 3
  }; // 文件类型

  this.FILE_TYPE = {
    IMG: 0,
    // 转IMG方案
    H5PPT: 1,
    // 转H5方案
    VOD: 2,
    // 点播地址
    LIVE: 3,
    // 直播流
    H5FILE: 4,
    // h5网页 
    VODFILE: 5,
    // 点播文件
    IMAGESFILE: 6 // 批量图片组文件

  }; // 视频状态

  this.VIDEO_STATUS = {
    STOP: 0,
    PLAY: 1,
    PAUSE: 2
  }; // 视频状态

  this.VIDEO_ACTION = {
    PASSIVE: 1,
    API: 2,
    EXCEPTIOIN: 3
  }; // 视频状态

  this.VIDEO_FORMAT = {
    NONE: '',
    MP4: 'mp4',
    M3U8: 'm3u8',
    FLV: 'flv',
    RTMP: 'rtmp'
  }; // 空白页

  this.ABOUTBLANK = 'about:blank';
  this.penCursorIcon = 'https://res.qcloudtiw.com/board/icons/pen2.png';
  this.laserCursorIcon = 'https://res.qcloudtiw.com/board/icons/laserpen.png';
  this.defaultLoadingImage = 'https://res.qcloudtiw.com/board/icons/default-loading-96px.png'; // 工具图标

  this.ICONS = {
    // ['MOUSE', 'LINE', 'ERASER', 'RASER', 'GRAPH-LINE',
    // 'GRAPH-OVAL', 'GRAPH-RECT',
    // 'GRAPH-OVAL-SOLID', 'GRAPH-RECT-SOLID', 'POINTSELECT', 'SELECT', 'INPUTTEXT', 'ZOOM'
    0: {
      // 鼠标工具
      "cursor": "auto"
    },
    1: {
      // 涂鸦工具
      "cursor": "none",
      "url": this.penCursorIcon,
      "offsetX": 0,
      "offsetY": 0
    },
    2: {
      // 橡皮擦
      "cursor": "auto"
    },
    3: {
      // 激光笔
      "cursor": "none",
      "url": this.laserCursorIcon,
      "offsetX": 32,
      "offsetY": 32
    },
    4: {
      // 直线
      "cursor": "crosshair"
    },
    5: {
      // 空心圆
      "cursor": "crosshair"
    },
    6: {
      // 空心矩形
      "cursor": "crosshair"
    },
    7: {
      // 实心圆
      "cursor": "crosshair"
    },
    8: {
      // 实心矩形
      "cursor": "crosshair"
    },
    9: {
      // 点选
      "cursor": "auto"
    },
    10: {
      // 框选
      "cursor": "crosshair"
    },
    11: {
      // 文字输入
      "cursor": "text"
    },
    12: {
      // 移动
      "cursor": "move"
    } // 协议上的事件

  };
  this.PROTOCOL_ACTION = {
    LINE_START_ACTION: 1,
    // 画线的开始action
    LINE_MOVE_ACTION: 2,
    // 画线的移动action
    LINE_END_ACTION: 3,
    // 画线的结束action
    RASER_SHOW_ACTION: 6,
    // 激光笔显示action
    RASER_HIDE_ACTION: 7,
    // 激光笔隐藏action
    ERASER_ACTION: 8,
    // 线条显示隐藏的action
    MOVE_LINE_GRAPH_ACTION: 9,
    // 移动线条，图形的action
    GRAPH_LINE_ACTION: 10,
    // 新增直线的action
    GRAPH_CIRCLE_ACTION: 11,
    // 新增圆形的action
    GRAPH_RECT_ACTION: 12,
    // 新增矩形的action
    INPUT_TEXT_ACTION: 13,
    //新增文字输入action
    IMAGE_ELEMENT: 20,
    //新增图片元素
    H5Web_ELEMENT: 21,
    //新增Webview元素
    FILE_MESSAGE_ACTION: 40,
    //文件消息
    GRAPH_CLEAR_ALL_ACTION: 101,
    // 清空当前白板所有涂鸦+背景图+背景色
    GRAPH_CLEAR_ACTION: 102,
    // 清空当前白板所有涂鸦，保留背景图（背景色）
    FILE_CLEAR_ACTION: 103,
    // 清空fid对应文件白板上的所有涂鸦
    RESET_DATA_ACTION: 104,
    // 重置白板数据
    SET_BOARD_RATIO_ACTION: 105,
    // 设置白板分辨率
    SET_BOARD_FIT_MODE_ACTION: 106,
    // 设置白板内容填充方式
    UPDATE_BG_IMG_ACTION: 201,
    // 更新当前白板背景图
    DELETE_BG_IMG_ACTION: 202,
    // 删除当前白板背景图
    UPDATE_BG_COLOR_ACTION: 203,
    // 设置白板的背景颜色
    BOARD_MOVE_SCALE_ACTION: 301,
    // 白板位置，缩放操作
    FILE_SCALE_ACTION: 302,
    // 文件缩放操作
    SWITCH_ACTION: 401,
    // 白板操作，如删除白板，切换白板
    ADD_FILE_ACTION: 501,
    // 新增文件
    PPT_EVENT_ACTION: 601,
    // PPT 事件透传
    VIDEO_EVENT_ACTION: 701,
    // Video状态更新
    H5WEB_EVENT_ACTION: 801 // H5Web 事件透传

  };
}

Config.prototype.setPlatform = function (platform) {
  this.PLATFORM = platform;
};

Config.prototype.setNativeVersion = function (nativeVersion) {
  this.NATIVEVERSION = nativeVersion;
};

/* harmony default export */ __webpack_exports__["default"] = (new Config());

/***/ }),

/***/ "./src/config/Constant.js":
/*!********************************!*\
  !*** ./src/config/Constant.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  // 白板操作类型
  BOARD_ACTION_TYPE: {
    'LINE': 'line',
    // 随便画线
    'ERASER': 'eraser',
    // 橡皮擦
    'RASER': 'raser',
    // 激光笔
    'POINTSELECT': 'pointselect',
    // 点选
    'SELECT': 'select',
    // 框选
    'MOVE': 'move',
    // 拖拽
    'GRAPH-LINE': 'graph-line',
    // 直线
    'GRAPH-CIRCLE': 'graph-circle',
    // 空心圆
    'GRAPH-RECT': 'graph-rect',
    // 空心矩形
    'GRAPH-OVAL': 'graph-oval',
    // 空心椭圆
    'GRAPH-CIRCLE-SOLID': 'graph-circle-solid',
    // 实心圆
    'GRAPH-RECT-SOLID': 'graph-rect-solid',
    // 实心矩形
    'GRAPH-OVAL-SOLID': 'graph-oval-solid',
    // 实心椭圆
    'INPUTTEXT': 'inputtext',
    //文字输入
    'MOUSE': "mouse",
    // 鼠标模式
    'ZOOM': 'zoom',
    // 缩放
    'GRAPH-STRAIGHTLINE': 'graph-straightLine',
    //多样式直线
    'GRAPH-ELLIPSE': 'graph-ellipse' //多样式椭圆

  },
  // 白板模式
  BOARD_MODE: {
    BOARD: 0,
    // 纯白板模式
    FILE: 1 // 文件模式

  },
  // 背景类型，图片/H5
  BACKGROUND_TYPE: {
    IMAGE: 0,
    // 图片
    H5: 1 // H5

  },
  FILL_MODE: {
    DEFAULT: 0,
    // 默认自动缩放至最佳显示
    LEFT: 4,
    // 居左
    TOP: 5,
    // 居上
    RIGHT: 6,
    // 居右
    BOTTOM: 7 // 居底

  },
  COLOR: {
    RED: 4278190335,
    WHITE: 4294967295
  },
  EVENT: {
    // 同步历史数据完成
    HISTROY_DATA_COMPLETE: 'histroy_data_complete',
    // 增加白板
    ADD_BOARD: 'add_board',
    // 白板实时数据
    RT_DATA: 'real_time_data',
    // 白板实时数据
    REAL_TIME_DATA: 'real_time_data',
    // 接收到白板数据异常
    ADD_DATA_ERROR: 'add_data_error',
    // 删除白板
    DELETE_BOARD: 'delete_board',
    // 切换白板
    SWITCH_BOARD: 'switch_board',
    // 增加分组
    ADD_FILE: 'add_group',
    // 新增了H5PPT文件
    ADD_H5PPT_FILE: 'add_h5ppt_file',
    // 删除分组
    DELETE_FILE: 'delete_group',
    // 切换分组
    SWITCH_FILE: 'switch_group',
    // 图片开始加载
    IMG_START_LOAD: 'img_start_load',
    // 图片加载完成
    IMG_LOAD: 'img_load',
    // 图片加载错误
    IMG_ERROR: 'img_error',
    // 图片加载中断
    IMG_ABORT: 'img_abort',
    // 图片预加载事件（小程序独有）
    PRELOAD: 'preload',
    // 能否撤销
    BOARD_CAN_UNDO: 'board_can_undo',
    // 能否还原
    BOARD_CAN_REDO: 'board_can_redo',
    VERIFY_SDK_SUCC: 'verify_sdk_succ',
    VERIFY_SDK_ERROR: 'verify_sdk_error',
    CANVAS_MOUSEDOWN: 'canvas_mousedown',
    CANVAS_MOUSEMOVE: 'canvas_mousemove',
    CANVAS_MOUSEUP: 'canvas_mouseup',
    CANVAS_MOUSELEAVE: 'canvas_mouseleave',
    CANVAS_TOUCHSTART: 'canvas_touchstart',
    CANVAS_TOUCHMOVE: 'canvas_touchmove',
    CANVAS_TOUCHEND: 'CANVAS_touchend',
    CANVAS_TOUCHCANCEL: 'canvas_touchcancel',
    UPDATE_BACKGROUND_IMAGE_SUCCESS: 'update_background_image_success',
    UPDATE_BACKGROUND_IMAGE_ERROR: 'update_background_image_error',
    COS: {
      GET_SIGN_ERROR: 'get_sign_error',
      TASK_READY: 'task_ready',
      HASH_PROGRESS: 'hash_progress',
      PROGRESS: 'progress',
      GET_SIGN_SUCCESS: 'get_sign_success',
      DOES_NOT_SUPPORT_UPLOAD: 'does_not_support_upload',
      UPLOAD_SUCCESS: 'upload_success',
      UPLOAD_ERROR: 'upload_error'
    }
  }
});

/***/ }),

/***/ "./src/cos/FileCos.js":
/*!****************************!*\
  !*** ./src/cos/FileCos.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_typed_uint8_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.typed.uint8-array */ "./node_modules/core-js/modules/es6.typed.uint8-array.js");
/* harmony import */ var core_js_modules_es6_typed_uint8_array__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_typed_uint8_array__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _model_TEduBoardUploadStatus__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../model/TEduBoardUploadStatus */ "./src/model/TEduBoardUploadStatus.js");
/* harmony import */ var _event_TEduEvent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../event/TEduEvent */ "./src/event/TEduEvent.js");











function FileCos(options, request, event, log) {
  this.cos = null;
  this.options = Object.assign({
    sdkAppId: null,
    appid: null,
    bucket: null
  }, options, {
    region: 'ap-shanghai',
    path: '/TIC/'
  });
  this.request = request;
  this.userDataKeyMap = {}; // userData和文件key映射关系

  this.fidKeyMap = {}; // fid和文件key映射关系

  this.bucketCosMap = {};
  this.event = event;
  this.elkLog = log;
  this.init();
}

FileCos.prototype.init = function () {
  var COS = window.COS;

  if (!COS) {
    return;
  }
};

FileCos.prototype.uploadImgFile = function (file, fid, succ) {
  var _this = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_7__["default"].getTimeStamp();
  var body = null;
  var fileName = '';
  var userData = ''; // 透传字段

  if (_util_util__WEBPACK_IMPORTED_MODULE_7__["default"].isFile(file.data)) {
    body = file.data;
    fileName = file.data.name;
    userData = file.userData;
  } else {
    var dataURL = file.data;
    fileName = file.name;
    userData = file.userData; // 透传字段

    var arr = dataURL.split(',');
    var data = window.atob(arr[1]);
    var mime = arr[0].match(/:(.*?);/)[1];
    var ia = new Uint8Array(data.length);

    for (var i = 0; i < data.length; i++) {
      ia[i] = data.charCodeAt(i);
    }

    body = new Blob([ia], {
      type: mime
    });
  }

  return this.uploadCosImageFile({
    body: body,
    fileName: fileName,
    userData: userData
  }).then(function (data) {
    _this.event.fire(_this, _event_TEduEvent__WEBPACK_IMPORTED_MODULE_9__["default"].commonEvent.TEB_FILEUPLOADSTATUS, _model_TEduBoardUploadStatus__WEBPACK_IMPORTED_MODULE_8__["default"].TEDU_BOARD_UPLOAD_STATUS_SUCCEED, {
      code: 0,
      errorMsg: '',
      userData: userData
    });

    var fileUrl = "https://".concat(data.Bucket, ".file.myqcloud.com/").concat(data.Key);
    return Promise.resolve({
      fileName: fileName,
      fileUrl: fileUrl,
      userData: userData
    });
  }, function (error) {
    // 上传过程中错误
    _this.event.fire(_this, _event_TEduEvent__WEBPACK_IMPORTED_MODULE_9__["default"].commonEvent.TEB_FILEUPLOADSTATUS, _model_TEduBoardUploadStatus__WEBPACK_IMPORTED_MODULE_8__["default"].TEDU_BOARD_UPLOAD_STATUS_FAILED, {
      code: error.statusCode ? error.statusCode : -3,
      errorMsg: JSON.stringify(error.error),
      userData: userData
    });

    return Promise.reject(error);
  }).catch(function (error) {
    // 逻辑异常
    _this.elkLog.report('cos_upload_file', {
      action_result: 2,
      action_info: 'stack:' + error.stack + ' message:' + error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_7__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify({
        bucket: _this.options.bucket,
        cos_appid: _this.options.appid,
        region: _this.options.region,
        userData: userData
      })
    });
  });
};
/**
 * 上传文件到cos
 */


FileCos.prototype.uploadCosImageFile = function (_ref) {
  var _this2 = this;

  var body = _ref.body,
      fileName = _ref.fileName,
      userData = _ref.userData;
  return this.upload({
    path: this.options.path + this.options.sdkAppId + '/' + _util_util__WEBPACK_IMPORTED_MODULE_7__["default"].getTimeStamp() + '/' + fileName,
    body: body,
    userData: userData,
    onProgress: function onProgress(data) {
      _this2.event.fire(self, _event_TEduEvent__WEBPACK_IMPORTED_MODULE_9__["default"].commonEvent.TEB_FILEUPLOADPROGRESS, Object.assign({
        userData: userData
      }, data));
    }
  });
};

FileCos.prototype.transcodeUploadFile = function (file) {
  var _this3 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_7__["default"].getTimeStamp();
  var body = null;
  var fileName = '';
  var userData = ''; // 透传字段

  if (_util_util__WEBPACK_IMPORTED_MODULE_7__["default"].isFile(file.data)) {
    body = file.data;
    fileName = file.data.name;
    userData = file.userData;
  } else {
    var dataURL = file.data;
    fileName = file.name;
    userData = file.userData; // 透传字段

    var arr = dataURL.split(',');
    var data = window.atob(arr[1]);
    var mime = arr[0].match(/:(.*?);/)[1];
    var ia = new Uint8Array(data.length);

    for (var i = 0; i < data.length; i++) {
      ia[i] = data.charCodeAt(i);
    }

    body = new Blob([ia], {
      type: mime
    });
  }

  return this.uploadCosFileFromTranscode({
    body: body,
    fileName: fileName,
    userData: userData
  }).then(function (data) {
    return Promise.resolve(data);
  }, function (error) {
    return Promise.reject(error);
  }).catch(function (error) {
    _this3.elkLog.report('cos_upload_file', {
      action_result: 2,
      action_info: 'stack:' + error.stack + ' message:' + error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_7__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify({
        bucket: _this3.options.bucket,
        cos_appid: _this3.options.appid,
        region: _this3.options.region,
        userData: userData
      })
    });
  });
};
/**
 * 上传文件到cos
 */


FileCos.prototype.uploadCosFileFromTranscode = function (_ref2) {
  var _this4 = this;

  var body = _ref2.body,
      fileName = _ref2.fileName,
      userData = _ref2.userData;
  return this.upload({
    path: this.options.path + this.options.sdkAppId + '/' + _util_util__WEBPACK_IMPORTED_MODULE_7__["default"].getTimeStamp() + '/' + fileName,
    body: body,
    userData: userData,
    onProgress: function onProgress(data) {
      var result = {
        code: '',
        message: '',
        status: 'UPLOADING',
        progress: data.percent * 100,
        userData: userData
      };

      _this4.event.fire(_this4, _event_TEduEvent__WEBPACK_IMPORTED_MODULE_9__["default"].commonEvent.TEB_TRANSCODEPROGRESS, result);

      _this4.elkLog.report(_event_TEduEvent__WEBPACK_IMPORTED_MODULE_9__["default"].commonEvent.TEB_TRANSCODEPROGRESS, {
        extra_info: JSON.stringify(result)
      });
    }
  });
};

FileCos.prototype.upload = function (config) {
  var _this5 = this;

  return new Promise(function (resolve, reject) {
    var bucket = (config.bucket || _this5.options.bucket) + '-' + (config.appid || _this5.options.appid);

    if (_this5.bucketCosMap[bucket]) {
      _this5.cos = _this5.bucketCosMap[bucket];
    } else {
      _this5.cos = new window.COS({
        getAuthorization: function getAuthorization(options, callback) {
          var bucket = options.Bucket.substr(0, options.Bucket.lastIndexOf('-'));

          _this5.request.getCosAuthData(bucket).then(function (res) {
            try {
              if (res && res.data && res.data.error_code == 0) {
                var data = res.data;
                callback({
                  TmpSecretId: data.tmp_secret_id,
                  TmpSecretKey: data.tmp_secret_key,
                  XCosSecurityToken: data.session_token,
                  ExpiredTime: data.expired_time
                });
              } else {
                // 统一由上传回调报错
                callback({
                  TmpSecretId: 'error',
                  TmpSecretKey: 'error',
                  XCosSecurityToken: 'error',
                  ExpiredTime: -1
                });
              }
            } catch (error) {
              // 统一由上传回调报错
              callback({
                TmpSecretId: 'error',
                TmpSecretKey: 'error',
                XCosSecurityToken: 'error',
                ExpiredTime: -1
              });
            }
          }).catch(function (error) {
            // 统一由上传回调报错
            callback({
              TmpSecretId: 'error',
              TmpSecretKey: 'error',
              XCosSecurityToken: 'error',
              ExpiredTime: -1
            });
          });
        }
      });
      _this5.bucketCosMap[bucket] = _this5.cos;
    }

    _this5.cos.sliceUploadFile({
      Bucket: bucket,
      Region: config.region || _this5.options.region,
      Key: config.path,
      Body: config.body,
      onTaskReady: function onTaskReady(taskId) {
        /* 非必须 */
        if (_util_util__WEBPACK_IMPORTED_MODULE_7__["default"].isFunction(config.onTaskReady)) {
          config.onTaskReady(taskId);
        }
      },
      onHashProgress: function onHashProgress(progressData) {
        /* 非必须 */
        if (_util_util__WEBPACK_IMPORTED_MODULE_7__["default"].isFunction(config.onHashProgress)) {
          config.onHashProgress(progressData);
        }
      },
      onProgress: function onProgress(progressData) {
        if (_util_util__WEBPACK_IMPORTED_MODULE_7__["default"].isFunction(config.onProgress)) {
          config.onProgress(progressData);
        }
      }
    }, function (err, data) {
      if (data && data.statusCode === 200) {
        resolve(data);

        _this5.elkLog.report('cos_upload_file', {
          extra_info: JSON.stringify({
            bucket: bucket,
            userData: config.userData,
            data: data
          })
        });
      } else {
        reject(err);

        _this5.elkLog.report('cos_upload_file', {
          action_result: 1,
          action_info: JSON.stringify(err),
          extra_info: JSON.stringify({
            bucket: bucket,
            userData: config.userData
          })
        });
      }
    });
  });
};

/* harmony default export */ __webpack_exports__["default"] = (FileCos);

/***/ }),

/***/ "./src/event/TEduEvent.js":
/*!********************************!*\
  !*** ./src/event/TEduEvent.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduEvent = {
  commonEvent: {
    // 通用事件
    'TEB_INIT': 'TEB_INIT',
    'TEB_OPERATE_CANUNDO_STATUS_CHANGED': 'TEB_OPERATE_CANUNDO_STATUS_CHANGED',
    'TEB_OPERATE_CANREDO_STATUS_CHANGED': 'TEB_OPERATE_CANREDO_STATUS_CHANGED',
    'TEB_ADDBOARD': 'TEB_ADDBOARD',
    'TEB_SYNCDATA': 'TEB_SYNCDATA',
    'TEB_ERROR': 'TEB_ERROR',
    'TEB_WARNING': 'TEB_WARNING',
    'TEB_HISTROYDATA_SYNCCOMPLETED': 'TEB_HISTROYDATA_SYNCCOMPLETED',
    'TEB_IMAGE_STATUS_CHANGED': 'TEB_IMAGE_STATUS_CHANGED',
    'TEB_H5BACKGROUND_STATUS_CHANGED': 'TEB_H5BACKGROUND_STATUS_CHANGED',
    'TEB_H5FILE_STATUS_CHANGED': 'TEB_H5FILE_STATUS_CHANGED',
    'TEB_VIDEO_STATUS_CHANGED': 'TEB_VIDEO_STATUS_CHANGED',
    'TEB_DELETEBOARD': 'TEB_DELETEBOARD',
    'TEB_GOTOBOARD': 'TEB_GOTOBOARD',
    'TEB_ADDH5PPTFILE': 'TEB_ADDH5PPTFILE',
    'TEB_ADDFILE': 'TEB_ADDFILE',
    'TEB_DELETEFILE': 'TEB_DELETEFILE',
    'TEB_FILEUPLOADSTATUS': 'TEB_FILEUPLOADSTATUS',
    'TEB_SWITCHFILE': 'TEB_SWITCHFILE',
    'TEB_SETBACKGROUNDIMAGE': 'TEB_SETBACKGROUNDIMAGE',
    'TEB_FILEUPLOADPROGRESS': 'TEB_FILEUPLOADPROGRESS',
    'TEB_ADDTRANSCODEFILE': 'TEB_ADDTRANSCODEFILE',
    'TEB_GOTOSTEP': 'TEB_GOTOSTEP',
    'TEB_TRANSCODEPROGRESS': 'TEB_TRANSCODEPROGRESS',
    'TEB_VODEXTPARAM': 'TEB_VODEXTPARAM',
    'TEB_ADDIMAGEELEMENT': 'TEB_ADDIMAGEELEMENT',
    'TEB_ADDIMAGESFILE': 'TEB_ADDIMAGESFILE',
    'TEB_RECTSELECTED': 'TEB_RECTSELECTED',
    'TEB_ADDELEMENT': 'TEB_ADDELEMENT',
    'TEB_REFRESH': 'TEB_REFRESH',
    'TEB_SNAPSHOT': 'TEB_SNAPSHOT'
  },
  miniprogramEvent: {
    // 小程序事件
    'TEB_INIT': 'TEB_INIT',
    'TEB_OPERATE_CANUNDO_STATUS_CHANGED': 'TEB_OPERATE_CANUNDO_STATUS_CHANGED',
    'TEB_OPERATE_CANREDO_STATUS_CHANGED': 'TEB_OPERATE_CANREDO_STATUS_CHANGED',
    'TEB_ADDBOARD': 'TEB_ADDBOARD',
    'TEB_SYNCDATA': 'TEB_SYNCDATA',
    'TEB_ERROR': 'TEB_ERROR',
    'TEB_WARNING': 'TEB_WARNING',
    'TEB_HISTROYDATA_SYNCCOMPLETED': 'TEB_HISTROYDATA_SYNCCOMPLETED',
    'TEB_IMAGE_STATUS_CHANGED': 'TEB_IMAGE_STATUS_CHANGED',
    'TEB_H5BACKGROUND_STATUS_CHANGED': 'TEB_H5BACKGROUND_STATUS_CHANGED',
    'TEB_DELETEBOARD': 'TEB_DELETEBOARD',
    'TEB_GOTOBOARD': 'TEB_GOTOBOARD',
    'TEB_ADDH5PPTFILE': 'TEB_ADDH5PPTFILE',
    'TEB_ADDFILE': 'TEB_ADDFILE',
    'TEB_DELETEFILE': 'TEB_DELETEFILE',
    'TEB_FILEUPLOADSTATUS': 'TEB_FILEUPLOADSTATUS',
    'TEB_SWITCHFILE': 'TEB_SWITCHFILE',
    'TEB_SETBACKGROUNDIMAGE': 'TEB_SETBACKGROUNDIMAGE',
    'TEB_FILEUPLOADPROGRESS': 'TEB_FILEUPLOADPROGRESS',
    'TEB_LAYOUT': 'TEB_LAYOUT',
    'TEB_TRANSCODEPROGRESS': 'TEB_TRANSCODEPROGRESS',
    'TEB_ADDIMAGESFILE': 'TEB_ADDIMAGESFILE'
  }
};
/* harmony default export */ __webpack_exports__["default"] = (TEduEvent);

/***/ }),

/***/ "./src/model/BoardInfoModel.js":
/*!*************************************!*\
  !*** ./src/model/BoardInfoModel.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * 白板信息
 */
var TEduBoardInfo =
/*#__PURE__*/
function () {
  function TEduBoardInfo(boardId, backgroundUrl, backgroundColor) {
    _classCallCheck(this, TEduBoardInfo);

    this.boardId = boardId || '';
    this.backgroundUrl = '';

    if (backgroundUrl) {
      this.backgroundUrl = backgroundUrl.url || '';
    }

    this.backgroundColor = backgroundColor || '';
  }

  _createClass(TEduBoardInfo, [{
    key: "setBoardId",
    value: function setBoardId(boardId) {
      this.boardId = boardId;
    }
  }, {
    key: "setBackgroundUrl",
    value: function setBackgroundUrl(url) {
      this.backgroundUrl = url;
    }
  }, {
    key: "getBoardId",
    value: function getBoardId() {
      return this.boardId;
    }
  }, {
    key: "getBackgroundUrl",
    value: function getBackgroundUrl() {
      return this.backgroundUrl;
    }
  }, {
    key: "setBackgroundColor",
    value: function setBackgroundColor(color) {
      this.backgroundColor = color;
    }
  }, {
    key: "getBackgroundColor",
    value: function getBackgroundColor() {
      return this.backgroundColor;
    }
  }]);

  return TEduBoardInfo;
}();

/* harmony default export */ __webpack_exports__["default"] = (TEduBoardInfo);

/***/ }),

/***/ "./src/model/DragDataList.js":
/*!***********************************!*\
  !*** ./src/model/DragDataList.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var DragDataList =
/*#__PURE__*/
function () {
  function DragDataList() {
    _classCallCheck(this, DragDataList);

    this.data = {};
  }

  _createClass(DragDataList, [{
    key: "addDragData",
    value: function addDragData(currentBoard, dragModel) {
      if (!this.data[currentBoard]) {
        this.data[currentBoard] = dragModel;
      }
    }
  }, {
    key: "getDragDataByFid",
    value: function getDragDataByFid(fid) {
      var dragDataList = [];

      for (var bid in this.data) {
        if (_util_util__WEBPACK_IMPORTED_MODULE_0__["default"].boardId2Fid(bid) === fid) {
          dragDataList.push({
            bid: bid,
            data: this.data[bid]
          });
        }
      }

      return dragDataList;
    }
  }, {
    key: "getDragData",
    value: function getDragData(currentBoard) {
      return this.data[currentBoard];
    }
  }, {
    key: "updateDragData",
    value: function updateDragData(currentBoard, options) {
      var dragModel = this.data[currentBoard];
      dragModel.update(options);
    }
  }]);

  return DragDataList;
}();

/* harmony default export */ __webpack_exports__["default"] = (DragDataList);

/***/ }),

/***/ "./src/model/DragModel.js":
/*!********************************!*\
  !*** ./src/model/DragModel.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _util_Seq__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/Seq */ "./src/util/Seq.js");



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// 拖拽数据模型




var DragModel =
/*#__PURE__*/
function () {
  function DragModel(options) {
    _classCallCheck(this, DragModel);

    this.action = _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PROTOCOL_ACTION.BOARD_MOVE_SCALE_ACTION; // 301  白板位置、缩放操作

    this.scale = options.scale; // uint32 白板内容和白板大小的比例*100

    this.xOffsetRatio = options.xOffsetRatio; // 偏移的缩放比（同步的时候由xOffset归一化算出来）

    this.yOffsetRatio = options.yOffsetRatio; // 偏移的缩放比（同步的时候由yOffset归一化算出来）

    this.xOffset = options.xOffset; // uint32 白板展示框在内容view中的相对位置/展示框宽度*10000【最小值为0，最大值为（scale-100）*10000/100】

    this.yOffset = options.yOffset; // uint32 白板展示框在内容view中的相对位置/展示框高度*10000【最小值为0，最大值为（scale-100）*10000/100】
  }

  _createClass(DragModel, [{
    key: "update",
    value: function update(options) {
      Object.assign(this, options);
      this.scale = Math.floor(this.scale);
    }
  }, {
    key: "getReportData",
    value: function getReportData() {
      return {
        "updateTime": _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getSecondTime(),
        // 修改移动、缩放属性时，服务器时间戳（IM后台时间戳/秒）
        "xOffset": Number(this.xOffset.toFixed(4)),
        //归一化*10000
        "yOffset": Number(this.yOffset.toFixed(4)),
        //归一化*10000
        "scale": Math.floor(this.scale) //缩放比*100，最小为100

      };
    }
  }, {
    key: "getRealTimeData",
    value: function getRealTimeData() {
      return {
        action: this.action,
        time: _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getTimeStamp(),
        seq: _util_Seq__WEBPACK_IMPORTED_MODULE_4__["default"].getSeq(),
        scale: Math.floor(this.scale),
        xOffset: Number(this.xOffset.toFixed(4)),
        yOffset: Number(this.yOffset.toFixed(4))
      };
    }
  }]);

  return DragModel;
}();

/* harmony default export */ __webpack_exports__["default"] = (DragModel);

/***/ }),

/***/ "./src/model/TEduBoardArrowType.js":
/*!*****************************************!*\
  !*** ./src/model/TEduBoardArrowType.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardArrowType = {
  TEDU_BOARD_ARROW_TYPE_NONE: 1,
  //无箭头
  TEDU_BOARD_ARROW_TYPE_NORMAL: 2,
  //普通箭头
  TEDU_BOARD_ARROW_TYPE_SOLID: 3 //实心箭头

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardArrowType);

/***/ }),

/***/ "./src/model/TEduBoardBackgroundH5Status.js":
/*!**************************************************!*\
  !*** ./src/model/TEduBoardBackgroundH5Status.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardBackgroundH5Status = {
  TEDU_BOARD_BACKGROUND_H5_STATUS_LOADING: 1,
  ///< H5 背景正在加载
  TEDU_BOARD_BACKGROUND_H5_STATUS_LOAD_FINISH: 2 ///< H5 背景加载完成

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardBackgroundH5Status);

/***/ }),

/***/ "./src/model/TEduBoardContentFitMode.js":
/*!**********************************************!*\
  !*** ./src/model/TEduBoardContentFitMode.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardContentFitMode = {
  TEDU_BOARD_FILE_FIT_MODE_NONE: 0,
  //不使用文件自适应，我们目前使用的模式，不自动调整白板宽高比，文件等比例缩放居中显示，文件宽高<=白板宽高
  TEDU_BOARD_FILE_FIT_MODE_CENTER_INSIDE: 1,
  //自动调整白板宽高比与文件一致，文件铺满白板，白板等比例缩放居中显示，白板宽高:容器宽高
  TEDU_BOARD_FILE_FIT_MODE_CENTER_COVER: 2 //自动调整白板宽高比与文件一致，文件铺满白板，白板等比例缩放居中显示，白板宽高>=容器宽高

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardContentFitMode);

/***/ }),

/***/ "./src/model/TEduBoardCursorLayer.js":
/*!*******************************************!*\
  !*** ./src/model/TEduBoardCursorLayer.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * 2020.01.13本次修复多指触控的问题
 * @class TEduBoardCursorLayer
 */
var TEduBoardCursorLayer =
/*#__PURE__*/
function () {
  function TEduBoardCursorLayer(container, listener) {
    _classCallCheck(this, TEduBoardCursorLayer);

    this.container = container;
    this.listener = listener;

    this._createElement();

    this.isTouchDown = false; // 是否touch中

    this.touchId = null;
    this.direction = null; // 方向x/y
  }

  _createClass(TEduBoardCursorLayer, [{
    key: "_createElement",
    value: function _createElement() {
      var cursorPositionLayer = this.cursorPositionLayer = document.createElement('div');
      cursorPositionLayer.setAttribute('style', "position:relative;left:0;top:0;width:100%;height:100%;border:1px dotted red;cursor:move;visibility: hidden;");

      var leftTopScaleEl = this.leftTopScaleEl = this._createScaleElement('left:-1px;top:-1px;cursor:nwse-resize;');

      cursorPositionLayer.appendChild(leftTopScaleEl);

      var rightTopScaleEl = this.rightTopScaleEl = this._createScaleElement('right:-1px;top:-1px;cursor:nesw-resize;');

      cursorPositionLayer.appendChild(rightTopScaleEl);

      var leftBottomScaleEl = this.leftBottomScaleEl = this._createScaleElement('left:-1px;bottom:-1px;cursor:nesw-resize;');

      cursorPositionLayer.appendChild(leftBottomScaleEl);

      var rightBottomScaleEl = this.rightBottomScaleEl = this._createScaleElement('right:-1px;bottom:-1px;cursor:nwse-resize;');

      cursorPositionLayer.appendChild(rightBottomScaleEl);

      var topCenterScaleEl = this.topCenterScaleEl = this._createScaleElement('left:calc(50% - 6px);top:-1px;cursor:ns-resize;');

      cursorPositionLayer.appendChild(topCenterScaleEl);

      var bottomCenterScaleEl = this.bottomCenterScaleEl = this._createScaleElement('left:calc(50% - 6px);bottom:-1px;cursor:ns-resize;');

      cursorPositionLayer.appendChild(bottomCenterScaleEl);

      var leftCenterScaleEl = this.leftCenterScaleEl = this._createScaleElement('left:-1px;top:calc(50% - 6px);cursor:ew-resize;');

      cursorPositionLayer.appendChild(leftCenterScaleEl);

      var rightCenterScaleEl = this.rightCenterScaleEl = this._createScaleElement('right:-1px;top:calc(50% - 6px);cursor:ew-resize;');

      cursorPositionLayer.appendChild(rightCenterScaleEl); // 八个方向的元素

      this.eightDirectionEl = [this.leftTopScaleEl, this.rightTopScaleEl, this.leftBottomScaleEl, this.rightBottomScaleEl, this.topCenterScaleEl, this.bottomCenterScaleEl, this.leftCenterScaleEl, this.rightCenterScaleEl];

      var rotateEl = this.rotateEl = this._createRotateElement();

      cursorPositionLayer.appendChild(rotateEl);
      this.container.appendChild(cursorPositionLayer);
    }
  }, {
    key: "_createScaleElement",
    value: function _createScaleElement(style) {
      var div = document.createElement('div');
      div.setAttribute('style', "position:absolute;".concat(style, ";width:12px;height:12px;background:red;"));
      return div;
    }
  }, {
    key: "_createRotateElement",
    value: function _createRotateElement() {
      var rotateDivEl = this.rotateDivEl = document.createElement('div');
      var rotateImgSrc = 'https://res.qcloudtiw.com/board/icons/rotate-icon.png';
      var rotateCursorImgSrc = 'https://res.qcloudtiw.com/board/icons/rotate-cursor-icon.png';
      var rotateCursorImgSrc2 = 'https://res.qcloudtiw.com/board/icons/rotate-cursor-icon2.png';
      rotateDivEl.setAttribute('style', "margin-left:-12px;width:24px;height:24px;background:url(".concat(rotateImgSrc, ") no-repeat center center;background-size:contain;cursor:url(").concat(rotateCursorImgSrc, "), url(").concat(rotateCursorImgSrc2, "), auto;-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"));
      var lineDiv = document.createElement('div');
      lineDiv.setAttribute('style', "width:1px;height:20px;background:red;");
      var rotateContainerDiv = this.rotateContainerDiv = document.createElement('div');
      rotateContainerDiv.setAttribute('style', "position:absolute;left:calc(50%);top:-44px;");
      rotateContainerDiv.appendChild(rotateDivEl);
      rotateContainerDiv.appendChild(lineDiv);
      return rotateContainerDiv;
    }
  }, {
    key: "showSelectLayer",
    value: function showSelectLayer(imageElements) {
      var _this = this;

      this.imageElements = imageElements;

      this._showSelectLayer();

      this.cursorPositionLayer.style.visibility = 'visible';

      if (this.imageElements.length > 1) {
        this._showElement(this.rotateContainerDiv, false);
      } else {
        this._showElement(this.rotateContainerDiv, true);
      }

      this.rotateDivEl.onmouseenter = function (e) {
        e.stopPropagation(); // 阻止冒泡
      };

      this.rotateDivEl.onmousedown = function (e) {
        e.stopPropagation(); // 阻止冒泡

        _this._showScaleElement(false); // 隐藏八个方向元素


        var rotateCursorImgSrc2 = 'https://res.qcloudtiw.com/board/icons/rotate-cursor-icon2.png';
        _this.rotateDivEl.style.cursor = "url(".concat(rotateCursorImgSrc2, "), auto");

        var clientXY = _this._getEventPageXY(e);

        _this.rotateAction(e, clientXY.clientX, clientXY.clientY);
      };

      this.cursorPositionLayer.onmouseenter = function (e) {
        _this.cursorPositionLayer.style.cursor = 'move'; // 还原为move
      };

      this.cursorPositionLayer.onmousedown = function (e) {
        _this.cursorPositionLayer.style.cursor = 'move'; // 还原为move

        _this.moveScaleAction(e, _this.cursorPositionLayer);
      };

      this.cursorPositionLayer.ontouchstart = function (e) {
        _this.cursorPositionLayer.style.cursor = 'move'; // 还原为move

        _this.isTouchDown = true; // 被touch中

        _this.moveScaleAction(e, _this.cursorPositionLayer);

        _this.listener.ontouchstart && _this.listener.ontouchstart();
      }; // 旋转元素


      this.rotateDivEl.ontouchstart = function (e) {
        e.stopPropagation(); // 阻止冒泡

        _this._showScaleElement(false); // 隐藏八个方向元素


        var rotateCursorImgSrc2 = 'https://res.qcloudtiw.com/board/icons/rotate-cursor-icon2.png';
        _this.rotateDivEl.style.cursor = "url(".concat(rotateCursorImgSrc2, "), auto");

        var clientXY = _this._getEventPageXY(e);

        _this.rotateAction(e, clientXY.clientX, clientXY.clientY);
      }; // 八个方向元素


      this.eightDirectionEl.forEach(function (item) {
        item.ontouchstart = item.onmousedown = function (e) {
          _this.moveScaleAction(e, item);
        };
      });
    }
    /**
     * 移动和缩放
     * @param {*} e 
     * @param {*} el 
     */

  }, {
    key: "moveScaleAction",
    value: function moveScaleAction(e, el) {
      var _this2 = this;

      e.stopPropagation();
      e.preventDefault();
      var startX = 0,
          startY = 0;

      var pageXY = this._getEventPageXY(e);

      startX = pageXY.pageX;
      startY = pageXY.pageY;

      if (startX === -1000000 && startY === -1000000) {
        return;
      }

      this.container.onmousemove = function (e) {
        var newStartXY = _this2._doMove(e, el, startX, startY);

        startX = newStartXY.startX;
        startY = newStartXY.startY;
      };

      this.container.onmouseleave = function (e) {
        e.stopPropagation();
        e.preventDefault();
        _this2.container.onmousemove = null;
        _this2.container.onmouseleave = null;
        _this2.container.onmouseup = null;
        startX = 0;
        startY = 0;
      };

      this.container.onmouseup = function (e) {
        e.stopPropagation();
        e.preventDefault();
        _this2.container.onmousemove = null;
        _this2.container.onmouseleave = null;
        _this2.container.onmouseup = null;
        startX = 0;
        startY = 0;
      };

      this.container.ontouchmove = function (e) {
        var newStartXY = _this2._doMove(e, el, startX, startY);

        startX = newStartXY.startX;
        startY = newStartXY.startY;
      };

      this.container.ontouchend = function (e) {
        var pageXY = _this2._getEventPageXY(e);

        if (pageXY.pageX === -1000000 && pageXY.pageY === -1000000) {
          return;
        }

        _this2.isTouchDown = false; // 取消touch

        _this2.touchId = null; // 置空

        e.stopPropagation();
        e.preventDefault();
        _this2.container.ontouchmove = null;
        _this2.container.ontouchend = null;
        _this2.container.ontouchcancel = null;
        startX = 0;
        startY = 0;
        _this2.listener.ontouchend && _this2.listener.ontouchend();
      };

      this.container.ontouchcancel = function (e) {
        var pageXY = _this2._getEventPageXY(e);

        if (pageXY.pageX === -1000000 && pageXY.pageY === -1000000) {
          return;
        }

        _this2.isTouchDown = false; // 取消touch

        _this2.touchId = null; // 置空

        e.stopPropagation();
        e.preventDefault();
        _this2.container.ontouchmove = null;
        _this2.container.ontouchend = null;
        _this2.container.ontouchcancel = null;
        startX = 0;
        startY = 0;
        _this2.listener.ontouchcancel && _this2.listener.ontouchcancel();
      };
    }
  }, {
    key: "_doMove",
    value: function _doMove(e, el, startX, startY) {
      e.preventDefault();
      e.stopPropagation();

      var pageXY = this._getEventPageXY(e);

      if (pageXY.pageX === -1000000 && pageXY.pageY === -1000000) {
        return;
      }

      if (el === this.cursorPositionLayer) {
        // 
        this.setSize(0, 0);
        this.setPosition(el, pageXY.pageX - startX, pageXY.pageY - startY);
      } else if (el === this.leftTopScaleEl || el === this.rightTopScaleEl || el === this.leftBottomScaleEl || el === this.rightBottomScaleEl) {
        // 4个
        this.cursorPositionLayer.style.cursor = el.style.cursor; // 将中间的区域cursor替换为当前的元素的cursor

        var moveWidthScale, moveHeightScale;
        var scale = 0;

        if (!this.direction) {
          // 先确定方向
          if (pageXY.pageX - startX != 0) {
            // 
            this.direction = 'x';
          } else if (pageXY.pageY - startY != 0) {
            this.direction = 'y';
          } else {
            this.direction = 'xy'; // 
          }
        }

        if (el === this.leftTopScaleEl) {
          // 左上角
          moveWidthScale = (this.borderWidth - (pageXY.pageX - startX)) / this.borderWidth;
          moveHeightScale = (this.borderHeight - (pageXY.pageY - startY)) / this.borderHeight;
        } else if (el === this.rightTopScaleEl) {
          // 右上角
          moveWidthScale = (this.borderWidth + pageXY.pageX - startX) / this.borderWidth;
          moveHeightScale = (this.borderHeight - (pageXY.pageY - startY)) / this.borderHeight;
        } else if (el === this.leftBottomScaleEl) {
          // 左下角
          moveWidthScale = (this.borderWidth - (pageXY.pageX - startX)) / this.borderWidth;
          moveHeightScale = (this.borderHeight + (pageXY.pageY - startY)) / this.borderHeight;
        } else if (el === this.rightBottomScaleEl) {
          // 右下角
          moveWidthScale = (this.borderWidth + pageXY.pageX - startX) / this.borderWidth;
          moveHeightScale = (this.borderHeight + pageXY.pageY - startY) / this.borderHeight;
        } // 根据方向


        if (this.direction == 'x') {
          scale = moveWidthScale;
        } else if (this.direction == 'y') {
          scale = moveHeightScale;
        } else {
          scale = Math.max(moveWidthScale, moveHeightScale);
        }

        this.setPositionSize(el, scale, scale);
      } else if (el === this.leftCenterScaleEl) {
        // 正左方
        var _moveWidthScale = (this.borderWidth - (pageXY.pageX - startX)) / this.borderWidth;

        this.setPositionSize(el, _moveWidthScale, 1);
      } else if (el === this.rightCenterScaleEl) {
        // 正右方
        var _moveWidthScale2 = (this.borderWidth + pageXY.pageX - startX) / this.borderWidth;

        this.setPositionSize(el, _moveWidthScale2, 1);
      } else if (el === this.topCenterScaleEl) {
        // 正上方
        var _moveHeightScale = (this.borderHeight - (pageXY.pageY - startY)) / this.borderHeight;

        this.setPositionSize(el, 1, _moveHeightScale);
      } else if (el === this.bottomCenterScaleEl) {
        // 正下方
        var _moveHeightScale2 = (this.borderHeight + pageXY.pageY - startY) / this.borderHeight;

        this.setPositionSize(el, 1, _moveHeightScale2);
      }

      startX = pageXY.pageX;
      startY = pageXY.pageY;
      this.listener.onmousemove && this.listener.onmousemove(this.imageElements);

      this._showSelectLayer();

      return {
        startX: startX,
        startY: startY
      };
    }
    /**
     * 旋转
     * @param {*} event 
     * @param {*} startX 
     * @param {*} startY 
     */

  }, {
    key: "rotateAction",
    value: function rotateAction(event, startX, startY) {
      var _this3 = this;

      var targetStartBoxSize = event.currentTarget.getBoundingClientRect();

      this.container.onmousemove = function (e) {
        e.stopPropagation(); // 阻止冒泡

        var deg = _this3._calcRotateDeg(e, targetStartBoxSize, startX, startY);

        _this3.elementRotate(deg);

        _this3.cursorPositionLayer.style.cursor = _this3.rotateDivEl.style.cursor; // 将中间的区域cursor替换为旋转元素的cursor
      };

      this.container.onmouseleave = function (e) {
        e.stopPropagation();
        e.preventDefault();
        _this3.container.onmousemove = null;
        _this3.container.onmouseleave = null;
        _this3.container.onmouseup = null;

        _this3._showScaleElement(true); // 显示八个方向

      };

      this.container.onmouseup = function (e) {
        e.stopPropagation();
        e.preventDefault();
        _this3.container.onmousemove = null;
        _this3.container.onmouseleave = null;
        _this3.container.onmouseup = null;

        _this3._showScaleElement(true); // 显示八个方向

      };

      this.container.ontouchmove = function (e) {
        e.stopPropagation(); // 阻止冒泡

        var deg = _this3._calcRotateDeg(e, targetStartBoxSize, startX, startY);

        _this3.elementRotate(deg);

        _this3.cursorPositionLayer.style.cursor = _this3.rotateDivEl.style.cursor; // 将中间的区域cursor替换为旋转元素的cursor
      };

      this.container.ontouchend = function (e) {
        var pageXY = _this3._getEventPageXY(e);

        if (pageXY.pageX === -1000000 && pageXY.pageY === -1000000) {
          return;
        }

        _this3.isTouchDown = false; // 取消touch

        _this3.touchId = null; // 置空

        e.stopPropagation();
        e.preventDefault();
        _this3.container.ontouchmove = null;
        _this3.container.ontouchend = null;
        _this3.container.ontouchcancel = null;
        _this3.listener.ontouchend && _this3.listener.ontouchend();

        _this3._showScaleElement(true); // 显示八个方向

      };

      this.container.ontouchcancel = function (e) {
        var pageXY = _this3._getEventPageXY(e);

        if (pageXY.pageX === -1000000 && pageXY.pageY === -1000000) {
          return;
        }

        _this3.isTouchDown = false; // 取消touch

        _this3.touchId = null; // 置空

        e.stopPropagation();
        e.preventDefault();
        _this3.container.ontouchmove = null;
        _this3.container.ontouchend = null;
        _this3.container.ontouchcancel = null;
        _this3.listener.ontouchcancel && _this3.listener.ontouchcancel();

        _this3._showScaleElement(true); // 显示八个方向

      };
    }
  }, {
    key: "elementRotate",
    value: function elementRotate(deg) {
      this.cursorPositionLayer.style.transform = "rotate(".concat(deg, "deg)");
      this.cursorPositionLayer.style.webkitTransform = "rotate(".concat(deg, "deg)");
      this.imageElements.forEach(function (item) {
        item.setRotate(deg);
      });
      this.listener.onmousemove && this.listener.onmousemove(this.imageElements);
    }
  }, {
    key: "setPositionSize",
    value: function setPositionSize(el, moveWidthScale, moveHeightScale) {
      var _this4 = this;

      this.imageElements.forEach(function (element) {
        var size = element.getRealSize();
        var relativeLeft, relativeTop;

        if (el === _this4.leftTopScaleEl) {
          // 左上角
          relativeLeft = size.left - _this4.borderLeft - _this4.borderWidth;
          relativeTop = size.top - _this4.borderTop - _this4.borderHeight;
        } else if (el === _this4.rightTopScaleEl) {
          // 右上角
          relativeLeft = size.left - _this4.borderLeft;
          relativeTop = size.top - _this4.borderTop - _this4.borderHeight;
        } else if (el === _this4.leftBottomScaleEl) {
          // 左下角
          relativeLeft = size.left - _this4.borderLeft - _this4.borderWidth;
          relativeTop = size.top - _this4.borderTop;
        } else if (el === _this4.rightBottomScaleEl) {
          // 右下角
          relativeLeft = size.left - _this4.borderLeft;
          relativeTop = size.top - _this4.borderTop;
        } else if (el === _this4.leftCenterScaleEl) {
          // 正左方
          relativeLeft = size.left - _this4.borderLeft - _this4.borderWidth;
          relativeTop = size.top - _this4.borderTop - _this4.borderHeight;
        } else if (el === _this4.rightCenterScaleEl) {
          // 正右方
          relativeLeft = size.left - _this4.borderLeft;
          relativeTop = size.top - _this4.borderTop - _this4.borderHeight;
        } else if (el === _this4.topCenterScaleEl) {
          // 正上方
          relativeLeft = size.left - _this4.borderLeft;
          relativeTop = size.top - _this4.borderTop - _this4.borderHeight;
        } else if (el === _this4.bottomCenterScaleEl) {
          // 正下方
          relativeLeft = size.left - _this4.borderLeft;
          relativeTop = size.top - _this4.borderTop;
        }

        element.setSize(size.width * (moveWidthScale - 1), size.height * (moveHeightScale - 1));
        element.setPosition(false, relativeLeft * (moveWidthScale - 1), relativeTop * (moveHeightScale - 1));
      });
    }
  }, {
    key: "setPosition",
    value: function setPosition(el) {
      var diffX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var diffY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      this.moveX += diffX;
      this.moveY += diffY;
      this.imageElements.forEach(function (element) {
        element.setPosition(true, diffX, diffY);
      });
    }
  }, {
    key: "setSize",
    value: function setSize(diffX, diffY) {
      this.imageElements.forEach(function (element) {
        element.setSize(diffX, diffY);
      });
    }
  }, {
    key: "_showSelectLayer",
    value: function _showSelectLayer() {
      var left = 10000,
          top = 10000,
          width = 0,
          height = 0;

      for (var index = 0, len = this.imageElements.length; index < len; index++) {
        var element = this.imageElements[index];

        if (this.imageElements.length == 1) {
          var size = element.getRealSize();
          left = Math.min(left, size.left);
          top = Math.min(top, size.top);
          width = Math.max(width, size.left + size.width);
          height = Math.max(height, size.top + size.height);
        } else {
          var area = element.rectArea;
          left = Math.min(left, area.minX * element.boardWidth / 10000);
          top = Math.min(top, area.minY * element.boardHeight / 10000);
          width = Math.max(width, area.maxX * element.boardWidth / 10000);
          height = Math.max(height, area.maxY * element.boardHeight / 10000);
        }
      }

      width -= left; // 减去左边的left

      height -= top; // 减去顶部的top

      this.borderWidth = width;
      this.borderHeight = height;
      this.borderLeft = left;
      this.borderTop = top;
      this.cursorPositionLayer.style.left = left + 'px';
      this.cursorPositionLayer.style.top = top + 'px';
      this.cursorPositionLayer.style.width = width + 'px';
      this.cursorPositionLayer.style.height = height + 'px';
      var rotateDeg = '';

      if (this.imageElements.length === 1) {
        rotateDeg = "rotate(".concat(this.imageElements[0].deg, "deg)");
        this.cursorPositionLayer.style.transform = rotateDeg;
        this.cursorPositionLayer.style.webkitTransform = rotateDeg;
      } else {
        rotateDeg = 'none';
      }

      this.cursorPositionLayer.style.transform = rotateDeg;
      this.cursorPositionLayer.style.webkitTransform = rotateDeg;
    }
  }, {
    key: "setListener",
    value: function setListener(listener) {
      this.listener = listener;
    }
  }, {
    key: "_getEventPageXY",
    value: function _getEventPageXY(event) {
      if (event.changedTouches) {
        var touch = null;

        if (this.touchId == null) {
          this.touchId = event.changedTouches[0].identifier;
          touch = event.changedTouches[0];
        } else {
          for (var i = 0, len = event.changedTouches.length; i < len; i++) {
            var item = event.changedTouches[i];

            if (this.touchId === item.identifier) {
              touch = item;
              break;
            }
          }

          if (!touch) {
            touch = {
              pageX: -1000000,
              pageY: -1000000,
              clientX: 0,
              clientY: 0
            };
          }
        }

        return {
          pageX: touch.pageX,
          pageY: touch.pageY,
          clientX: touch.clientX,
          clientY: touch.clientY
        };
      } else {
        return {
          pageX: event.pageX,
          pageY: event.pageY,
          clientX: event.clientX,
          clientY: event.clientY
        };
      }
    }
  }, {
    key: "_calcRotateDeg",
    value: function _calcRotateDeg(event, targetStartBoxSize, startX, startY) {
      var clientXY = this._getEventPageXY(event);

      var clientX = targetStartBoxSize.left + targetStartBoxSize.width / 2 + (clientXY.clientX - startX),
          clientY = targetStartBoxSize.top + targetStartBoxSize.height / 2 + (clientXY.clientY - startY); // 可视

      var cursorBoxSize = this.cursorPositionLayer.getBoundingClientRect();
      var originX = cursorBoxSize.left + cursorBoxSize.width / 2,
          originY = cursorBoxSize.top + cursorBoxSize.height / 2;
      var degree = Math.atan2(originY - clientY, clientX - originX) / (Math.PI / 180) - 90; // 默认先减90度，再取反

      degree = -degree;

      if (degree < 0) {
        degree = 360 + degree;
      }

      degree = degree.toFixed(2);
      return Number(degree || 0);
    }
    /**
     * 八个方向缩放元素
     */

  }, {
    key: "_showScaleElement",
    value: function _showScaleElement(isShow) {
      var _this5 = this;

      this.eightDirectionEl.forEach(function (item) {
        _this5._showElement(item, isShow);
      });
    }
  }, {
    key: "_showElement",
    value: function _showElement(el, isShow) {
      if (el) {
        el.style.display = isShow ? 'block' : 'none';
      }
    }
  }]);

  return TEduBoardCursorLayer;
}();

/* harmony default export */ __webpack_exports__["default"] = (TEduBoardCursorLayer);

/***/ }),

/***/ "./src/model/TEduBoardElementType.js":
/*!*******************************************!*\
  !*** ./src/model/TEduBoardElementType.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  TEDU_BOARD_ELEMENT_IMAGE: 1,
  TEDU_BOARD_ELEMENT_H5: 2
});

/***/ }),

/***/ "./src/model/TEduBoardErrorCode.js":
/*!*****************************************!*\
  !*** ./src/model/TEduBoardErrorCode.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardErrorCode = {
  TEDU_BOARD_ERROR_INIT: 1,
  //初始化失败
  TEDU_BOARD_ERROR_AUTH: 2,
  //服务鉴权失败，请先购买服务
  TEDU_BOARD_ERROR_LOAD: 3,
  //文件加载失败
  TEDU_BOARD_ERROR_UPLOAD: 4,
  //上传文件失败 // 废弃
  TEDU_BOARD_ERROR_TIM_INVALID: 5,
  //腾讯云IMSDK不可用
  TEDU_BOARD_ERROR_HISTORYDATA: 6,
  //同步历史数据失败
  TEDU_BOARD_ERROR_RUNTIME: 7,
  //白板运行错误
  TEDU_BOARD_ERROR_AUTH_TIMEOUT: 8,
  //服务鉴权超时，请重试
  TEDU_BOARD_ERROR_DATA_TOO_LARGE: 9 //传输的数据太大，请分拆成两个或多个传递

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardErrorCode);

/***/ }),

/***/ "./src/model/TEduBoardH5FileStatus.js":
/*!********************************************!*\
  !*** ./src/model/TEduBoardH5FileStatus.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardH5FileStatus = {
  TEDU_BOARD_H5_FILE_STATUS_LOADING: 1,
  //H5背景图片正在加载
  TEDU_BOARD_H5_FILE_STATUS_LOADED: 2 //H5背景图片加载完成

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardH5FileStatus);

/***/ }),

/***/ "./src/model/TEduBoardH5WebEvent.js":
/*!******************************************!*\
  !*** ./src/model/TEduBoardH5WebEvent.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardH5WebEvent = {
  TIW_H5WEB_SYNC: 'TIW_H5WEB_SYNC',
  TIW_H5WEB_ACK: 'TIW_H5WEB_ACK',
  TIW_H5WEB_DATA: 'TIW_H5WEB_DATA',
  TIW_H5WEB_PERMISSION: 'TIW_H5WEB_PERMISSION',
  TIW_H5WEB_SNAPSHOT: 'TIW_H5WEB_SNAPSHOT'
};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardH5WebEvent);

/***/ }),

/***/ "./src/model/TEduBoardIFrameModule.js":
/*!********************************************!*\
  !*** ./src/model/TEduBoardIFrameModule.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardIFrameModule = {
  TIW_H5WEB: 'TIW_H5WEB',
  TIW_H5PPT: 'tx_h5_postmessage'
};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardIFrameModule);

/***/ }),

/***/ "./src/model/TEduBoardImageElement.js":
/*!********************************************!*\
  !*** ./src/model/TEduBoardImageElement.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _util_Seq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/Seq */ "./src/util/Seq.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





var TEduBoardImageElement =
/*#__PURE__*/
function () {
  function TEduBoardImageElement(option) {
    _classCallCheck(this, TEduBoardImageElement);

    this.boardId = option.boardId;
    this.type = 'imageElement';
    this.show = option.show;
    this.user = option.user;
    this.belongSeq = option.belongSeq;
    this.seq = option.seq;
    this.url = option.url;
    this.width = option.width;
    this.height = option.height;
    this.time = option.time || _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
    this.x = option.x || 0;
    this.y = option.y || 0;
    this.focusStatus = 'blur'; // blur 失去焦点 focus获得焦点

    this.container = null;
    this.boardWidth = 0;
    this.boardHeight = 0;
    this.deg = option.deg || 0; // 图片在矩形区域的边界

    this.rectArea = {
      maxX: 0,
      maxY: 0,
      minX: 0,
      minY: 0
    };
  }

  _createClass(TEduBoardImageElement, [{
    key: "setBoardSize",
    value: function setBoardSize(boardWidth, boardHeight) {
      this.boardWidth = boardWidth;
      this.boardHeight = boardHeight;
      this.left = this.boardWidth * this.x / 10000;
      this.top = this.boardHeight * this.y / 10000;
    }
  }, {
    key: "getImageSize",
    value: function getImageSize(boardWidth, boardHeight, scale, callback) {
      var _this = this;

      this.boardWidth = boardWidth;
      this.boardHeight = boardHeight;
      var image = new Image();

      image.onload = function (res) {
        image.onload = null;
        var imageWidth = 0;
        var imageHeight = 0; // 如果图片的原始尺寸小于白板的尺寸

        if (image.naturalWidth <= boardWidth && image.naturalHeight <= boardHeight) {
          // 平铺在容器内
          imageWidth = image.naturalWidth;
          imageHeight = image.naturalHeight;
        } else if (boardWidth / boardHeight > image.naturalWidth / image.naturalHeight) {
          // 撑满高度
          imageWidth = image.naturalWidth * boardHeight / image.naturalHeight;
          imageHeight = boardHeight;
          imageWidth = imageWidth / 2;
          imageHeight = imageHeight / 2;
        } else {
          // 撑满宽度
          imageWidth = boardWidth;
          imageHeight = image.naturalHeight * boardWidth / image.naturalWidth;
          imageWidth = imageWidth / 2;
          imageHeight = imageHeight / 2;
        }

        scale = scale / 100;
        _this.width = imageWidth * 10000 / _this.boardWidth / scale;
        _this.height = imageHeight * 10000 / _this.boardHeight / scale;
        _this.x = 5000 - _this.width / 2;
        _this.y = 5000 - _this.height / 2;
        callback && callback();
      };

      image.src = this.url;
    }
    /**
     * @brief 获取实时数据
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "getRealTimeData",
    value: function getRealTimeData() {
      return {
        "action": _config_Config__WEBPACK_IMPORTED_MODULE_0__["default"].PROTOCOL_ACTION.IMAGE_ELEMENT,
        "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_2__["default"].getSeq(),
        "belongSeq": this.belongSeq,
        "url": this.url,
        "time": this.time,
        "show": this.show,
        "x": this.x.toFixed(4) * 1,
        "y": this.y.toFixed(4) * 1,
        "width": this.width.toFixed(4) * 1,
        "height": this.height.toFixed(4) * 1,
        deg: this.deg
      };
    }
    /**
     * @brief 获取上报数据
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "getReportData",
    value: function getReportData() {
      return {
        uid: this.user,
        // 画线条的用户id
        boardId: this.boardId,
        // 白板id
        belongSeq: this.belongSeq,
        url: this.url,
        time: this.time,
        x: this.x.toFixed(4) * 1,
        y: this.y.toFixed(4) * 1,
        width: this.width.toFixed(4) * 1,
        height: this.height.toFixed(4) * 1,
        updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp(),
        hidden: !this.show * 1,
        deg: this.deg
      };
    }
    /**
     *
     * 渲染图片
     * @param {*} container
     * @returns
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "renderTo",
    value: function renderTo(container) {
      this.container = container;
      var id = "tic_image_element_".concat(this.belongSeq);
      var imageWrap = container.querySelector("#".concat(id));

      if (imageWrap) {
        this.left = this.x * this.boardWidth / 10000;
        this.top = this.y * this.boardHeight / 10000;
        imageWrap.style.left = this.left + 'px';
        imageWrap.style.top = this.top + 'px';
        imageWrap.style.width = this.width * this.boardWidth / 10000 + 'px';
        imageWrap.style.height = this.height * this.boardHeight / 10000 + 'px';
        imageWrap.style.transform = "rotate(".concat(this.deg, "deg)");
        imageWrap.style.webkitTransform = "rotate(".concat(this.deg, "deg)");
        this.imageWrap = imageWrap;
      } else {
        var image = document.createElement('img');
        image.src = this.url;
        image.dataset.belongSeq = this.belongSeq;
        image.dataset.imageElement = true;
        image.setAttribute('style', "width:100%;height:100%;");
        imageWrap = document.createElement('div');
        imageWrap.dataset.belongSeq = this.belongSeq;
        imageWrap.dataset.imageElement = true;
        imageWrap.dataset.boardId = this.boardId;
        imageWrap.id = id;
        imageWrap.setAttribute('style', "position:absolute;left:".concat(this.left, "px;top:").concat(this.top, "px;margin:0;padding:0;width:").concat(this.width * this.boardWidth / 10000, "px;height:").concat(this.height * this.boardHeight / 10000, "px;border:1px dotted transparent;cursor:move;transform:rotate(").concat(this.deg, "deg);-webkit-transform:rotate(").concat(this.deg, "deg)"));
        imageWrap.appendChild(image);
        container.appendChild(imageWrap);
        this.imageWrap = imageWrap;
      }

      this._updateRectArea();
    }
  }, {
    key: "setPosition",
    value: function setPosition(isMove) {
      var diffX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var diffY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (!isMove) {
        // 如果不是移动（解决左上角，右上角到达最小范围后，会变成移动效果）
        var minWidthSize = 24 * 10000 / this.boardWidth;
        var minHeightSize = 24 * 10000 / this.boardHeight;

        if (this.width <= minWidthSize) {
          diffX = 0;
        }

        if (this.height <= minHeightSize) {
          diffY = 0;
        }
      }

      this.left += diffX; // 真实的值

      this.top += diffY; // 真实的值

      this.x = this.left * 10000 / this.boardWidth; // 归一化坐标

      this.y = this.top * 10000 / this.boardHeight; // 归一化坐标

      this.imageWrap.style.left = this.left + 'px';
      this.imageWrap.style.top = this.top + 'px';

      this._updateRectArea();
    }
  }, {
    key: "setSize",
    value: function setSize(diffX, diffY) {
      this.width += diffX * 10000 / this.boardWidth;
      this.height += diffY * 10000 / this.boardHeight;
      var minWidthSize = 24 * 10000 / this.boardWidth;
      var minHeightSize = 24 * 10000 / this.boardHeight;
      this.width = Math.max(minWidthSize, this.width);
      this.height = Math.max(minHeightSize, this.height);
      this.imageWrap.style.width = this.width * this.boardWidth / 10000 + 'px';
      this.imageWrap.style.height = this.height * this.boardHeight / 10000 + 'px';

      this._updateRectArea();
    }
  }, {
    key: "setRotate",
    value: function setRotate() {
      var deg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      // this.deg = this.deg + deg;
      this.deg = deg;
      this.imageWrap.style.transform = "rotate(".concat(this.deg, "deg)");
      this.imageWrap.style.webkitTransform = "rotate(".concat(this.deg, "deg)");

      this._updateRectArea();
    }
    /**
     * 用来判断是否被选中
     * @memberof TEduBoardImageElement
     */

  }, {
    key: "_updateRectArea",
    value: function _updateRectArea() {
      var xy = this._calcRotateXY(this.x, this.y);

      var x0 = xy.x,
          y0 = xy.y; // 左上角
      // console.log('>>>>>>>>>>>>>>>>>>>>> x0, y0 ', x0, y0, this.deg);

      xy = this._calcRotateXY(this.x + this.width, this.y);
      var x1 = xy.x,
          y1 = xy.y; // 右上角
      // console.log('>>>>>>>>>>>>>>>>>>>>> x1, y1 ', x1, y1);

      xy = this._calcRotateXY(this.x, this.y + this.height);
      var x2 = xy.x,
          y2 = xy.y; // 左下角
      // console.log('>>>>>>>>>>>>>>>>>>>>> x2, y2 ', x2, y2);

      xy = this._calcRotateXY(this.x + this.width, this.y + this.height);
      var x3 = xy.x,
          y3 = xy.y; // 右下角
      // console.log('>>>>>>>>>>>>>>>>>>>>> x3, y3 ', x3, y3);

      this.rectArea = {
        minX: Math.min(x0, x1, x2, x3),
        minY: Math.min(y0, y1, y2, y3),
        maxX: Math.max(x0, x1, x2, x3),
        maxY: Math.max(y0, y1, y2, y3) // console.log('>>>>>>>>>>>>>>>>>>>>>   this.rectArea:', this.rectArea);

      };
    }
    /**
     * 
     * @param {*} x 
     * @param {*} y 
     * 在平面坐标上，任意点P(x1,y1)，绕一个坐标点Q(x0,y0)旋转θ角度后,新的坐标设为(x2, y2)的计算公式：
     * x2 = (x1 - x0)*cos(θ) - (y1 - y0)*sin(θ) + x0 ;
     * y2 = (x1 - x0)*sin(θ) + (y1 - y0)*cos(θ) + y0 ;
     */

  }, {
    key: "_calcRotateXY",
    value: function _calcRotateXY(x, y) {
      var width = this.width * this.boardWidth / 10000,
          height = this.height * this.boardHeight / 10000; //

      var x0 = this.x * this.boardWidth / 10000 + width / 2,
          y0 = this.y * this.boardHeight / 10000 + height / 2; // 中心点
      // 当前要计算的点的原始值

      var originX = x * this.boardWidth / 10000,
          originY = y * this.boardHeight / 10000;
      var x1 = originX,
          y1 = originY;
      var radians = this.deg * (Math.PI / 180);
      var ox = (x1 - x0) * Math.cos(radians) - (y1 - y0) * Math.sin(radians) + x0;
      var oy = (x1 - x0) * Math.sin(radians) + (y1 - y0) * Math.cos(radians) + y0;
      var x2 = ox * 10000 / this.boardWidth;
      var y2 = oy * 10000 / this.boardHeight;
      return {
        x: x2,
        y: y2,
        ox: ox,
        oy: oy
      };
    }
  }, {
    key: "getRealSize",
    value: function getRealSize() {
      return {
        left: this.left,
        top: this.top,
        width: this.width * this.boardWidth / 10000,
        height: this.height * this.boardHeight / 10000
      };
    }
  }, {
    key: "remove",
    value: function remove() {
      this.imageWrap && this.imageWrap.remove();
    }
  }]);

  return TEduBoardImageElement;
}();

/* harmony default export */ __webpack_exports__["default"] = (TEduBoardImageElement);

/***/ }),

/***/ "./src/model/TEduBoardImageFitMode.js":
/*!********************************************!*\
  !*** ./src/model/TEduBoardImageFitMode.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
/* harmony import */ var core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_symbol_async_iterator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
/* harmony import */ var core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_symbol__WEBPACK_IMPORTED_MODULE_1__);



function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var TEduBoardImageFitMode = {
  TEDU_BOARD_IMAGE_FIT_MODE_CENTER: 0,
  //以宽度或者高度为基准居中对齐等比例放大
  TEDU_BOARD_IMAGE_FIT_MODE_LEFT: 4,
  //以宽度或者高度为基准左对齐等比例放大
  TEDU_BOARD_IMAGE_FIT_MODE_TOP: 5,
  //以宽度或者高度为基准顶对齐等比例放大
  TEDU_BOARD_IMAGE_FIT_MODE_RIGHT: 6,
  //以宽度或者高度为基准右对齐等比例放大
  TEDU_BOARD_IMAGE_FIT_MODE_BOTTOM: 7 //以宽度或者高度为基准底对齐等比例放大

};

if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
  // 历史遗留问题
  window.TEduBoardImageFitMode = TEduBoardImageFitMode;
}

/* harmony default export */ __webpack_exports__["default"] = (TEduBoardImageFitMode);

/***/ }),

/***/ "./src/model/TEduBoardImageStatus.js":
/*!*******************************************!*\
  !*** ./src/model/TEduBoardImageStatus.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardImageStatus = {
  TEDU_BOARD_IMAGE_STATUS_LOADING: 1,
  //背景图片正在加载        CONSTANT.EVENT.IMG_START_LOAD
  TEDU_BOARD_IMAGE_STATUS_LOAD_DONE: 2,
  //背景图片加载完成        CONSTANT.EVENT.IMG_LOAD
  TEDU_BOARD_IMAGE_STATUS_LOAD_ABORT: 3,
  //背景图片加载中断        CONSTANT.EVENT.IMG_ABORT
  TEDU_BOARD_IMAGE_STATUS_LOAD_ERROR: 4,
  //背景图片加载错误        CONSTANT.EVENT.IMG_ERROR
  TEDU_BOARD_IMAGE_STATUS_LOAD_TIMEOUT: 5,
  //背景图片加载超时        CONSTANT.EVENT.IMG_TIMEOUT
  TEDU_BOARD_IMAGE_STATUS_LOAD_CANCEL: 6 //背景图片取消加载        CONSTANT.EVENT.IMG_CANCEL

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardImageStatus);

/***/ }),

/***/ "./src/model/TEduBoardLineType.js":
/*!****************************************!*\
  !*** ./src/model/TEduBoardLineType.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardLineType = {
  TEDU_BOARD_LINE_TYPE_SOLID: 1,
  // 实线
  TEDU_BOARD_LINE_TYPE_DOTTED: 2 // 虚线

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardLineType);

/***/ }),

/***/ "./src/model/TEduBoardOvalDrawMode.js":
/*!********************************************!*\
  !*** ./src/model/TEduBoardOvalDrawMode.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardOvalDrawMode = {
  TEDU_BOARD_OVAL_DRAW_MODE_FIX_START: 1,
  //固定起始点，起始点和终点的中点为圆心
  TEDU_BOARD_OVAL_DRAW_MODE_FIX_CENTER: 2 //固定圆心，起始点为圆心

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardOvalDrawMode);

/***/ }),

/***/ "./src/model/TEduBoardTextStyle.js":
/*!*****************************************!*\
  !*** ./src/model/TEduBoardTextStyle.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardTextStyle = {
  TEDU_BOARD_TEXT_STYLE_NORMAL: 0,
  ///< 常规样式
  TEDU_BOARD_TEXT_STYLE_BOLD: 1,
  ///< 粗体样式
  TEDU_BOARD_TEXT_STYLE_ITALIC: 2,
  ///< 斜体样式
  TEDU_BOARD_TEXT_STYLE_BOLD_ITALIC: 3 ///< 粗斜体样式

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardTextStyle);

/***/ }),

/***/ "./src/model/TEduBoardToolType.js":
/*!****************************************!*\
  !*** ./src/model/TEduBoardToolType.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardToolType = {
  TEDU_BOARD_TOOL_TYPE_MOUSE: 0,
  //鼠标            MOUSE
  TEDU_BOARD_TOOL_TYPE_PEN: 1,
  //画笔            LINE
  TEDU_BOARD_TOOL_TYPE_ERASER: 2,
  //橡皮擦            ERASER
  TEDU_BOARD_TOOL_TYPE_LASER: 3,
  //激光笔            RASER
  TEDU_BOARD_TOOL_TYPE_LINE: 4,
  //直线            GRAPH_LINE
  TEDU_BOARD_TOOL_TYPE_OVAL: 5,
  //空心椭圆        GRAPH_OVAL
  TEDU_BOARD_TOOL_TYPE_RECT: 6,
  //空心矩形        GRAPH_RECT
  TEDU_BOARD_TOOL_TYPE_OVAL_SOLID: 7,
  //实心椭圆        GRAPH_OVAL_SOLID
  TEDU_BOARD_TOOL_TYPE_RECT_SOLID: 8,
  //实心矩形        GRAPH_RECT_SOLID
  TEDU_BOARD_TOOL_TYPE_POINT_SELECT: 9,
  //点选工具        POINTSELECT
  TEDU_BOARD_TOOL_TYPE_RECT_SELECT: 10,
  //框选工具        SELECT
  TEDU_BOARD_TOOL_TYPE_TEXT: 11,
  //文本工具        INPUTTEXT
  TEDU_BOARD_TOOL_TYPE_ZOOM_DRAG: 12,
  //缩放工具      zoom
  TEDU_BOARD_TOOL_TYPE_STRAIGHT_LINE: 13,
  //多样式直线
  TEDU_BOARD_TOOL_TYPE_ELLIPSE: 14 //多样式矩形

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardToolType);

/***/ }),

/***/ "./src/model/TEduBoardUploadStatus.js":
/*!********************************************!*\
  !*** ./src/model/TEduBoardUploadStatus.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardUploadStatus = {
  TEDU_BOARD_UPLOAD_STATUS_SUCCEED: 1,
  ///< 上传成功
  TEDU_BOARD_UPLOAD_STATUS_FAILED: 2 ///< 上传失败

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardUploadStatus);

/***/ }),

/***/ "./src/model/TEduBoardVideoStatus.js":
/*!*******************************************!*\
  !*** ./src/model/TEduBoardVideoStatus.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardVideoStatus = {
  TEDU_BOARD_VIDEO_STATUS_ERROR: 1,
  TEDU_BOARD_VIDEO_STATUS_LOADING: 2,
  TEDU_BOARD_VIDEO_STATUS_LOADED: 3,
  TEDU_BOARD_VIDEO_STATUS_PLAYED: 4,
  TEDU_BOARD_VIDEO_STATUS_TIMEUPDATE: 5,
  TEDU_BOARD_VIDEO_STATUS_PAUSED: 6,
  TEDU_BOARD_VIDEO_STATUS_SEEKED: 7,
  TEDU_BOARD_VIDEO_STATUS_ENDED: 8
};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardVideoStatus);

/***/ }),

/***/ "./src/model/TEduBoardWarningCode.js":
/*!*******************************************!*\
  !*** ./src/model/TEduBoardWarningCode.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var TEduBoardWarningCode = {
  TEDU_BOARD_WARNING_SYNC_DATA_PARSE_FAILED: 1,
  //接收到其他端的同步数据解析错误    CONSTANT.EVENT.ADD_DATA_ERROR
  TEDU_BOARD_WARNING_H5PPT_ALREADY_EXISTS: 3,
  //要添加的H5PPT已存在
  TEDU_BOARD_WANNING_ILLEGAL_OPERATION: 5,
  //非法操作，历史数据同步未完成, 禁止改变白板行为操作
  TEDU_BOARD_WARNING_H5FILE_ALREADY_EXISTS: 6,
  ///<当要添加的H5File已存在时抛出该警告
  TEDU_BOARD_WARNING_VIDEO_ALREADY_EXISTS: 7,
  ///< 当要添加的视频已存在时抛出该警告
  TEDU_BOARD_WARNING_IMAGESFILE_ALREADY_EXISTS: 8 ///< 当要添加的图片集合文件已存在时抛出该警告

};
/* harmony default export */ __webpack_exports__["default"] = (TEduBoardWarningCode);

/***/ }),

/***/ "./src/net/ELKLog.js":
/*!***************************!*\
  !*** ./src/net/ELKLog.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");

// const util = require('../util/util');
// const Config = require('../config/Config');


/**
 * ELK日志系统
 */

function ELKLog() {
  this.waterEvents = ['addData', 'call_method', 'apply_video_permission', 'init_video_permission'];
  this.waterUrl = 'https://report-log-lv0.api.qcloud.com'; // 流水日志

  this.keyUrl = 'https://report-log-lv1.api.qcloud.com'; // 关键日志

  this.uniqBid = Math.floor(Math.random() * _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp());
  console.log('uniqBid:', this.uniqBid);
}

ELKLog.prototype = {
  method: 'POST',
  send: function send(url, datas) {
    try {
      datas['userAgent'] = navigator.userAgent;
      datas = this.fillDatas(datas);
      datas.uniqBid = this.uniqBid;
      var xhr = this.getXHR();
      xhr.onreadystatechange = this.reporterHandel(xhr);
      xhr.open(this.method, url, true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhr.send(JSON.stringify(datas));
    } catch (e) {
      console.log(e);
    }
  },
  fillDatas: function fillDatas(datas) {
    var self = this;
    var dt = {};

    for (var p in self.defDatas) {
      if (['sdkappid', 'classid', 'userid'].indexOf(p) >= 0) {
        dt[p] = self.defDatas[p];
        continue;
      }

      dt[p] = typeof datas[p] != 'undefined' ? datas[p] : self.defDatas[p];

      if (p === 'boardid_list') {
        dt[p] = JSON.stringify(self.defDatas[p]);
      }

      if (p === 'roomid') {
        dt[p] = self.defDatas[p] + '';
      }
    }

    dt.device = _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PLATFORM;
    dt.nativeVersion = _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].NATIVEVERSION;
    return dt;
  },
  datasParseToString: function datasParseToString(datas) {
    var tmp = [];

    for (var p in datas) {
      tmp.push(p + '=' + encodeURIComponent(datas[p]));
    }

    return tmp.join('&');
  },
  getXHR: function getXHR() {
    var xmlhttp = null;
    var ActiveXObject = window.ActiveXObject;

    if (window.XMLHttpRequest) {
      // code for all new browsers
      xmlhttp = new XMLHttpRequest();
    } else if (ActiveXObject) {
      // code for IE5 and IE6
      try {
        xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
      } catch (e) {
        try {
          xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {}
      }
    }

    if (xmlhttp == null) {
      console.log("Your browser does not support XMLHTTP.");
      return;
    }

    return xmlhttp;
  },
  reporterHandel: function reporterHandel(xhr) {
    return function () {
      if (xhr && xhr.readyState) {
        switch (xhr.readyState) {
          case 0:
            break;

          case 1:
            break;

          case 2:
            break;

          case 3:
            break;

          case 4:
            break;
        }
      }
    };
  },
  defDatas: {
    "action": "",
    // 	事件名称
    "version": _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].REPORT_VERSION,
    // TICSDK版本号
    "action_result": 0,
    // 事件错误码
    "action_info": "",
    // 	错误详细信息
    "userid": "",
    // 登录用户的id
    "time_consume": 0,
    //事件耗时，单位毫秒
    "sdkappid": "",
    // sdkappid
    "device": _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PLATFORM,
    // 事件对应的平台
    "log_time": 0,
    //  时间上报时的本地秒级时间戳
    "business": 'ticsdk',
    //  业务sdk名字
    "roomid": "",
    // 房间id，进房以及在房间中的所有事件都要带上
    "boardid": '',
    // 白板id, 所有在白板上的操作都要带上
    "image_url": '',
    // 图片下载地址，设置白本背景图时需要带上
    "boardid_list": [],
    // 白板id数组，创建白板时需要带上
    "to_boardId": '',
    // 删除白板id时，需要带上，删除白板后跳转到哪一个白板
    "color": null,
    // 颜色值，设置白板背景色时需要带上
    "file_id": '',
    // 文件id,添加文件或删除文件时需要带上
    "file_title": '',
    // 文件title,添加文件时需要带上
    "isfinish": 0,
    // 拉取会议全量消息时需要带上，0:拉取未完成 1:拉取完成
    "msgLength": 20,
    // 拉取会议全量消息时需要带上，单次拉取到的消息个数
    "bucket": '',
    // cos空间名，上传文件时需要带上
    "cos_appid": null,
    // cosappid，上传文件时需要带上
    "extra_info": "",
    // 可扩展字段
    "net_type": 'unknown',
    // 
    "userAgent": null
  },
  setSdkAppid: function setSdkAppid(id) {
    if (id == undefined || id == null) {
      console.log('sdkappid invalid!');
      return;
    }

    this.defDatas.sdkappid = id;
  },
  setRoomId: function setRoomId(id) {
    if (id == undefined || id == null) {
      console.log('roomid invalid!');
      return;
    }

    this.defDatas.roomid = id;
  },
  setUserId: function setUserId(id) {
    if (id == undefined || id == null) {
      console.log('userid invalid!');
      return;
    }

    this.defDatas.userid = id;
  },
  boardAction: function boardAction(action, content) {
    this.report(action, content);
  },
  // 上报日志
  report: function report(action) {
    var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    //////////////////////////////
    try {
      var url = null;

      if (this.waterEvents.indexOf(action) > -1) {
        // 如果是流水日志
        url = this.waterUrl;
      } else {
        url = this.keyUrl;
      }

      this.send(url, Object.assign({
        action_result: 0,
        time_consume: 0
      }, content, {
        'action': action,
        'log_time': _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
      }));
    } catch (error) {} //////////////

  }
};
/* harmony default export */ __webpack_exports__["default"] = (ELKLog);

/***/ }),

/***/ "./src/net/Heartbeat.js":
/*!******************************!*\
  !*** ./src/net/Heartbeat.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");




function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Heartbeat =
/*#__PURE__*/
function () {
  function Heartbeat(_ref) {
    var _ref$newEnterId = _ref.newEnterId,
        newEnterId = _ref$newEnterId === void 0 ? 0 : _ref$newEnterId,
        classId = _ref.classId,
        request = _ref.request,
        log = _ref.log;

    _classCallCheck(this, Heartbeat);

    this.$request = request;
    this.elkLog = log;
    this.classId = Number(classId);
    this.newEnterId = Number(newEnterId) || 0;
    this.defaultTimeout = 30 * 1000; // unit : second  // 30秒

    this.maxTimeout = this.defaultTimeout * 10; // 最大300秒（5分钟）间隔

    this.timeout = this.defaultTimeout;
    this.status = true;
    this.sto = null;
    this.maxRetry = 10;
    this.retryCount = 0;
    this.LastReportTime = 0;
    this.visible = true;
    this._heartbeatLifecycle = 'live'; // 心跳生命周期  live 激活状态   destroy 销毁状态
  }

  _createClass(Heartbeat, [{
    key: "beat",
    value: function beat(event) {
      var _this = this;

      //////////////////////////////////
      clearTimeout(this.sto);
      var businessType = ''; /////////////////////////////////////
      ////////////////////////////
      /////////////

      businessType = 'whiteboard'; //////////////

      var data = {
        LastReportTime: this.LastReportTime,
        HeartbeatVersion: "2.0",
        RoomId: this.classId,
        HeartbeatList: [{
          BusinessType: businessType,
          Submodule: '',
          CustomData: {
            Event: event
          }
        }],
        ClientVersion: _config_Config__WEBPACK_IMPORTED_MODULE_4__["default"].VERSION,
        NewEnterId: this.newEnterId,
        UserAgent: navigator ? navigator.userAgent : '',
        BackgroundState: this.visible ? 0 : 1 //0-在前台，1-退入后台

      };

      if (this._heartbeatLifecycle === 'destroy') {
        // 如果已经调用销毁了，就不再报了
        return Promise.reject();
      }

      var startTime = _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getTimeStamp();
      var promise = this.$request.heartbeat(data);

      if (!_util_util__WEBPACK_IMPORTED_MODULE_3__["default"].isPromise(promise)) {
        // 如果返回的不是promise
        return Promise.reject();
      }

      return promise.then(function (res) {
        if (res.data.Response && !res.data.Response.Error) {
          _this.retryCount = 0;
          _this.LastReportTime = res.data.Response.ReportTime; //更新下次上报的时间

          _this.timeout = res.data.Response.IntervalTime * 1000;

          _this.trigger();
        } else {
          _this.retryCount++;
          _this.timeout = Math.min(Math.ceil(_this.retryCount / 10) * _this.defaultTimeout, _this.maxTimeout);

          _this.trigger();

          _this.reportElk(startTime, res.data);
        }
      }).catch(function (e) {
        _this.retryCount++;
        _this.timeout = Math.min(Math.ceil(_this.retryCount / 10) * _this.defaultTimeout, _this.maxTimeout);

        _this.trigger();

        _this.reportElk(startTime, e);
      }); //////////////
    }
  }, {
    key: "trigger",
    value: function trigger() {
      var _this2 = this;

      clearTimeout(this.sto);
      this.sto = setTimeout(function () {
        _this2.beat(null).catch(function (error) {});
      }, this.timeout || this.defaultTimeout);
    }
  }, {
    key: "setClassId",
    value: function setClassId(classId) {
      this.classId = Number(classId);
    }
  }, {
    key: "setVisible",
    value: function setVisible(visible) {
      this.visible = visible;
      var name = visible ? 'visible' : 'unvisible';
      var event = [{
        name: name,
        timestamp: _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getSecondTime()
      }];
      this.beat(event).catch(function (error) {});
    }
  }, {
    key: "start",
    value: function start() {
      var event = [{
        name: 'init',
        timestamp: _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getSecondTime()
      }];
      this.beat(event).catch(function (error) {});
    }
  }, {
    key: "pause",
    value: function pause() {
      this.status = false;
      clearTimeout(this.sto);
    }
  }, {
    key: "resume",
    value: function resume() {
      this.status = true;
      this.beat(null).catch(function (error) {});
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this3 = this;

      var event = [{
        name: 'uninit',
        timestamp: _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getSecondTime()
      }];
      this.beat(event).then(function () {
        _this3._heartbeatLifecycle = 'destroy'; // 已经销毁 

        clearTimeout(_this3.sto);
      }).catch(function () {
        _this3._heartbeatLifecycle = 'destroy'; // 已经销毁 

        clearTimeout(_this3.sto);
      });
    }
  }, {
    key: "reportElk",
    value: function reportElk(startTime, error) {
      // 上报心跳错误
      this.elkLog.report('heartbeat_error', {
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_3__["default"].getTimeStamp() - startTime,
        extra_info: JSON.stringify({
          retryCount: this.retryCount,
          // 重试次数
          error: error
        })
      });
    }
  }]);

  return Heartbeat;
}();

/* harmony default export */ __webpack_exports__["default"] = (Heartbeat);

/***/ }),

/***/ "./src/net/LocalAxios.js":
/*!*******************************!*\
  !*** ./src/net/LocalAxios.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
/* harmony import */ var core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_promise__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_3__);






/* harmony default export */ __webpack_exports__["default"] = ({
  getInstance: function getInstance(config) {
    var _this = this;

    var instance = window.axios.create({
      timeout: 5000 // 请求超时时间（毫秒）

    });
    this.elkLog = config.elkLog; // 重新请求的次数

    instance.defaults.retry = 3; // 重新请求的间隔

    instance.defaults.retryDelay = 1000; // 设置请求拦截

    instance.interceptors.request.use(function (config) {
      return config;
    }, function (error) {
      return Promise.reject(error);
    });

    var axiosRetryInterceptor = function axiosRetryInterceptor(res) {
      var config = res.config;

      if (config.data) {
        try {
          var jsonData = JSON.parse(config.data);

          if (jsonData.first_time === false) {
            jsonData.first_time = true;
            config.data = JSON.stringify(jsonData);
          }
        } catch (error) {}
      }

      var random = Math.floor(Math.random() * 100000000);

      if (config.url.indexOf('random=') > -1) {
        // 如果有随机数
        var match = config.url.match(/random=\d*/);

        if (match) {
          try {
            config.url = config.url.replace(/random=\d*/, 'random=' + random);
          } catch (error) {}
        }
      } else {
        // 如果没有随机数
        if (config.url.indexOf('?') > -1) {
          // 如果已经存在了?
          config.url += "&random=".concat(random);
        } else {
          config.url += "?random=".concat(random);
        }
      } // 假如config为空或config没有设置retry，直接reject


      if (!config || !config.retry) {
        return Promise.reject(res);
      } // 重置重试次数


      config.__retryCount = config.__retryCount || 0; // 检查是否超过重置次数

      if (config.__retryCount >= config.retry) {
        return Promise.reject(res);
      } // 重发计数器加1


      config.__retryCount += 1; // 延时重发

      var backoff = new Promise(function (resolve) {
        setTimeout(function () {
          resolve();
        }, config.retryDelay || 1000);
      }); // 重发请求

      return backoff.then(function () {
        return instance(config);
      });
    }; // 设置响应拦截


    instance.interceptors.response.use(function (response) {
      if (response.status == 200) {
        try {
          if (response.data.ErrorCode === 60008) {
            // sso超时
            return axiosRetryInterceptor(response);
          }
        } catch (error) {
          return response;
        }
      }

      return response;
    }, axiosRetryInterceptor);
    return new Promise(function (resolve, reject) {
      instance(config).then(function (response) {
        resolve(response);
      }, function (error) {
        try {
          var message = '';

          if (error.response) {
            message = JSON.stringify({
              'data': error.response.data,
              'status': error.response.status,
              'headers': error.response.headers,
              'config': error.config,
              'message': error.message
            });
          } else if (error.request) {
            message = JSON.stringify({
              'request': error.request,
              'config': error.config,
              'message': error.message
            });
          } else {
            message = JSON.stringify({
              'message': error.message,
              'config': error.config
            });
          }

          _this.elkLog.report('requestError', {
            action_result: -1,
            extra_info: message
          });
        } catch (error) {
          _this.elkLog.report('requestError', {
            action_result: -2,
            extra_info: {
              stack: error.stack,
              message: error.message
            }
          });
        }

        reject(error);
      });
    });
  }
});

/***/ }),

/***/ "./src/net/Report.js":
/*!***************************!*\
  !*** ./src/net/Report.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_Seq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Seq */ "./src/util/Seq.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _config_Constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/Constant */ "./src/config/Constant.js");
/* harmony import */ var _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../model/TEduBoardImageFitMode */ "./src/model/TEduBoardImageFitMode.js");






function Report(request, log) {
  this.request = request;
  this.elkLog = log;
}

Report.prototype.setPreCallback = function (callback) {
  this.preCallback = callback;
};

Report.prototype.setCallback = function (callback) {
  this.callback = callback;
};

Report.prototype.reportCreateBoards = function (currentBoard, boardId) {
  var _this = this;

  var boards = [];

  if (Array.isArray(boardId)) {
    boards = boardId;
  } else {
    boards = [boardId];
  }

  if (boards.length === 0) {
    return;
  }

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'createBoards',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      fid: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].boardId2Fid(boards[0]),
      createBoards: boards,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this.elkLog.boardAction('createBoards', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: currentBoard,
        boardid_list: boards,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this.elkLog.boardAction('createBoards', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: currentBoard,
        boardid_list: boards,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this.elkLog.boardAction('createBoards', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: currentBoard,
      boardid_list: boards,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportDeleteBoard = function (deleteBoards, currentBoard) {
  var _this2 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'deleteBoards',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      deleteBoards: deleteBoards,
      toBoardId: currentBoard,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this2.elkLog.boardAction('deleteBoards', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: deleteBoards,
        image_url: null,
        to_boardId: currentBoard,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this2.elkLog.boardAction('deleteBoards', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: deleteBoards,
        image_url: null,
        to_boardId: currentBoard,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this2.elkLog.boardAction('deleteBoards', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: null,
      boardid_list: deleteBoards,
      image_url: null,
      to_boardId: currentBoard,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportSetBoardBgColor = function (boardId, color) {
  var _this3 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    "type": "setBoardBG",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    "content": {
      "boardId": boardId,
      "updateTime": _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp(),
      "colorRGBA": color
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this3.elkLog.boardAction('setBoardBG', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: color,
        file_id: null,
        file_title: null
      });
    } else {
      _this3.elkLog.boardAction('setBoardBG', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: color,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this3.elkLog.boardAction('setBoardBG', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: boardId,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: color,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportClear = function (boardID) {
  var _this4 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'clean',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      boardId: boardID,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this4.elkLog.boardAction('clean', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardID,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this4.elkLog.boardAction('clean', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardID,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this4.elkLog.boardAction('clean', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: boardID,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportClearDraws = function (boardID) {
  var _this5 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'cleanDraws',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      boardId: boardID,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this5.elkLog.boardAction('cleanDraws', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardID,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this5.elkLog.boardAction('cleanDraws', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardID,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this5.elkLog.boardAction('cleanDraws', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: boardID,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportImage = function (boardId, url) {
  var _this6 = this;

  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _model_TEduBoardImageFitMode__WEBPACK_IMPORTED_MODULE_4__["default"].TEDU_BOARD_IMAGE_FIT_MODE_CENTER;
  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _config_Constant__WEBPACK_IMPORTED_MODULE_3__["default"].BACKGROUND_TYPE.IMAGE;
  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'image',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      fid: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].boardId2Fid(boardId),
      boardId: boardId,
      url: url,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp(),
      type: type,
      mode: mode
    }
  }], function (res) {
    var boardInfo = {};
    boardInfo[boardId] = url;

    if (res.ErrorCode || res.error_code) {
      _this6.elkLog.boardAction('image', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: [boardInfo],
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this6.elkLog.boardAction('image', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: [boardInfo],
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    var boardInfo = {};
    boardInfo[boardId] = url;

    _this6.elkLog.boardAction('image', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: null,
      boardid_list: [boardInfo],
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportImages = function (reportMsg) {
  var _this7 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();

  for (var i = 0, len = Math.ceil(reportMsg.length / 100); i < len; i++) {
    var msgs = [];
    msgs = reportMsg.slice(i * 100, (i + 1) * 100);
    this.reportMsg(msgs, function (res) {
      var boardInfoList = [];
      reportMsg.forEach(function (item) {
        var obj = {};
        obj[item.content.boardId] = item.content.url;
        boardInfoList.push(obj);
      });

      if (res.ErrorCode || res.error_code) {
        _this7.elkLog.boardAction('image', {
          action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
          action_info: res.ErrorInfo || res.error_msg,
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
          boardid: null,
          boardid_list: boardInfoList,
          to_boardId: null,
          color: null,
          file_id: null,
          file_title: null
        });
      } else {
        _this7.elkLog.boardAction('image', {
          action_result: 0,
          action_info: null,
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
          boardid: null,
          boardid_list: boardInfoList,
          to_boardId: null,
          color: null,
          file_id: null,
          file_title: null
        });
      }
    }, function (error) {
      var boardInfoList = [];
      reportMsg.forEach(function (item) {
        var obj = {};
        obj[item.content.boardId] = item.content.url;
        boardInfoList.push(obj);
      });

      _this7.elkLog.boardAction('image', {
        action_result: -9999,
        action_info: error && error.message,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: boardInfoList,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    });
  }
};

Report.prototype.reportSwitchBoard = function (reportData) {
  var _this8 = this;

  var boardId = reportData.boardId;
  var fid = reportData.fid;
  var url = reportData.url;
  var type = reportData.type;
  var page = reportData.page;
  var step = reportData.step;
  var ratio = reportData.ratio;
  var scale = reportData.scale;
  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'switchBoard',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      boardId: boardId,
      fid: fid,
      url: url,
      type: type,
      page: page,
      step: step,
      ratio: ratio,
      scale: scale,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this8.elkLog.boardAction('switchBoard', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this8.elkLog.boardAction('switchBoard', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this8.elkLog.boardAction('switchBoard', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: boardId,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportGlobalBgColor = function (color) {
  var _this9 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    "type": "setGlobalBG",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    "content": {
      "updateTime": _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp(),
      "colorRGBA": color
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this9.elkLog.boardAction('setGlobalBG', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: color,
        file_id: null,
        file_title: null
      });
    } else {
      _this9.elkLog.boardAction('setGlobalBG', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: color,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this9.elkLog.boardAction('setGlobalBG', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: null,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: color,
      file_id: null,
      file_title: null
    });
  });
}; // 上报增加line


Report.prototype.reportAddLine = function (content) {
  var _this10 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'addLine',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: content
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this10.elkLog.boardAction('addLine', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: content.boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: content.colorRGBA,
        file_id: null,
        file_title: null,
        extra_info: JSON.stringify({
          belongSeq: content.belongSeq
        })
      });
    } else {
      _this10.elkLog.boardAction('addLine', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: content.boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: content.colorRGBA,
        file_id: null,
        file_title: null,
        extra_info: JSON.stringify({
          belongSeq: content.belongSeq
        })
      });
    }
  }, function (error) {
    _this10.elkLog.boardAction('addLine', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: content.boardId,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: content.colorRGBA,
      file_id: null,
      file_title: null,
      extra_info: JSON.stringify({
        belongSeq: content.belongSeq
      })
    });
  });
}; // 上报增加Text


Report.prototype.reportAddText = function (content) {
  var _this11 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'addText',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: content
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this11.elkLog.boardAction('addText', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: content.boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: content.colorRGBA,
        file_id: null,
        file_title: null,
        text: content.text
      });
    } else {
      _this11.elkLog.boardAction('addText', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: content.boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: content.colorRGBA,
        file_id: null,
        file_title: null,
        text: content.text
      });
    }
  }, function (error) {
    _this11.elkLog.boardAction('addText', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: content.boardId,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: content.colorRGBA,
      file_id: null,
      file_title: null,
      text: content.text
    });
  });
}; // 隐藏、显示线条（橡皮擦）


Report.prototype.reportDisplayLine = function (content) {
  var _this12 = this;

  console.log("reportDisplayLine: ");
  console.log(content);
  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'displayLine',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: content
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this12.elkLog.boardAction('displayLine', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: content.boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null,
        display: content.display
      });
    } else {
      _this12.elkLog.boardAction('displayLine', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: content.boardId,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null,
        display: content.display
      });
    }
  }, function (error) {
    _this12.elkLog.boardAction('displayLine', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: content.boardId,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null,
      display: content.display
    });
  });
};

Report.prototype.reportGraphData = function (reportMsg) {
  var _this13 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg(reportMsg, function (res) {
    reportMsg.forEach(function (item) {
      if (res.ErrorCode || res.error_code) {
        _this13.elkLog.boardAction(item.type, {
          action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
          action_info: res.ErrorInfo || res.error_msg,
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
          boardid: item.content.boardId,
          boardid_list: null,
          to_boardId: null,
          color: item.content.colorRGBA,
          file_id: null,
          file_title: null
        });
      } else {
        _this13.elkLog.boardAction(item.type, {
          action_result: 0,
          action_info: null,
          time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
          boardid: item.content.boardId,
          boardid_list: null,
          to_boardId: null,
          color: item.content.colorRGBA,
          file_id: null,
          file_title: null
        });
      }
    });
  }, function (error) {
    reportMsg.forEach(function (item) {
      _this13.elkLog.boardAction(item.type, {
        action_result: -9999,
        action_info: error && error.message,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: item.content.boardId,
        boardid_list: null,
        to_boardId: null,
        color: item.content.colorRGBA,
        file_id: null,
        file_title: null
      });
    });
  });
}; // fid, title, downloadURL, pageCount, currentPageIndex, userId


Report.prototype.reportAddFile = function (file) {
  var _this14 = this;

  var fid = file.fid;
  var title = file.title;
  var downloadURL = file.downloadURL;
  var pageCount = file.pageCount;
  var currentPageIndex = file.currentPageIndex;
  var currentPageStep = file.currentPageStep;
  var userId = file.uid;
  var timestamp = file.timestamp;
  var platform = file.platform;
  var type = file.type;
  var ratio = file.ratio;
  var scale = file.scale;
  var isTranscodeFile = file.isTranscodeFile; //多媒体文件特有属性

  var status = file.status;
  var progress = file.progress;
  var isUpdateScale = file.isUpdateScale || 0;
  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  console.log("add 1file status ".concat(status));
  this.reportMsg([{
    "type": "addFile",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    "content": {
      "updateTime": _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp(),
      "fid": fid,
      // 文件唯一标识
      "title": title,
      // 文件名称
      "downloadURL": downloadURL,
      "pageCount": pageCount,
      "currentPageIndex": currentPageIndex,
      "currentPageStep": currentPageStep,
      "uid": userId,
      // 上传者的userid
      "timestamp": timestamp,
      // 生成白板的时间戳
      "platform": platform || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PLATFORM,
      // 上传者的platform pc/web/ios/android
      "type": type || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].FILE_TYPE.IMG,
      "ratio": ratio,
      "scale": scale,
      "isTranscodeFile": isTranscodeFile,
      "status": status,
      "progress": progress,
      isUpdateScale: isUpdateScale
    }
  }], function (res) {
    console.log("add 1file res ".concat(res.error_code, " ").concat(res.ErrorCode));

    if (res.ErrorCode || res.error_code) {
      _this14.elkLog.boardAction('addFile', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        extra_info: JSON.stringify({
          "downloadURL": downloadURL,
          "pageCount": pageCount,
          "currentPageIndex": currentPageIndex,
          "currentPageStep": currentPageStep,
          "uid": userId,
          // 上传者的userid
          "timestamp": timestamp,
          // 生成白板的时间戳
          "platform": platform || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PLATFORM,
          // 上传者的platform pc/web/ios/android
          "type": type || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].FILE_TYPE.IMG,
          "ratio": ratio,
          "scale": scale,
          "isTranscodeFile": isTranscodeFile,
          "status": status,
          "progress": progress,
          isUpdateScale: isUpdateScale
        }),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: fid,
        file_title: title
      });
    } else {
      _this14.elkLog.boardAction('addFile', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: fid,
        file_title: title,
        extra_info: JSON.stringify({
          "downloadURL": downloadURL,
          "pageCount": pageCount,
          "currentPageIndex": currentPageIndex,
          "currentPageStep": currentPageStep,
          "uid": userId,
          // 上传者的userid
          "timestamp": timestamp,
          // 生成白板的时间戳
          "platform": platform || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PLATFORM,
          // 上传者的platform pc/web/ios/android
          "type": type || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].FILE_TYPE.IMG,
          "ratio": ratio,
          "scale": scale,
          "isTranscodeFile": isTranscodeFile,
          "status": status,
          "progress": progress,
          isUpdateScale: isUpdateScale
        })
      });
    }
  }, function (error) {
    _this14.elkLog.boardAction('addFile', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: null,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: fid,
      file_title: title,
      extra_info: JSON.stringify({
        "downloadURL": downloadURL,
        "pageCount": pageCount,
        "currentPageIndex": currentPageIndex,
        "currentPageStep": currentPageStep,
        "uid": userId,
        // 上传者的userid
        "timestamp": timestamp,
        // 生成白板的时间戳
        "platform": platform || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].PLATFORM,
        // 上传者的platform pc/web/ios/android
        "type": type || _config_Config__WEBPACK_IMPORTED_MODULE_2__["default"].FILE_TYPE.IMG,
        "ratio": ratio,
        "scale": scale,
        "isTranscodeFile": isTranscodeFile,
        "status": status,
        "progress": progress,
        isUpdateScale: isUpdateScale
      })
    });
  });
};

Report.prototype.reportDeleteFile = function (fid) {
  var _this15 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    type: 'deleteFile',
    seq: _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    content: {
      fid: fid,
      updateTime: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp()
    }
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this15.elkLog.boardAction('deleteFile', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: fid,
        file_title: null
      });
    } else {
      _this15.elkLog.boardAction('deleteFile', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: fid,
        file_title: null
      });
    }
  }, function (error) {
    _this15.elkLog.boardAction('deleteFile', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: null,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: fid,
      file_title: null
    });
  });
};
/**
 * 设置分辨率
 */


Report.prototype.reportDrag = function (dragData) {
  var _this16 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    "type": "drag",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    "content": dragData
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this16.elkLog.boardAction('drag', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        extra_info: JSON.stringify(dragData)
      });
    } else {
      _this16.elkLog.boardAction('drag', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        extra_info: JSON.stringify(dragData)
      });
    }
  }, function (error) {
    _this16.elkLog.boardAction('drag', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      extra_info: JSON.stringify(dragData)
    });
  });
};
/**
 * 设置分辨率
 */


Report.prototype.reportsetBoardRatio = function (ratioData) {
  var _this17 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    "type": "setRatio",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    "content": ratioData
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this17.elkLog.boardAction('setRatio', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        extra_info: JSON.stringify(ratioData)
      });
    } else {
      _this17.elkLog.boardAction('setRatio', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        extra_info: JSON.stringify(ratioData)
      });
    }
  }, function (error) {
    _this17.elkLog.boardAction('setRatio', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      extra_info: JSON.stringify(ratioData)
    });
  });
};
/**
 * 设置分辨率
 */


Report.prototype.reportsetBoardContentFitMode = function (modeData) {
  this.reportMsg([{
    "type": "setBoardContentFitMode",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
    "content": modeData
  }], function (res) {}, function (error) {});
};
/**
 * 增加图片元素
 */


Report.prototype.reportImageElement = function (modeData) {
  var data = [];

  if (_util_util__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(modeData)) {
    modeData.forEach(function (item) {
      data.push({
        "type": "imageElement",
        "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
        "content": item
      });
    });
  } else {
    data.push({
      "type": "imageElement",
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
      "content": modeData
    });
  }

  this.reportMsg(data, function (res) {}, function (error) {});
};
/**
 * 增加图片元素
 */


Report.prototype.reportElement = function (modeData) {
  var data = [];

  if (_util_util__WEBPACK_IMPORTED_MODULE_1__["default"].isArray(modeData)) {
    modeData.forEach(function (item) {
      data.push({
        "type": item.type,
        "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
        "content": item.property
      });
    });
  } else {
    data.push({
      "type": modeData.type,
      "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq(),
      "content": modeData.property
    });
  }

  this.reportMsg(data, function (res) {}, function (error) {});
};
/**
 * 清空所有数据
 */


Report.prototype.reportCleanAll = function () {
  var _this18 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeStamp();
  this.reportMsg([{
    "type": "cleanAll",
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_0__["default"].getSeq()
  }], function (res) {
    if (res.ErrorCode || res.error_code) {
      _this18.elkLog.boardAction('cleanAll', {
        action_result: res.ErrorCode ? "ErrorCode:".concat(res.ErrorCode) : "error_code:".concat(res.error_code),
        action_info: res.ErrorInfo || res.error_msg,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    } else {
      _this18.elkLog.boardAction('cleanAll', {
        action_result: 0,
        action_info: null,
        time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
        boardid: null,
        boardid_list: null,
        image_url: null,
        to_boardId: null,
        color: null,
        file_id: null,
        file_title: null
      });
    }
  }, function (error) {
    _this18.elkLog.boardAction('cleanAll', {
      action_result: -9999,
      action_info: error && error.message,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeDiff(startTime),
      boardid: null,
      boardid_list: null,
      image_url: null,
      to_boardId: null,
      color: null,
      file_id: null,
      file_title: null
    });
  });
};

Report.prototype.reportMsg = function (data, succCallback, failCallback) {
  var _this19 = this;

  this.preCallback && this.preCallback(data);
  this.request.reportMsg(data, function (res) {
    succCallback && succCallback(res);
    _this19.callback && _this19.callback(data, null);
  }, function (error) {
    failCallback && failCallback(error);
    _this19.callback && _this19.callback(data, error);
  });
};

/* harmony default export */ __webpack_exports__["default"] = (Report);

/***/ }),

/***/ "./src/net/Request.js":
/*!****************************!*\
  !*** ./src/net/Request.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_Seq__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Seq */ "./src/util/Seq.js");
/* harmony import */ var _util_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/util */ "./src/util/util.js");
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _LocalAxios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LocalAxios */ "./src/net/LocalAxios.js");


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






function Request(options) {
  this.permissions = false;
  this.reportEnable = false;
  this.option = Object.assign({}, options);
  this.elkLog = options.elkLog;

  if (!this.option.tlsData) {
    throw new Error('not found sdkAppId|userId|userSig');
  }

  if (!this.option.tlsData.sdkAppId) {
    throw new Error('not found sdkAppId');
  }

  if (!this.option.tlsData.identifier) {
    throw new Error('not found userId');
  }

  if (!this.option.tlsData.userSig) {
    throw new Error('not found userSig');
  }

  this.BOARD_URL = (options.isTest ? _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TEST_SERVER_URL : _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].SERVER_URL) + this.option.tlsData.sdkAppId;
  this.COS_SERVER_URL = options.isTest ? _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TEST_COS_SERVER_URL : _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].COS_SERVER_URL;
  this.WHITELIST_SERVER_URL = (options.isTest ? _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TEST_WHITELIST_SERVER_URL : _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].WHITELIST_SERVER_URL) + this.option.tlsData.sdkAppId;
  this.TRANSCODE_SERVER_URL = (options.isTest ? _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TEST_TRANSCODE_SERVER_URL : _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TRANSCODE_SERVER_URL) + this.option.tlsData.sdkAppId;
  this.HEARTBEAT_SERVER_URL = (options.isTest ? _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TEST_HEARTBEAT_SERVER_URL : _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].HEARTBEAT_SERVER_URL) + this.option.tlsData.sdkAppId; // 企业微信告警通知服务

  this.NOTIFY_SERVER_URL = (options.isTest ? _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].TEST_NOTIFY_SERVER_URL : _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].NOTIFY_SERVER_URL) + this.option.tlsData.sdkAppId;
}

Request.prototype.setPermissions = function () {
  var permissions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  this.permissions = permissions;
};

Request.prototype.initXmlHttp = function () {
  var ActiveXObject = window.ActiveXObject;
  var xmlHttp = null;

  if (XMLHttpRequest) {
    xmlHttp = new XMLHttpRequest();
  } else {
    xmlHttp = new ActiveXObject('Microsoft.XMLHTTP');
  }

  return xmlHttp;
};

Request.prototype.setReportEnable = function () {
  var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  this.reportEnable = enable;
}; // 上报数据


Request.prototype.reportMsg = function (report, callback, errorCallback) {
  if (!this.option.classId || !this.permissions || !this.reportEnable) {
    // 如果没有课堂ID，则不上报  没有权限也不上报，禁止上报也不上报
    return;
  }

  var data = {
    "cmd": "open_conf_svc",
    "sub_cmd": "report_board_data",
    "conf_id": parseInt(this.option.classId, 10),
    "board_data_list": report
  };
  this.post(data, callback, errorCallback);
}; // 获取白板的历史数据


Request.prototype.getBoardData = function () {
  var isFirstRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  var errorCallback = arguments.length > 2 ? arguments[2] : undefined;
  var data = {
    "first_time": isFirstRequest,
    "cmd": "open_conf_svc",
    "sub_cmd": "get_board_data_bulk",
    // 老版本后台接口拉取使用get_board_data_bulk
    // "sub_cmd": "get_board_data", // 新版本后台接口拉取使用get_board_data
    "seq": _util_Seq__WEBPACK_IMPORTED_MODULE_1__["default"].getSeq(),
    "conf_id": parseInt(this.option.classId, 10),
    "version": 1
  };
  this.post(data, callback, errorCallback);
}; // 获取白板的某条线的数据


Request.prototype.getLineData = function (data, callback, errorCallback) {
  var _this = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp();
  var params = {
    "cmd": "open_conf_svc",
    "sub_cmd": "get_line",
    "conf_id": parseInt(this.option.classId, 10),
    "boardId": data.boardId,
    "owner": data.owner,
    "seq": data.seq
  };
  this.post(params, function (res) {
    _this.elkLog.report('getLineData', {
      action_result: 0,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify(res)
    });

    callback && callback(res);
  }, function (error) {
    _this.elkLog.report('getLineData', {
      action_result: -1,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify(error)
    });

    errorCallback && errorCallback(error);
  });
}; // 获取指定文件


Request.prototype.getFileInfo = function (data, callback, errorCallback) {
  var _this2 = this;

  var startTime = _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp();
  var params = {
    "cmd": "open_conf_svc",
    "sub_cmd": "get_file",
    "conf_id": parseInt(this.option.classId, 10),
    "fid": data.fid
  };
  this.post(params, function (res) {
    _this2.elkLog.report('getFileInfo', {
      action_result: 0,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify(res)
    });

    callback && callback(res);
  }, function (error) {
    _this2.elkLog.report('getFileInfo', {
      action_result: -1,
      time_consume: _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].getTimeStamp() - startTime,
      extra_info: JSON.stringify(error)
    });

    errorCallback && errorCallback(error);
  });
}; // 获取总页数


Request.prototype.getDocTotalPage = function (cosUrl) {
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: cosUrl,
    method: "get",
    responseType: 'blob'
  });
};
/**
 * 获取cos鉴权信息
 */


Request.prototype.getCosAuthData = function (bucket) {
  var url = this.COS_SERVER_URL + "?SdkAppId=".concat(this.option.tlsData.sdkAppId, "&Identifier=").concat(this.option.tlsData.identifier, "&UserSig=").concat(this.option.tlsData.userSig);
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: {
      "cmd": "open_cos_svc",
      "sub_cmd": "get_cos_token_for_bucket",
      "bucket": bucket,
      "duration": 300,
      "version": 2
    }
  }); // return localAxios.getInstance({
  // elkLog: this.elkLog,
  //   url: url,
  //   method: "post",
  //   data: {
  //     "cmd": "open_cos_svc",
  //     "sub_cmd": "get_cos_token",
  //     "duration": 300,
  //     "version": 2
  //   }
  // });
};
/**
 * 申请权限
 */


Request.prototype.applyPermissions = function () {
  var url = this.WHITELIST_SERVER_URL + '&usersig=' + this.option.tlsData.userSig + '&identifier=' + this.option.tlsData.identifier;
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: {
      "cmd": "open_conf_svc",
      "sub_cmd": "verify_sdk",
      "sdkappid": this.option.tlsData.sdkAppId * 1,
      "version": 1
    }
  });
};

Request.prototype.heartbeat = function (data) {
  if (!this.permissions) {
    // 鉴权没有通过，则不上报
    return;
  }

  var url = this.HEARTBEAT_SERVER_URL + '&usersig=' + this.option.tlsData.userSig + '&identifier=' + this.option.tlsData.identifier + '&contenttype=json&random=' + parseInt(Math.random(0, 1) * 100000000);
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: Object.assign({
      LastReportTime: 0,
      HeartbeatVersion: "1.0"
    }, data)
  });
};

Request.prototype.createTranscode = function (data) {
  var url = this.TRANSCODE_SERVER_URL + '&usersig=' + this.option.tlsData.userSig + '&identifier=' + this.option.tlsData.identifier;
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: Object.assign({
      "Action": "CreateTranscode"
    }, _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].camelCase2CamelCase(data))
  });
};

Request.prototype.describeTranscode = function (data) {
  var url = this.TRANSCODE_SERVER_URL + '&usersig=' + this.option.tlsData.userSig + '&identifier=' + this.option.tlsData.identifier;
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: Object.assign({
      "Action": "DescribeTranscode"
    }, _util_util__WEBPACK_IMPORTED_MODULE_2__["default"].camelCase2CamelCase(data))
  });
};
/**
 * 请求文件消息
 */


Request.prototype.requestFileMessage = function (url) {
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "get"
  });
};
/**
 * 加载字体
 */


Request.prototype.requestFont = function () {
  var url = _config_Config__WEBPACK_IMPORTED_MODULE_3__["default"].fontUrl;
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "get"
  });
};
/**
 *
 * 机器人告警通知
 */


Request.prototype.machineNotify = function (msgtype, content) {
  var url = this.NOTIFY_SERVER_URL + '&usersig=' + this.option.tlsData.userSig + '&identifier=' + this.option.tlsData.identifier;
  return _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: _defineProperty({
      "msgtype": msgtype
    }, msgtype, {
      "content": content
    })
  });
}; // 发送post请求


Request.prototype.urlPost = function (url, data, callback, errorCallback) {
  if (typeof axios === 'undefined') {
    this.cPost(url, data, callback, errorCallback);
  } else {
    this.axiosPost(url, data, callback, errorCallback);
  }
}; // 发送post请求


Request.prototype.post = function (data, callback, errorCallback) {
  var url = this.BOARD_URL + '&usersig=' + this.option.tlsData.userSig + '&identifier=' + this.option.tlsData.identifier;

  if (typeof axios === 'undefined') {
    this.cPost(url, data, callback, errorCallback);
  } else {
    this.axiosPost(url, data, callback, errorCallback);
  }
};

Request.prototype.axiosPost = function (url, data, callback, errorCallback) {
  _LocalAxios__WEBPACK_IMPORTED_MODULE_4__["default"].getInstance({
    elkLog: this.elkLog,
    url: url,
    method: "post",
    data: data
  }).then(function (response) {
    callback && callback(response.data, response);
  }).catch(function (error) {
    errorCallback && errorCallback(error);
  });
};

Request.prototype.corsGet = function (url, resolve, reject) {
  var request = new XMLHttpRequest();

  request.onreadystatechange = function () {
    if (request.readyState == 2) {
      request.onreadystatechange = null;
      request.abort();
      resolve();
    } else if (request.readyState == 4) {
      reject();
    }
  };

  request.open('GET', url);
  request.send();
};

Request.prototype.cPost = function (url, data, callback, errorCallback) {
  var xmlHttp = this.initXmlHttp();
  var self = this;
  xmlHttp.open("POST", url, true);
  xmlHttp.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
  xmlHttp.send(JSON.stringify(data));

  xmlHttp.onreadystatechange = function () {
    if (xmlHttp.readyState == 4) {
      if (xmlHttp.status >= 200 && xmlHttp.status < 300 || xmlHttp.status == 304) {
        var ret = null;

        try {
          ret = JSON.parse(xmlHttp.responseText);
          console.log('data:', data, '  ret:', ret);
          callback && callback(ret);
        } catch (e) {
          errorCallback && errorCallback(e);
        }
      } else {
        var error = new Error("Network Error");
        errorCallback && errorCallback(error);
      }
    }
  };
};

/* harmony default export */ __webpack_exports__["default"] = (Request);

/***/ }),

/***/ "./src/util/Seq.js":
/*!*************************!*\
  !*** ./src/util/Seq.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! long */ "./node_modules/long/src/long.js");
/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util */ "./src/util/util.js");





/* harmony default export */ __webpack_exports__["default"] = ({
  performanceNow: 0,
  serverTime: 0,
  localTime: 0,
  localServerTimeDiff: 0,
  seq: 0,
  getCurrentTimeStamp: function getCurrentTimeStamp() {
    var time = 0; // 小程序环境下没有window

    if (window && window.performance && window.performance.now) {
      time = this.serverTime + parseInt(window.performance.now() - this.performanceNow);
    } else {
      if (isNaN(this.localServerTimeDiff)) {
        this.localServerTimeDiff = 0;
      }

      time = Date.now() - this.localServerTimeDiff;
    }

    return time;
  },
  getSeq: function getSeq() {
    var time = parseInt(this.getCurrentTimeStamp() / 1000);
    var longValue = new long__WEBPACK_IMPORTED_MODULE_3___default.a(time >>> 0 << 15 | this.seq++ & 0x7fff, time >>> 0 >> 17);
    return longValue.toString() * 1;
  }
});

/***/ }),

/***/ "./src/util/polyfill.js":
/*!******************************!*\
  !*** ./src/util/polyfill.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Node.remove polyfill
 * 解决ie上，android4.2，4.3缺少remove方法的问题
 */
(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('remove')) {
      return;
    }

    Object.defineProperty(item, 'remove', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function remove() {
        this.parentNode && this.parentNode.removeChild && this.parentNode.removeChild(this);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

/***/ }),

/***/ "./src/util/util.js":
/*!**************************!*\
  !*** ./src/util/util.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");
/* harmony import */ var core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_ends_with__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.string.starts-with */ "./node_modules/core-js/modules/es6.string.starts-with.js");
/* harmony import */ var core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
/* harmony import */ var core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_match__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
/* harmony import */ var core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_string__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
/* harmony import */ var core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _config_Config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../config/Config */ "./src/config/Config.js");
/* harmony import */ var _Seq__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Seq */ "./src/util/Seq.js");










/* eslint-disable no-useless-escape */


/* harmony default export */ __webpack_exports__["default"] = ({
  isString: function isString(o) {
    return Object.prototype.toString.call(o) == '[object String]';
  },
  isObject: function isObject(o) {
    return Object.prototype.toString.call(o) == '[object Object]';
  },
  isArray: function isArray(o) {
    return Object.prototype.toString.call(o) == '[object Array]';
  },
  isFunction: function isFunction(o) {
    return Object.prototype.toString.call(o) == '[object Function]';
  },
  isFile: function isFile(o) {
    return Object.prototype.toString.call(o) == '[object File]';
  },
  isUndefined: function isUndefined(o) {
    return Object.prototype.toString.call(o) == '[object Undefined]';
  },
  isNull: function isNull(o) {
    return Object.prototype.toString.call(o) == '[object Null]';
  },
  isNumber: function isNumber(o) {
    return Object.prototype.toString.call(o) == '[object Number]';
  },
  isPromise: function isPromise(o) {
    return Object.prototype.toString.call(o) == '[object Promise]';
  },
  // 十进制转换为十六进制的rgba
  decimalToRgba: function decimalToRgba(decimal) {
    if (decimal.length === 6) {
      decimal += 'ff'; // 补齐alpha
    }

    var rgba = [];
    decimal.replace(/../g, function (color, index) {
      var decColor; // 十进制色值

      if (rgba.length == 3) {
        // alpha
        decColor = parseInt(color, '0x10') / 255;
      } else {
        decColor = parseInt(color, '0x10');
      }

      rgba.push(decColor);
    });
    return "rgba(" + rgba.join(",") + ")";
  },
  // 十六进制转换为rgba(#ffffff)
  hexToRgba: function hexToRgba(hex) {
    var c;

    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
      c = hex.substring(1).split('');

      if (c.length == 3) {
        c = [c[0], c[0], c[1], c[1], c[2], c[2]];
      }

      hex = '#' + c.join('');
      return 'rgba(' + parseInt("0x" + hex.slice(1, 3)) + "," + parseInt("0x" + hex.slice(3, 5)) + "," + parseInt("0x" + hex.slice(5, 7)) + ', 1)';
    }
  },

  /**
   * rgba转十六进制
   */
  rgbaToDecimal: function rgbaToDecimal(rgba) {
    var reg = /[\d\.]+/g;
    var color = rgba.toString().match(reg);
    var hex = '';

    for (var i = 0; i < 3; i++) {
      hex += ("0" + (Number(color[i]) | 0).toString(16)).slice(-2);
    }

    var alpha = 'ff';

    if (color.length >= 4) {
      alpha = ("0" + (Number(Math.min(255, 255 * color[3])) | 0).toString(16)).slice(-2);
    }

    return hex + alpha;
  },
  // 数字颜色转为rgba
  dealColor: function dealColor(color) {
    if (color < 0) {
      // 对负数特殊处理
      var r = color >> 24 & 0xff;
      var g = color >> 16 & 0xff;
      var b = color >> 8 & 0xff;
      return "rgba(" + r + "," + g + "," + b + ",1)";
    }

    var temp = parseInt(color).toString(16);
    var alpha = temp.substr(temp.length - 2, temp.length) || 0; // var alphaDec = parseInt('0x' + alpha, 10); // alpha十进制
    // 截掉alpha

    temp = temp.substr(0, temp.length - 2);
    temp = '000000' + temp; // 补0
    // 截取rgb

    temp = temp.substring(temp.length - 6, temp.length);
    return this.decimalToRgba(temp + alpha);
  },
  // 将rgba r, g, b, a转换为数字
  formatColor: function formatColor(color) {
    var temp = this.rgbaToDecimal(color);
    return parseInt(temp, 16);
  },
  getEffectivePoint: function getEffectivePoint(point, thin) {
    if (point <= 0) {
      point = Math.floor(thin / 2);
    } else if (point >= 10000) {
      point = 10000 - Math.floor(thin / 2);
    }

    return point;
  },
  getAVSdkTimestamp: function getAVSdkTimestamp() {
    var time = this.getTimeStamp() + '';
    var high = time.substring(0, 5) + '00000000'; // 高位

    var low = time.substr(5); // 低位

    var binHigh = parseInt(high, 10).toString(2); // 转为2进制

    var effectiveBinHigh = binHigh.substr(-32); // 因为是& 0xFFFFFFFF 所有只有32位有效

    return parseInt(effectiveBinHigh, 2) + (low & 0xFFFFFFFF); // 将有效的位转为10进制 + 低位&0xFFFFFFFF
  },

  /**
   * 获取毫秒级别时间戳
   */
  getTimeStamp: function getTimeStamp() {
    return _Seq__WEBPACK_IMPORTED_MODULE_10__["default"].getCurrentTimeStamp();
  },

  /**
   * 获取秒级别的时间戳
   */
  getSecondTime: function getSecondTime() {
    return parseInt(this.getTimeStamp() / 1000);
  },

  /**
   * 计算时间差
   * @param {*} start 
   */
  getTimeDiff: function getTimeDiff(start) {
    return this.getTimeStamp() - start;
  },

  /**
   * 格式化时间
   * @param inputTime 毫秒时间
   */
  formatDateTime: function formatDateTime(inputTime) {
    var date = inputTime ? new Date(inputTime) : new Date();
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    m = m < 10 ? '0' + m : m;
    var d = date.getDate();
    d = d < 10 ? '0' + d : d;
    var h = date.getHours();
    h = h < 10 ? '0' + h : h;
    var minute = date.getMinutes();
    var second = date.getSeconds();
    minute = minute < 10 ? '0' + minute : minute;
    second = second < 10 ? '0' + second : second;
    return String(y) + String(m) + String(d) + String(h) + String(minute) + String(second);
  },

  /**
   * 根据白板ID提取fid
   * @param {*} boardId 
   */
  boardId2Fid: function boardId2Fid(boardId) {
    return boardId.substring(boardId.indexOf('#'));
  },

  /**
   * 根据白板ID提取UID
   * @param {*} boardId 
   */
  boardId2Uid: function boardId2Uid(boardId) {
    if (boardId === _config_Config__WEBPACK_IMPORTED_MODULE_9__["default"].COMMON_DEFAULT_BOARD) {
      return '';
    } else {
      var uid = '';

      try {
        uid = boardId.substring(0, boardId.match(/_\d+_\d+_#\w+$/).index);
        uid = uid.substring(uid.indexOf('_') + 1);
      } catch (error) {}

      return uid;
    }
  },

  /**
   * 根据白板Id提取Seq
   * @param {*} boardId 
   */
  boardIdGetSeq: function boardIdGetSeq(boardId) {
    return boardId.match(/\d+_#/)[0].replace(/\D/ig, '');
  },
  // 简单判断是否是cos的下载地址
  isCosUrl: function isCosUrl(url) {
    if (url.indexOf('myqcloud.com') > -1 && url.indexOf('cos') > -1) {
      return true;
    } else {
      return false;
    }
  },
  // cosUrl中提取中文名
  cosUrlExtractFileName: function cosUrlExtractFileName(url) {
    if (url.indexOf('?') > -1) {
      // 如果有？
      url = url.substring(0, url.indexOf('?'));
    }

    var fileName = url.substring(url.lastIndexOf('/') + 1);

    if (url.indexOf('-1257240443') > -1) {
      // 如果是大账号
      if (fileName.match(/\d+_/)) {
        fileName = fileName.substr(fileName.match(/^\d+_/)[0].length);
      }
    }

    return decodeURIComponent(fileName);
  },
  // 将下载地址转换为转码预览地址
  fileDownLoadUrlToPreviewUrl: function fileDownLoadUrlToPreviewUrl(url) {
    if (url.startsWith('https')) {// 如果是https则跳过
    } else if (url.startsWith('http')) {
      url = url.replace('http', 'https');
    } else {
      url = 'https://' + url;
    } // 如果是后台进行的转码


    if (url.endsWith('/')) {
      return url;
    }

    if (url.indexOf('?') > -1) {
      url = url.substring(0, url.indexOf('?'));
    }

    var key = '//';

    if (url.indexOf(key) > -1) {
      url = url.substring(url.indexOf(key) + key.length);
    }

    key = '.';
    var bucketIndex = url.indexOf(key);
    var bucket = url.substr(0, bucketIndex);
    key = '.com';
    var path = url.substring(url.indexOf(key) + key.length);
    return 'https://' + bucket + '.preview.myqcloud.com' + path + '?cmd=doc_preview&of=pic&page=';
  },
  fontStyle2CanvasFontStyle: function fontStyle2CanvasFontStyle(fontStyle) {
    var style = '';

    if (fontStyle === 0) {
      style = '';
    } else if (fontStyle === 1) {
      style = 'bold';
    } else if (fontStyle === 2) {
      style = 'italic';
    } else if (fontStyle === 3) {
      style = 'italic bold';
    }

    return style + ' ';
  },
  // 最大公约数
  maxCommonDivisor: function maxCommonDivisor(num1, num2) {
    return num2 != 0 ? this.maxCommonDivisor(num2, num1 % num2) : num1;
  },
  // 计算白板的宽高比
  calcRatioWidthHeight: function calcRatioWidthHeight(ratio, defaultRatio) {
    var ratioWidth, ratioHeight;

    try {
      var ratios = ratio.split(':');
      ratioWidth = ratios[0] * 1;
      ratioWidth = isNaN(ratioWidth) ? defaultRatio.split(':')[0] : ratioWidth;
      ratioHeight = ratios[1] * 1;
      ratioHeight = isNaN(ratioHeight) ? defaultRatio.split(':')[1] : ratioHeight;
    } catch (error) {
      return this.calcRatioWidthHeight(defaultRatio);
    }

    return {
      ratioWidth: ratioWidth,
      ratioHeight: ratioHeight
    };
  },
  // 移动端设备
  isMobile: function isMobile() {
    var userAgent = navigator.userAgent.toLowerCase();

    if (userAgent.indexOf('macintosh') > -1) {
      // ipad 13版本的判断
      try {
        document.createEvent('TouchEvent');
        return true;
      } catch (error) {
        return false;
      }
    } else {
      return /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    }
  },
  isIOS: function isIOS() {
    var userAgent = navigator.userAgent.toLowerCase();

    if (userAgent.indexOf('macintosh') > -1) {
      // ipad 13版本的判断
      try {
        document.createEvent('TouchEvent');
        return true;
      } catch (error) {
        return false;
      }
    } else {
      return /iphone|ipad|ipod/i.test(userAgent);
    }
  },

  /**
   * 如果是移动端都8910系统
   */
  isIOS8910: function isIOS8910() {
    if (this.isIOS()) {
      var userAgent = navigator.userAgent.toLowerCase();
      var isMobileIos8910 = userAgent.match(/OS (8|9|10)[_\d]* like Mac OS X/i);
      return !!isMobileIos8910;
    } else {
      return false;
    }
  },
  isAndroid: function isAndroid() {
    var userAgent = navigator.userAgent.toLowerCase();
    return /android/i.test(userAgent);
  },
  isTBS: function isTBS() {
    var userAgent = navigator.userAgent.toLowerCase();
    return /tbs/i.test(userAgent);
  },
  parseQueryString: function parseQueryString(url) {
    var obj = {};
    var keyvalue = [];
    var key = "",
        value = "";
    var paraString = url.substring(url.indexOf("?") + 1, url.length).split("&");

    for (var i = 0, len = paraString.length; i < len; i++) {
      keyvalue = paraString[i].split("=");
      key = keyvalue[0];
      value = keyvalue[1];
      obj[key] = value;
    }

    return obj;
  },
  extractTouch: function extractTouch(touchEvent) {
    if (touchEvent && touchEvent.changedTouches && touchEvent.changedTouches[0]) {
      return {
        clientX: touchEvent.changedTouches[0].clientX,
        clientY: touchEvent.changedTouches[0].clientY,
        force: touchEvent.changedTouches[0].force,
        identifier: touchEvent.changedTouches[0].identifier,
        pageX: touchEvent.changedTouches[0].pageX,
        pageY: touchEvent.changedTouches[0].pageY,
        radiusX: touchEvent.changedTouches[0].radiusX,
        radiusY: touchEvent.changedTouches[0].radiusY,
        rotationAngle: touchEvent.changedTouches[0].rotationAngle,
        screenX: touchEvent.changedTouches[0].screenX,
        screenY: touchEvent.changedTouches[0].screenY
      };
    } else {
      return {};
    }
  },

  /**
   * 提取taskId
   */
  extractTaskId: function extractTaskId(url) {
    var arr = url.match('.*/([0-9a-zA-Z-]+)_tiw/h5/.*');

    if (arr && arr.length > 1) {
      return arr[1];
    } else {
      return url.substring(url.indexOf('.com/') + 5, url.indexOf('/index.html'));
    }
  },

  /**
   * 小驼峰转为大驼峰
   * @param {*} label 字段
   */
  camelCase2CamelCase: function camelCase2CamelCase(label) {
    if (this.isString(label)) {
      return label.replace(/(.)(.*)/, label.charAt(0).toUpperCase() + "$2");
    } else if (this.isObject(label)) {
      var object = {}; // 只解一层

      for (var key in label) {
        object[this.camelCase2CamelCase(key)] = label[key];
      }

      return object;
    }
  },

  /**
   * 大驼峰转为小驼峰
   * @param {*} label 字段
   */
  CamelCase2camelCase: function CamelCase2camelCase(label) {
    if (this.isString(label)) {
      return label.replace(/(.)(.*)/, label.charAt(0).toLowerCase() + "$2");
    } else if (this.isObject(label)) {
      var object = {}; // 只解一层

      for (var key in label) {
        object[this.CamelCase2camelCase(key)] = label[key];
      }

      return object;
    }
  },
  // 函数防抖
  debounce: function debounce(fn) {
    var interval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
    var timeout = null;
    return function () {
      var _this = this,
          _arguments = arguments;

      clearTimeout(timeout);
      timeout = setTimeout(function () {
        fn.apply(_this, _arguments);
      }, interval);
    };
  },

  /**
   * 计算点到白板右边界的距离
   * https://main.qcloudimg.com/raw/7420717a1997037a0c07cbefae2fb69f.png
   * @param {*} boardWidth 白板实际宽度
   * @param {*} containerWidth 容器宽度
   * @param {*} boardHeight 白板实际高度
   * @param {*} containerHeight 容器高度
   * @param {*} pointX 点x坐标（归一化）
   * @param {*} pointY 点y坐标（归一化）
   */
  calcPointAndBoardRightBorderDistance: function calcPointAndBoardRightBorderDistance(boardWidth, containerWidth, boardHeight, containerHeight, pointX, pointY) {
    var distanceX = 0,
        distanceY = 0;

    if (boardWidth < containerWidth) {
      // 白板宽度小于容器宽度
      distanceX = boardWidth - pointX / 10000 * boardWidth;
      distanceY = boardHeight - pointY / 10000 * boardHeight;
    } else {
      distanceX = boardWidth - pointX / 10000 * boardWidth;
      distanceY = boardHeight - pointY / 10000 * boardHeight;
    }

    return {
      distanceX: distanceX,
      distanceY: distanceY
    };
  },

  /**
   * 计算点到容器右边界的距离
   * https://main.qcloudimg.com/raw/48eb33d1aec98e62c95a8b888c0ffad7.png
   * @param {*} boardWidth 白板实际宽度
   * @param {*} containerWidth 容器宽度
   * @param {*} boardHeight 白板实际高度
   * @param {*} containerHeight 容器高度
   * @param {*} deviationLeft left 偏移值
   * @param {*} deviationTop top 偏移值
   * @param {*} pointX 点x坐标（归一化）
   * @param {*} pointY 点y坐标（归一化）
   */
  calcPointAndContainerRightBorderDistance: function calcPointAndContainerRightBorderDistance(boardWidth, containerWidth, boardHeight, containerHeight, deviationLeft, deviationTop, pointX, pointY) {
    var distanceX = 0,
        distanceY = 0;

    if (boardWidth < containerWidth) {
      // 白板宽度小于容器宽度
      distanceX = boardWidth - pointX / 10000 * boardWidth;
      distanceY = boardHeight - pointY / 10000 * boardHeight;
    } else {
      distanceX = (boardWidth - containerWidth) / 2 + (50 - deviationLeft) * boardWidth / 100 + containerWidth - pointX / 10000 * boardWidth;
      distanceY = (boardHeight - containerHeight) / 2 + (50 - deviationTop) * boardHeight / 100 + containerHeight - pointY / 10000 * boardHeight;
    }

    return {
      distanceX: distanceX,
      distanceY: distanceY
    };
  },

  /**
   * 计算点到容器左边界的距离
   * https://main.qcloudimg.com/raw/0a998951cf901dc9f4de1142a77d6d33.png
   * @param {*} boardWidth 白板实际宽度
   * @param {*} containerWidth 容器宽度
   * @param {*} boardHeight 白板实际高度
   * @param {*} containerHeight 容器高度
   * @param {*} deviationLeft left 偏移值
   * @param {*} deviationTop top 偏移值
   * @param {*} pointX 点x坐标（归一化）
   * @param {*} pointY 点y坐标（归一化）
   */
  calcPointAndContainerLeftBorderDistance: function calcPointAndContainerLeftBorderDistance(boardWidth, containerWidth, boardHeight, containerHeight, deviationLeft, deviationTop, pointX, pointY) {
    var distanceX = 0,
        distanceY = 0;

    if (boardWidth < containerWidth) {
      // 白板宽度小于容器宽度
      distanceX = pointX / 10000 * boardWidth;
      distanceY = pointY / 10000 * boardHeight;
    } else {
      distanceX = pointX / 10000 * boardWidth - (boardWidth - containerWidth) / 2 - (50 - deviationLeft) * boardWidth / 100;
      distanceY = pointY / 10000 * boardHeight - (boardHeight - containerHeight) / 2 - (50 - deviationTop) * boardHeight / 100;
    }

    return {
      distanceX: distanceX,
      distanceY: distanceY
    };
  },

  /**
   * 压缩到Base64的字符串, String 压缩--> base64字符串
   * @param {*} input 输入字符串
   */
  compress: function compress(input) {
    if (input) {
      var LZString = __webpack_require__(/*! lz-string */ "./node_modules/lz-string/libs/lz-string.js");

      var compressed = LZString.compressToBase64(input);
      return compressed;
    }

    return "";
  },

  /**
   * 解压缩到Base64的字符串, base64字符串 解压缩--> String
   * @param {*} input 输入字符串
   */
  decompress: function decompress(input) {
    if (input) {
      var LZString = __webpack_require__(/*! lz-string */ "./node_modules/lz-string/libs/lz-string.js");

      var decompressed = LZString.decompressFromBase64(input);
      return decompressed;
    }

    return "";
  },

  /*
  str:要绘制的字符串
  canvas:canvas对象
  initX:绘制字符串起始x坐标
  initY:绘制字符串起始y坐标
  lineHeight:字行高，自己定义个值即可
  */
  canvasTextAutoLine: function canvasTextAutoLine(ctx, text, initX, initY, canvasWidth, lineHeight, customWidth) {
    var lineWidth = 0;
    var lastSubStrIndex = 0;
    var textArr = text.split('\n');
    var textHeight = 0; // 记录文字在canvas上的高度

    var textWidth = 0; // 记录文字在canvas上的长度

    var actualWidth = customWidth || canvasWidth - initX - 10 - 2 - 1; //console.log("ACTUAL_WIDTH:", actualWidth);
    // 检测中文与韩文，日文等象形字符表达式

    var reg_ch = /[\u4E00-\u9FA5\uF900-\uFA2D\u0800-\u4e00]/; // 检测中文标点符号

    var reg_ch_punc = /[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/;
    textArr.forEach(function (text, index) {
      if (index > 0) {
        initY += lineHeight;
      }

      lineWidth = 0;
      lastSubStrIndex = 0;

      if (text == "") {
        ctx.fillText(text, initX, initY);
        textHeight += lineHeight;
        lineWidth = 0;
      } else {
        var newLineNumber = 0; // 换行次数

        for (var i = 0; i < text.length; i++) {
          //lineWidth += ctx.measureText(text[i]).width;
          if (reg_ch.test(text[i]) || reg_ch_punc.test(text[i])) {
            lineWidth += ctx.measureText("M").width * 2;
          } else {
            lineWidth += ctx.measureText("M").width;
          }

          textWidth = Math.max(textWidth, lineWidth);

          if (lineWidth > actualWidth + ctx.measureText(text[i]).width / 2) {
            //减去initX,防止边界出现的问题,换行
            ctx.fillText(text.substring(lastSubStrIndex, i), initX, initY, actualWidth);
            textWidth = Math.min(textWidth, actualWidth);

            if (i > 0) {
              // 如果不是第一个字，则换行
              textHeight += lineHeight;
              initY += lineHeight;
            }

            lineWidth = 0;
            lastSubStrIndex = i;

            if (newLineNumber < text.length) {
              newLineNumber++;
              --i;
            }
          }

          if (i == text.length - 1) {
            ctx.fillText(text.substring(lastSubStrIndex, text.length), initX, initY, actualWidth);
            textHeight += lineHeight;
          }
        }
      }
    });
    return [textWidth, textHeight];
  },

  /*
  str:要绘制的字符串
  canvas:canvas对象
  initX:绘制字符串起始x坐标
  initY:绘制字符串起始y坐标
  lineHeight:字行高，自己定义个值即可
  */
  renderTextAutoLine: function renderTextAutoLine(ctx, text, initX, initY, canvasWidth, lineHeight, customWidth) {
    var lineWidth = 0;
    var lastSubStrIndex = 0;
    var textArr = text.split('\n');
    var textHeight = 0; // 记录文字在canvas上的高度

    var textWidth = 0; // 记录文字在canvas上的长度

    var actualWidth = customWidth || canvasWidth - initX - 10 - 2 - 1; //console.log("ACTUAL_WIDTH:", actualWidth);
    // 检测中文与韩文，日文等象形字符表达式

    var reg_ch = /[\u4E00-\u9FA5\uF900-\uFA2D\u0800-\u4e00]/; // 检测中文标点符号

    var reg_ch_punc = /[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/;
    textArr.forEach(function (text, index) {
      if (index > 0) {
        initY += lineHeight;
      }

      lineWidth = 0;
      lastSubStrIndex = 0;

      if (text == "") {
        ctx.fillText(text, initX, initY);
        textHeight += lineHeight;
        lineWidth = 0;
      } else {
        for (var i = 0; i < text.length; i++) {
          //lineWidth += ctx.measureText(text[i]).width;
          if (reg_ch.test(text[i]) || reg_ch_punc.test(text[i])) {
            lineWidth += ctx.measureText("M").width * 2;
          } else {
            lineWidth += ctx.measureText("M").width;
          }

          textWidth = Math.max(textWidth, lineWidth);

          if (lineWidth > actualWidth) {
            //减去initX,防止边界出现的问题
            ctx.fillText(text.substring(lastSubStrIndex, i), initX, initY, actualWidth);
            textWidth = Math.min(textWidth, actualWidth);
            textHeight += lineHeight;
            initY += lineHeight;
            lineWidth = 0;
            lastSubStrIndex = i;
            --i;

            if (i < 0) {
              // 第一个字符就已经超了，说明连一个字符都放不下，才会出现--0
              break;
            }
          }

          if (i == text.length - 1) {
            ctx.fillText(text.substring(lastSubStrIndex, text.length), initX, initY, actualWidth);
            textHeight += lineHeight;
          }
        }
      }
    });
    return [textWidth, textHeight];
  },
  // 计算canvas文本的宽度和高度，但不渲染
  calcCanvasTextWidthAndHeight: function calcCanvasTextWidthAndHeight(ctx, text, initX, initY, canvasWidth, lineHeight) {
    var maxWidth = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 10000;
    var maxHeight = arguments.length > 7 ? arguments[7] : undefined;
    var lineWidth = 0;
    var textArr = text.split('\n');
    var textHeight = 0; // 记录文字在canvas上的高度

    var textWidth = 0; // 记录文字在canvas上的长度

    var actualWidth = Math.min(Math.max(canvasWidth - initX - Math.floor(100 * canvasWidth / 10000), 0), maxWidth); // 限制文本框最小宽度为一个字符
    // var actualWidth = Math.min(canvasWidth - initX - 10 - 2 - 1, maxWidth);
    // console.log("actualWidth:", actualWidth, maxWidth);
    // 检测中文与韩文，日文等象形字符表达式

    var reg_ch = /[\u4E00-\u9FA5\uF900-\uFA2D\u0800-\u4e00]/; // 检测中文标点符号

    var reg_ch_punc = /[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/;
    var chatMWidth = ctx.measureText("M").width; // M为最大的英文字符宽度

    var limitIndex = 0; // 最大的警戒线

    for (var index = 0; index < textArr.length; index++) {
      var textItem = textArr[index];

      if (index > 0) {
        initY += lineHeight;
      }

      lineWidth = 0;
      textHeight += lineHeight; // 文字高度

      if (textHeight > maxHeight) {
        // 如果文字输入的总高度大于最大到底边的高度，则还不允许继续输入
        break;
      }

      if (textItem == "") {
        limitIndex += 1;
        lineWidth = 0;
      } else {
        if (index != 0) {
          limitIndex += 1; // 补一个换行符
        }

        var hasAutoBreakLine = false; // 出现自动换行

        var beyondCharNumber = 0; // 超出的不能显示的文字个数

        for (var i = 0; i < textItem.length; i++) {
          if (reg_ch.test(textItem[i]) || reg_ch_punc.test(textItem[i])) {
            lineWidth += chatMWidth * 2;
          } else {
            lineWidth += chatMWidth;
          }

          textWidth = Math.max(textWidth, lineWidth);

          if (lineWidth > actualWidth) {
            //当这一行的文本宽度大于最大宽度后（点击点到右边界），则会换行
            hasAutoBreakLine = true; // 自动换行

            textWidth = Math.min(textWidth, actualWidth);
            textHeight += lineHeight; // 到达右边界后，会自动换行

            initY += lineHeight;
            lineWidth = 0;

            if (i == 0) {
              // 如果输入的第一个字符都超边界了，则不允许输入
              beyondCharNumber = textItem.length - i;
              break;
            }

            if (textHeight > maxHeight) {
              // 如果文字输入的总高度大于最大到底边的高度，则还不允许继续输入
              beyondCharNumber = textItem.length - i;
              break;
            }

            --i; // 如果触发自动换行，则当前行不能容纳当前i索引的文字，需要切换到下一行

            if (i < 0) {
              break;
            }
          }
        }

        limitIndex += textItem.length;

        if (hasAutoBreakLine) {
          // 自动换行
          limitIndex -= beyondCharNumber; // 减去自动换行不能显示的部分
        }
      }
    }

    return {
      textWidth: textWidth,
      textHeight: textHeight,
      limitIndex: limitIndex
    };
  }
});

/***/ })

/******/ })["default"];
});
//# sourceMappingURL=TEduBoard.min.js.map